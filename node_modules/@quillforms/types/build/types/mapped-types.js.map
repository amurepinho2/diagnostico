{"version":3,"names":[],"sources":["@quillforms/types/src/types/mapped-types.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type { FunctionKeys } from 'utility-types';\r\n\r\n/**\r\n * Mapped types\r\n *\r\n * This module should only contain mapped types, operations useful in the type system\r\n * that do not produce any runtime code.\r\n *\r\n * Mapped types can be thought of as functions in the type system, they accept some type\r\n * argument and transform it to another type.\r\n *\r\n * @see https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types\r\n */\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\n/**\r\n * Maps a \"raw\" selector object to the selectors available when registered on the @wordpress/data store.\r\n *\r\n * @template S Selector map, usually from `import * as selectors from './my-store/selectors';`\r\n */\r\n\r\nexport type SelectFromMap< S extends Record< string, unknown > > = {\r\n\t[ selector in FunctionKeys< S > ]: S[ selector ] extends (\r\n\t\t...args: any[]\r\n\t) => any\r\n\t\t? (\r\n\t\t\t\t...args: TailParameters< S[ selector ] >\r\n\t\t  ) => ReturnType< S[ selector ] >\r\n\t\t: never;\r\n};\r\n\r\n/**\r\n * Maps a \"raw\" actionCreators object to the actions available when registered on the @wordpress/data store.\r\n *\r\n * @template A Selector map, usually from `import * as actions from './my-store/actions';`\r\n */\r\nexport type DispatchFromMap<\r\n\tA extends Record< string, ( ...args: any[] ) => any >\r\n> = {\r\n\t[ actionCreator in keyof A ]: (\r\n\t\t...args: Parameters< A[ actionCreator ] >\r\n\t) => A[ actionCreator ] extends ( ...args: any[] ) => Generator\r\n\t\t? Promise< GeneratorReturnType< A[ actionCreator ] > >\r\n\t\t: void;\r\n};\r\n\r\n/**\r\n * Parameters type of a function, excluding the first parameter.\r\n *\r\n * This is useful for typing some @wordpres/data functions that make a leading\r\n * `state` argument implicit.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nexport type TailParameters< F extends Function > = F extends (\r\n\thead: any,\r\n\t...tail: infer T\r\n) => any\r\n\t? T\r\n\t: never;\r\n\r\n/**\r\n * Obtain the type finally returned by the generator when it's done iterating.\r\n */\r\nexport type GeneratorReturnType< T extends ( ...args: any[] ) => Generator > =\r\n\tT extends ( ...args: any ) => Generator< any, infer R, any > ? R : never;\r\n"],"mappings":"","ignoreList":[]}