/**
 * External Dependencies
 */
import { reduce, size, isEmpty, map } from 'lodash';
/**
 * Internal Dependencies
 */
import { getBlockType } from './registration';
export function sanitizeBlockAttributes(blockName, attributes) {
  // Get the block type
  const blockType = getBlockType(blockName);
  if (undefined === blockType) {
    throw new Error(`Block type '${blockName}' is not registered.`);
  }
  // Ensure attributes contains only values defined by block type, and merge
  // default values for missing attributes.
  return reduce(blockType.attributes, (accumulator, schema, key) => {
    const value = attributes[key];
    if (undefined !== value) {
      accumulator[key] = value;
    } else if (schema.hasOwnProperty('default')) {
      accumulator[key] = schema.default;
    }
    return accumulator;
  }, {});
}

/**
 * Sanitize blocks
 * Transform unknwon blocks and sanitize block attributes
 *
 * @param {FormBlocks} blocks The form blocks to be sanitized
 *
 * @return {FormBlocks} The sanitized blocks
 */
export const sanitizeBlocks = blocks => {
  if (isEmpty(blocks)) {
    return [];
  }
  return map(blocks, block => {
    if (getBlockType(block.name)) {
      if (typeof block?.innerBlocks !== 'undefined' && size(block?.innerBlocks) > 0) {
        return {
          ...block,
          attributes: sanitizeBlockAttributes(block.name, block.attributes ? block.attributes : {}),
          innerBlocks: sanitizeBlocks(block.innerBlocks)
        };
      }
      return {
        ...block,
        attributes: sanitizeBlockAttributes(block.name, block.attributes ? block.attributes : {})
      };
    }
    return {
      ...block,
      name: 'unknown',
      attributes: sanitizeBlockAttributes('unknown', block.attributes ? block.attributes : {})
    };
  });
};
//# sourceMappingURL=utils.js.map