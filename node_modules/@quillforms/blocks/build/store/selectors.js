"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBlockSupport = void 0;
exports.getBlockType = getBlockType;
exports.getBlockTypes = void 0;
exports.hasBlockSupport = hasBlockSupport;
var _lodash = require("lodash");
/**
 * External dependencies
 */

/**
 * Given a block name or block type object, returns the corresponding
 * normalized block type object.
 *
 * @param {Object}          state      Blocks state.
 * @param {(string|Object)} nameOrType Block name or type object
 *
 * @return {Object} Block type object.
 */
const getNormalizedBlockType = (state, nameOrType) => 'string' === typeof nameOrType ? getBlockType(state, nameOrType) : nameOrType;

/**
 * Get all blocks registered.
 *
 * @param {Object} state Global application state.
 *
 * @return {Array} Registered blocks
 */
const getBlockTypes = state => {
  return (0, _lodash.reduce)((0, _lodash.sortBy)((0, _lodash.keys)(state), blockName => state[blockName].order), (acc, key) => {
    if (key !== 'unknown') {
      acc[key] = state[key];
    }
    return acc;
  }, {});
};

/**
 * Returns a block type by name.
 *
 * @param {Object} state Data state.
 * @param {string} name  Block type name.
 *
 * @return {Object?} Block Type.
 */
exports.getBlockTypes = getBlockTypes;
function getBlockType(state, name) {
  return state[name];
}

/**
 * Returns the block support value for a feature, if defined.
 *
 * @param {Object}          state           Data state.
 * @param {(string|Object)} nameOrType      Block name or type object
 * @param {string}          feature         Feature to retrieve
 * @param {*}               defaultSupports Default value to return if not
 *                                          explicitly defined
 *
 * @return {?*} Block support value
 */
const getBlockSupport = (state, nameOrType, feature) => {
  const blockType = getNormalizedBlockType(state, nameOrType);
  return (0, _lodash.get)(blockType, ['supports', feature]);
};

/**
 * Returns true if the block defines support for a feature, or false otherwise.
 *
 * @param {Object}          state           Data state.
 * @param {(string|Object)} nameOrType      Block name or type object.
 * @param {string}          feature         Feature to test.
 * @param {boolean}         defaultSupports Whether feature is supported by
 *                                          default if not explicitly defined.
 *
 * @return {boolean} Whether block supports feature.
 */
exports.getBlockSupport = getBlockSupport;
function hasBlockSupport(state, nameOrType, feature) {
  return !!getBlockSupport(state, nameOrType, feature);
}
//# sourceMappingURL=selectors.js.map