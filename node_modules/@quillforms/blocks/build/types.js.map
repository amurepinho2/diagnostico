{"version":3,"names":[],"sources":["@quillforms/blocks/src/types.ts"],"sourcesContent":["import { Component } from 'react';\r\nimport React, { FC } from 'react';\r\nimport {\r\n\tSET_BLOCK_ADMIN_SETTINGS,\r\n\tSET_BLOCK_RENDERER_SETTINGS,\r\n\tADD_BLOCK_TYPES,\r\n} from './store/constants';\r\nimport type { BlockAttributes, IconRenderer } from '@quillforms/types';\r\n\r\ninterface ControlsProps {\r\n\tid: string;\r\n\tattributes: BlockAttributes | undefined;\r\n\tsetAttributes( T: Record< string, unknown > ): void;\r\n}\r\n\r\ninterface EntryDetailsProps {\r\n\tid: string;\r\n\tattributes: BlockAttributes | undefined;\r\n\tvalue: any;\r\n}\r\nexport interface BlockAdminSettings {\r\n\ttitle?: string;\r\n\tcolor?: string;\r\n\ticon?: IconRenderer;\r\n\tcontrols?: React.ComponentType< ControlsProps >;\r\n\tlogicControl?: FC | Component | JSX.Element;\r\n\torder?: number;\r\n\tgetChoices?: ( args: {\r\n\t\tid: string;\r\n\t\tattributes: BlockAttributes;\r\n\t} ) => { label: string; value: string }[];\r\n\tentryDetails?: React.ComponentType< EntryDetailsProps >;\r\n}\r\n\r\nexport interface BlockRendererSettings {\r\n\tdisplay?: FC | Component | JSX.Element;\r\n\tdisplayLayout?: 'default' | 'split-right' | 'split-left';\r\n\tmergeTag?: FC | Component | JSX.Element;\r\n\tcounterIcon?: FC | Component | JSX.Element;\r\n\tnextBtn?: FC | Component | JSX.Element;\r\n\tgetNumericVal?: ( val: any, attributes?: BlockAttributes ) => number;\r\n\tisConditionFulfilled?(\r\n\t\tconditionOperator: string,\r\n\t\tconditionVal: unknown,\r\n\t\tfieldValue: unknown\r\n\t): boolean;\r\n}\r\nexport type BlockSupportedFeatures = {\r\n\tinnerBlocks?: boolean;\r\n\tcontrols?: boolean;\r\n\tattachment?: boolean;\r\n\tdescription?: boolean;\r\n\teditable?: boolean;\r\n\tdefaultValue?: any;\r\n\tplaceholder?: boolean | string;\r\n\trequired?: boolean;\r\n\tlogic?: boolean;\r\n\tlogicConditions?: boolean;\r\n\ttheme?: boolean;\r\n\tnumeric?: boolean;\r\n\tchoices?: boolean;\r\n\tpayments?: boolean;\r\n\tpoints?: boolean;\r\n\tcorrectAnswers?: boolean;\r\n};\r\n\r\ntype logicalOperator =\r\n\t| 'is'\r\n\t| 'is_not'\r\n\t| 'starts_with'\r\n\t| 'greater_than'\r\n\t| 'lower_than'\r\n\t| 'ends_with'\r\n\t| 'contains'\r\n\t| 'not_contains';\r\nexport interface BlockTypeSettings extends BlockAdminSettings, BlockRendererSettings {\r\n\tattributes?: Record<\r\n\t\tstring,\r\n\t\t{\r\n\t\t\ttype: string | string[];\r\n\t\t\tdefault?: unknown;\r\n\t\t\t[ x: string ]: unknown;\r\n\t\t}\r\n\t>;\r\n\tname?: string;\r\n\tsupports: BlockSupportedFeatures;\r\n\tlogicalOperators?: logicalOperator[];\r\n}\r\n\r\nexport interface BlockTypeInterface extends BlockTypeSettings {\r\n\tname: string;\r\n}\r\n\r\nexport interface BlocksState {\r\n\t[ name: string ]: BlockTypeSettings;\r\n}\r\n\r\n/**\r\n * Actions\r\n */\r\n\r\ninterface anyAction {\r\n\ttype: string;\r\n\t[ x: string ]: unknown;\r\n}\r\ninterface setBlockRendererSettingsAction extends anyAction {\r\n\ttype: typeof SET_BLOCK_RENDERER_SETTINGS;\r\n\tsettings: BlockRendererSettings;\r\n\tname: string;\r\n}\r\n\r\ninterface setBlockAdminSettingsAction extends anyAction {\r\n\ttype: typeof SET_BLOCK_ADMIN_SETTINGS;\r\n\tsettings: BlockAdminSettings;\r\n\tname: string;\r\n}\r\n\r\ninterface addBlockTypesAction extends anyAction {\r\n\ttype: typeof ADD_BLOCK_TYPES;\r\n\tblockTypes: BlockTypeInterface[];\r\n}\r\nexport type BlockActionTypes =\r\n\t| setBlockRendererSettingsAction\r\n\t| setBlockAdminSettingsAction\r\n\t| addBlockTypesAction\r\n\t| ReturnType< () => { type: 'NOOP' } >;\r\n"],"mappings":"","ignoreList":[]}