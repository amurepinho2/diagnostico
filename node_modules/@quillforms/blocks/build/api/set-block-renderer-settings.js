"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setBlockRendererSettings = void 0;
var _data = require("@wordpress/data");
var _lodash = require("lodash");
/* eslint no-console: [ 'error', { allow: [ 'error' ] } ] */

/**
 * External Dependencies
 */

/**
 * Set block renderer settings
 * Set block renderer settings is for defining renderer behavior for the block
 *
 * @param {string} name     Block name.
 * @param {Object} settings Block renderer settings.
 *
 */
const setBlockRendererSettings = (name, settings) => {
  settings = {
    display: () => null,
    ...settings
  };
  if (typeof name !== 'string') {
    console.error('Block types must be strings.');
    return;
  }
  const blockType = (0, _data.select)('quillForms/blocks').getBlockType(name);
  if (!blockType) {
    console.error(`The ${name} block isn't registered. Please register it first!`);
    return;
  }
  if (!(0, _lodash.isFunction)(settings.display)) {
    console.error('The "display" property must be a valid function!');
    return;
  }
  if (settings.mergeTag && !(0, _lodash.isFunction)(settings.mergeTag)) {
    console.error('The "mergeTag" property must be a valid function!');
    return;
  }
  if (settings.counterIcon && !(0, _lodash.isFunction)(settings.counterIcon)) {
    console.error('The "counterIcon" property must be a valid function!');
    return;
  }
  if (settings.nextBtn && !(0, _lodash.isFunction)(settings.nextBtn)) {
    console.error('The "nextBtn" property must be a valid function!');
    return;
  }
  if (settings.isConditionFulfilled && !(0, _lodash.isFunction)(settings.isConditionFulfilled)) {
    console.error('The "isConditionFulfilled" property must be a valid function!');
    return;
  }
  if (!settings.isConditionFulfilled) {
    settings.isConditionFulfilled = (conditionOperator, conditionVal, fieldValue) => {
      switch (conditionOperator) {
        case 'is':
          {
            if (Array.isArray(fieldValue)) return fieldValue.includes(conditionVal);
            return fieldValue == conditionVal;
          }
        case 'is_not':
          {
            if (Array.isArray(fieldValue)) return !fieldValue.includes(conditionVal);
            return fieldValue != conditionVal;
          }
        case 'greater_than':
          {
            if (isNaN(fieldValue) || isNaN(conditionVal)) {
              return false;
            }
            return parseFloat(fieldValue) > parseFloat(conditionVal);
          }
        case 'lower_than':
          {
            if (isNaN(fieldValue) || isNaN(conditionVal)) {
              return false;
            }
            return parseFloat(fieldValue) < parseFloat(conditionVal);
          }
        case 'contains':
          {
            if (typeof fieldValue !== 'string' || typeof conditionVal !== 'string') {
              return false;
            }
            return fieldValue.indexOf(conditionVal) !== -1;
          }
        case 'not_contains':
          {
            if (typeof fieldValue !== 'string' || typeof conditionVal !== 'string') {
              return false;
            }
            return fieldValue.indexOf(conditionVal) === -1;
          }
        case 'starts_with':
          {
            if (typeof fieldValue !== 'string' || typeof conditionVal !== 'string') {
              return false;
            }
            return fieldValue.startsWith(conditionVal);
          }
        case 'ends_with':
          {
            if (typeof fieldValue !== 'string' || typeof conditionVal !== 'string') {
              return false;
            }
            return fieldValue.endsWith(conditionVal);
          }
      }
      return false;
    };
  }
  if (settings.getNumericVal && !(0, _lodash.isFunction)(settings.getNumericVal)) {
    console.error('The "getNumericVal" must be a function');
    return;
  }
  if (!settings.getNumericVal) {
    settings.getNumericVal = (val, _attributes) => {
      return parseFloat(val);
    };
  }
  (0, _data.dispatch)('quillForms/blocks').setBlockRendererSettings((0, _lodash.pick)(settings, ['display', 'mergeTag', 'nextBtn', 'counterIcon', 'isConditionFulfilled', 'getNumericVal', 'displayLayout']), name);
  return settings;
};
exports.setBlockRendererSettings = setBlockRendererSettings;
//# sourceMappingURL=set-block-renderer-settings.js.map