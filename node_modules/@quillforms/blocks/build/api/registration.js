"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBlockType = getBlockType;
exports.registerBlockType = exports.getDefaultBlockSupports = void 0;
var _config = _interopRequireDefault(require("@quillforms/config"));
var _data = require("@wordpress/data");
var _lodash = require("lodash");
var _setBlockAdminSettings = require("./set-block-admin-settings");
var _setBlockRendererSettings = require("./set-block-renderer-settings");
/* eslint-disable no-console */
/**
 * QuillForms Dependencies
 */

/**
 * WordPress Dependencies
 */

/**
 * External Dependencies
 */

/**
 * Internal Dependencies
 */

const getDefaultBlockSupports = () => {
  return {
    editable: true,
    required: true,
    attachment: true,
    description: true,
    defaultValue: false,
    placeholder: false,
    logic: true,
    logicConditions: true,
    innerBlocks: false,
    numeric: false,
    choices: false,
    payments: false,
    points: false,
    correctAnswers: false
  };
};

/**
 * Registers a new block provided a unique name and an object defining its
 * behavior. Once registered, the block is made available as an option to any
 * editor interface where blocks are implemented.
 *
 * @param  name     Block name.
 * @param  settings Block settings.
 *
 * @return The block settings, if it has been successfully registered;
 * otherwise `undefined`.
 */
exports.getDefaultBlockSupports = getDefaultBlockSupports;
const registerBlockType = (name, settings) => {
  if (typeof name !== 'string') {
    console.error('Block names must be strings.');
    return;
  }
  const isWPEnv = _config.default.isWPEnv();
  if (name === 'file' && !isWPEnv && window?.quillformsSaasManagerAdmin?.plan?.plan === 'free') {
    return;
  }
  if ((0, _data.select)('quillForms/blocks').getBlockType(name)) {
    console.error('Block "' + name + '" is already registered.');
    return;
  }
  settings.supports = {
    ...getDefaultBlockSupports(),
    ...settings.supports
  };
  let {
    attributes
  } = settings;
  const {
    supports
  } = settings;
  if (!attributes || !(0, _lodash.isPlainObject)(attributes)) {
    attributes = {};
  }
  if (supports.required) {
    attributes.required = {
      type: 'boolean',
      default: false
    };
  }
  attributes.nextBtnLabel = {
    type: ['string', 'boolean'],
    default: false
  };
  attributes.classnames = {
    type: 'string',
    default: ''
  };
  if (supports.placeholder) {
    attributes.placeholder = {
      type: ['string', 'boolean'],
      default: false
    };
  }
  if (supports.attachment) {
    attributes.attachment = {
      type: 'object',
      properties: {
        url: {
          type: 'string'
        }
      }
    };
  }
  if (supports.defaultValue) {
    attributes.defaultValue = {
      type: 'string',
      default: ''
    };
  }
  if (supports.description) {
    attributes.description = {
      type: 'string',
      default: ''
    };
  }
  if (supports.theme) {
    attributes.themeId = {
      type: 'number'
    };
  }
  if (name === 'dropdown' || name === 'multiple-choice' || name === 'picture-choice') {
    attributes.randomize = {
      type: 'boolean',
      default: false
    };
  }
  attributes.label = {
    type: 'string',
    default: ''
  };
  attributes.customHTML = {
    type: 'string',
    default: ''
  };
  attributes.layout = {
    type: 'string',
    default: 'stack'
  };
  attributes.attachmentFocalPoint = {
    type: 'object',
    default: {
      x: 0.5,
      y: 0.5
    }
  };
  attributes.attachmentFancyBorderRadius = {
    type: 'boolean',
    default: false
  };
  attributes.attachmentBorderRadius = {
    type: 'boolean',
    default: '0px'
  };
  attributes.attachmentMaxWidth = {
    type: 'string',
    default: 'none'
  };
  settings.attributes = attributes;
  (0, _data.dispatch)('quillForms/blocks').addBlockTypes({
    name,
    ...(0, _lodash.pick)(settings, ['attributes', 'supports', 'logicalOperators'])
  });
  (0, _setBlockRendererSettings.setBlockRendererSettings)(name, settings);
  (0, _setBlockAdminSettings.setBlockAdminSettings)(name, settings);
  return settings;
};

/**
 * Returns a registered block type.
 *
 * @param {string} name Block name.
 *
 * @return {?BlockTypeSettingss} Block type.
 */
exports.registerBlockType = registerBlockType;
function getBlockType(name) {
  return (0, _data.select)('quillForms/blocks').getBlockType(name);
}
//# sourceMappingURL=registration.js.map