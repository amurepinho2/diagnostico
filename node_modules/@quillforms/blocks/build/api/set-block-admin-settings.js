"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setBlockAdminSettings = void 0;
var _data = require("@wordpress/data");
var _lodash = require("lodash");
var _utils = require("@quillforms/utils");
/* eslint no-console: [ 'error', { allow: [ 'error' ] } ] */
/**
 * WordPress Dependencies
 */

/**
 * External Dependencies
 */

/**
 * Internal Dependencies
 */

/**
 * Set block admin settings.
 * Block admin settings is the configuration for the block that should be loaded at the admin only.
 * We should define here the block icon, controls, color and logic control.
 *
 * @param {string}             name       Block name.
 * @param {BlockAdminSettings} settings   Block configuration.
 *
 */
const setBlockAdminSettings = (name, settings) => {
  settings = {
    title: 'Untitled',
    color: '#333s',
    icon: 'plus',
    order: 20,
    controls: () => null,
    ...settings
  };
  if (typeof name !== 'string') {
    console.error('Block types must be strings.');
    return;
  }
  const blockType = (0, _data.select)('quillForms/blocks').getBlockType(name);
  if (!blockType) {
    console.error(`The ${name} block isn't registered. Please register it first!`);
    return;
  }
  if (typeof settings.color !== 'string') {
    console.error('The "color" property must be a valid string!');
  }
  settings.icon = (0, _utils.normalizeIconObject)(settings.icon);
  if (!(0, _utils.isValidIcon)(settings.icon.src)) {
    console.error('The "icon" property must be a valid function!');
    return;
  }
  if (settings.logicControl && !(0, _lodash.isFunction)(settings.logicControl)) {
    console.error('The "logicControl" property must be a valid function!');
    return;
  }
  if (settings.entryDetails && !(0, _lodash.isFunction)(settings.entryDetails)) {
    console.error('The "entryDetails" property must be a valid function!');
    return;
  }
  if (!(0, _lodash.isFunction)(settings.controls)) {
    console.error('The "controls" property must be a valid function!');
    return;
  }
  if (settings.order && isNaN(settings.order)) {
    console.error('The "order" property must be a valid number!');
    return;
  }
  if (!(0, _lodash.isFunction)(settings.getChoices)) {
    // @ts-ignore
    settings.getChoices = ({
      id,
      attributes
    }) => {
      return [];
    };
  }
  (0, _data.dispatch)('quillForms/blocks').setBlockAdminSettings((0, _lodash.pick)(settings, ['controls', 'entryDetails', 'logicControl', 'color', 'icon', 'title', 'order', 'getChoices']), name);
};
exports.setBlockAdminSettings = setBlockAdminSettings;
//# sourceMappingURL=set-block-admin-settings.js.map