/**
 * Internal Dependencies
 */
import type { BlockTypeSettings, BlocksState, BlockSupportedFeatures, BlockTypeInterface } from '../types';
/**
 * Get all blocks registered.
 *
 * @param {Object} state Global application state.
 *
 * @return {Array} Registered blocks
 */
export declare const getBlockTypes: (state: BlocksState) => BlocksState;
/**
 * Returns a block type by name.
 *
 * @param {Object} state Data state.
 * @param {string} name  Block type name.
 *
 * @return {Object?} Block Type.
 */
export declare function getBlockType(state: BlocksState, name: string): BlockTypeSettings | undefined;
/**
 * Returns the block support value for a feature, if defined.
 *
 * @param {Object}          state           Data state.
 * @param {(string|Object)} nameOrType      Block name or type object
 * @param {string}          feature         Feature to retrieve
 * @param {*}               defaultSupports Default value to return if not
 *                                          explicitly defined
 *
 * @return {?*} Block support value
 */
export declare const getBlockSupport: (state: BlocksState, nameOrType: string | BlockTypeInterface, feature: keyof BlockSupportedFeatures) => string | boolean | undefined;
/**
 * Returns true if the block defines support for a feature, or false otherwise.
 *
 * @param {Object}          state           Data state.
 * @param {(string|Object)} nameOrType      Block name or type object.
 * @param {string}          feature         Feature to test.
 * @param {boolean}         defaultSupports Whether feature is supported by
 *                                          default if not explicitly defined.
 *
 * @return {boolean} Whether block supports feature.
 */
export declare function hasBlockSupport(state: BlocksState, nameOrType: string, feature: keyof BlockSupportedFeatures): boolean;
//# sourceMappingURL=selectors.d.ts.map