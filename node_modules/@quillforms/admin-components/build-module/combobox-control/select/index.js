import { createElement } from "react";
/**
 * QuillForms Dependencies
 */
import SelectControl from '../../select-control';

/**
 * WordPress Dependencies
 */
// @ts-expect-error

import { __ } from '@wordpress/i18n';

/**
 * External Dependencies
 */

/**
 * Internal Dependencies
 */
import { useComboboxControlContext } from '../context';
import Option from './option';
import { getPlainExcerpt } from '../../rich-text';
const Select = ({
  hideChooseOption
}) => {
  var _SelectOptions$find;
  const {
    sections,
    options,
    value,
    onChange,
    isToggleEnabled,
    placeholder,
    excerptLength
  } = useComboboxControlContext();

  // @ts-expect-error
  const SelectOptions = [{
    key: 'select',
    name: createElement(Option, {
      label: placeholder !== null && placeholder !== void 0 ? placeholder : __('Choose an option', 'quillforms')
    }),
    style: hideChooseOption ? {
      display: 'none'
    } : {}
  }];
  // add each section with related options.
  for (const section of sections) {
    SelectOptions.push({
      key: section.key,
      name: createElement("div", {
        onClick: ev => ev.stopPropagation()
      }, section.label),
      className: 'combobox-control-select-section'
    });
    options.forEach((option, index) => {
      if (option.section === section.key) {
        SelectOptions.push({
          key: index,
          name: createElement(Option, {
            label: getPlainExcerpt(option.label, excerptLength)
            // @ts-ignore
            ,
            order: option?.order,
            iconBox: option.iconBox,
            hasSection: true
          })
        });
      }
    });
  }
  // add options of undefined section.
  options.forEach((option, index) => {
    if (option.section === undefined) {
      SelectOptions.push({
        key: index,
        name: createElement(Option, {
          label: option.label,
          iconBox: option.iconBox
        })
      });
    }
  });
  // add custom value option.
  if (isToggleEnabled) {
    SelectOptions.push({
      key: 'toggle',
      name: createElement(Option, {
        label: __('Custom Value', 'quillforms')
      })
    });
  }
  return createElement("div", {
    className: "combobox-control-select"
  }, createElement(SelectControl, {
    label: "",
    value: (_SelectOptions$find = SelectOptions.find(option => Number.isInteger(option.key) && options[option.key].type === value.type && options[option.key].value === value.value)) !== null && _SelectOptions$find !== void 0 ? _SelectOptions$find : SelectOptions[0],
    onChange: ({
      selectedItem
    }) => {
      if (selectedItem) {
        if (selectedItem.key === 'select') {
          // clear selection
          onChange({});
        } else if (selectedItem.key === 'toggle') {
          // toggle to rich text editor
          onChange({
            type: 'text'
          });
        } else if (Number.isInteger(selectedItem.key)) {
          // update selected value
          const option = options[selectedItem.key];
          onChange({
            type: option.type,
            value: option.value
          });
        }
      }
    },
    options: SelectOptions
  }));
};
export default Select;
//# sourceMappingURL=index.js.map