import { createElement } from "react";
/**
 * QuillForms Dependencies
 */
import { RichTextControl } from '../../rich-text';
import Button from '../../button';

/**
 * WordPress Dependencies
 */
import { Icon } from '@wordpress/components';
import { closeSmall } from '@wordpress/icons';

/**
 * External Dependencies
 */

/**
 * Internal Dependencies
 */
import { useComboboxControlContext } from '../context';
const RichText = ({
  allowedFormats
}) => {
  var _value$value;
  const {
    id,
    options,
    value,
    onChange,
    isToggleEnabled,
    placeholder
  } = useComboboxControlContext();
  const tags = [];
  for (const option of options) {
    if (option.isMergeTag) {
      tags.push({
        type: option.type,
        modifier: option.value,
        label: option.label,
        icon: option.iconBox?.icon,
        color: option.iconBox?.color
      });
    }
  }
  return createElement("div", {
    className: "combobox-control-rich-text"
  }, isToggleEnabled && createElement(Button, {
    className: "combobox-control-rich-text-back",
    onClick: () => onChange({})
  }, createElement(Icon, {
    icon: closeSmall
  })), createElement(RichTextControl, {
    id: id,
    value: (_value$value = value.value) !== null && _value$value !== void 0 ? _value$value : '',
    setValue: $value => onChange({
      type: 'text',
      value: $value
    }),
    mergeTags: tags,
    allowedFormats: allowedFormats,
    placeholder: placeholder
  }));
};
export default RichText;
//# sourceMappingURL=index.js.map