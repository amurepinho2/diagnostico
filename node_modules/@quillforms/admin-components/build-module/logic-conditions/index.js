import { createElement } from "react";
/**
 * QuillForms Dependencies
 */

/**
 * WordPress Dependencies
 */
import { useSelect } from '@wordpress/data';
import { useEffect } from 'react';
import { Icon } from '@wordpress/components';
import { closeSmall } from '@wordpress/icons';

/**
 * External Dependencies
 */
import { forEach, size } from 'lodash';

/**
 * Internal Dependencies
 */
import ComboboxControl from '../combobox-control';
import OperatorSelector from './operator-selector';
import TextControl from '../text-control';
import Button from '../button';
import AdvancedDropdown from './advanced-dropdown';
const LogicConditions = ({
  value,
  onChange,
  combobox
}) => {
  const {
    formBlocks,
    blockTypes
  } = useSelect(select => {
    return {
      // @ts-ignore
      formBlocks: select('quillForms/block-editor').getBlocks(),
      blockTypes: select('quillForms/blocks').getBlockTypes()
    };
  });
  const blocks = [];
  if (size(formBlocks) > 0) {
    forEach(formBlocks, block => {
      if (blockTypes[block.name]?.supports?.editable) {
        blocks.push({
          ...block
        });
      }
      if (blockTypes[block.name]?.supports?.innerBlocks) {
        if (size(block?.innerBlocks) > 0) {
          forEach(block.innerBlocks, childBlock => {
            blocks.push({
              ...childBlock
            });
          });
        }
      }
    });
  }
  // update value on mount if input isn't array or is empty array.
  useEffect(() => {
    if (!Array.isArray(value) || value.length === 0) {
      onChange([[{
        vars: [{}, {}]
      }]]);
    }
  }, []);
  const customize = combobox?.customize?.override ? combobox.customize.handler : customizable => {
    let {
      sections,
      options
    } = customizable;
    sections = sections.filter(section => ['fields', 'variables', 'hidden_fields'].includes(section.key));
    options = options.filter(option => {
      if (option.type === 'field') {
        var _option$other$name;
        const blockType = blockTypes[(_option$other$name = option.other?.name) !== null && _option$other$name !== void 0 ? _option$other$name : ''];
        return blockType?.supports?.logic && blockType?.supports?.logicConditions;
      } else if (['variable', 'hidden_field'].includes(option.type)) {
        return true;
      }
      return false;
    });
    if (combobox?.customize) {
      const customized = combobox.customize.handler({
        sections,
        options
      });
      sections = customized.sections;
      options = customized.options;
    }
    return {
      sections,
      options
    };
  };
  if (!Array.isArray(value)) {
    return null;
  }
  return createElement("div", {
    className: "logic-conditions"
  }, value.map((group, gi) => createElement("div", {
    key: gi
  }, createElement("div", {
    className: "logic-conditions__group"
  }, value.length > 1 && createElement("div", {
    className: "group-remove"
  }, createElement(Icon, {
    icon: closeSmall,
    onClick: () => {
      const $value = [...value];
      $value.splice(gi, 1);
      onChange($value);
    }
  })), group.map((condition, ci) => {
    var _combobox$excerptLeng;
    const var0Type = condition.vars[0].type;
    const var0Value = condition.vars[0].value;
    const op = condition.op;
    const var1Value = condition.vars[1].value;

    // some properties for field type.
    let block;
    let blockType;
    if (var0Type === 'field') {
      block = blocks.find($block => $block.id === condition.vars[0].value);
      blockType = blockTypes[block?.name];
      if (!blockType) {
        return null;
      }
    }

    // possible operators list.
    let operators = null;
    if (var0Type === 'field') {
      if (blockType.logicalOperators) {
        operators = blockType.logicalOperators;
      }
    } else if (var0Type === 'variable') {
      operators = ['is', 'is_not', 'lower_than', 'greater_than'];
    }
    if (!operators) {
      operators = ['is', 'is_not', 'starts_with', 'ends_with', 'contains', 'not_contains'];
    }
    let row1 = null;
    let row2 = null;

    // row1 render.
    row1 = createElement("div", {
      className: "condition-row-1"
    }, createElement("div", {
      className: "condition-var0"
    }, createElement(ComboboxControl, {
      excerptLength: (_combobox$excerptLeng = combobox?.excerptLength) !== null && _combobox$excerptLeng !== void 0 ? _combobox$excerptLeng : 30,
      value: condition.vars[0],
      onChange: var0 => {
        const $value = [...value];
        $value[gi][ci] = {
          vars: [var0, {
            type: undefined
          }]
        };
        onChange($value);
      },
      isToggleEnabled: false,
      customize: customize,
      hideChooseOption: true,
      selectFirstOption: true
    })), createElement("div", {
      className: "condition-op"
    }, var0Value && createElement(OperatorSelector, {
      operators: operators,
      value: op !== null && op !== void 0 ? op : null,
      onChange: op => {
        const $value = [...value];
        $value[gi][ci].op = op;
        onChange($value);
      }
    })));

    // row2 render.
    if (var0Value) {
      row2 = createElement("div", {
        className: "condition-row-2"
      }, var0Type === 'field' && blockType.logicControl ? createElement(blockType.logicControl, {
        attributes: block.attributes,
        value: var1Value,
        setValue: var1 => {
          const $value = [...value];
          $value[gi][ci].vars[1].value = var1;
          onChange($value);
        },
        removeCondition: () => {
          const $value = [...value];
          $value[gi].splice(ci, 1);
          onChange($value);
        }
      }) : var0Type === 'variable' ?
      // <TextControl
      // 	type="number"
      // 	value={ var1Value ?? '' }
      // 	onChange={ ( var1 ) => {
      // 		const $value = [ ...value ];
      // 		$value[ gi ][
      // 			ci
      // 		].vars[ 1 ].value = var1;
      // 		onChange( $value );
      // 	} }
      // />
      createElement(AdvancedDropdown, {
        var0: condition.vars[0],
        var1: condition.vars[1],
        onChange: var1 => {
          const $value = [...value];
          $value[gi][ci].vars[1].value = var1.value;
          $value[gi][ci].vars[1].type = var1.type;
          onChange($value);
        }
      }) : createElement(TextControl, {
        value: var1Value !== null && var1Value !== void 0 ? var1Value : '',
        onChange: var1 => {
          const $value = [...value];
          $value[gi][ci].vars[1].value = var1;
          onChange($value);
        }
      }));
    }
    return createElement("div", {
      key: ci
    }, createElement("div", {
      className: "logic-conditions__condition"
    }, createElement("div", {
      className: "condition-rows"
    }, row1, row2), group.length > 1 && createElement("div", null, createElement("div", {
      className: "condition-remove"
    }, createElement(Icon, {
      icon: closeSmall,
      onClick: () => {
        const $value = [...value];
        $value[gi].splice(ci, 1);
        onChange($value);
      }
    })))), group.length - 1 !== ci ? createElement("div", null, "and") : createElement("div", {
      className: "logic-conditions__add-condition"
    }, createElement(Button, {
      isPrimary: true,
      onClick: () => {
        const $value = [...value];
        $value[gi].push({
          vars: [{}, {}]
        });
        onChange($value);
      }
    }, "and")));
  })), value.length - 1 !== gi ? createElement("div", {
    className: "logic-conditions__or"
  }, "- OR -") : createElement("div", {
    className: "logic-conditions__add-group"
  }, createElement(Button, {
    isPrimary: true,
    onClick: () => {
      const $value = [...value];
      $value.push([{
        vars: [{}, {}]
      }]);
      onChange($value);
    }
  }, "OR")))));
};
export default LogicConditions;
//# sourceMappingURL=index.js.map