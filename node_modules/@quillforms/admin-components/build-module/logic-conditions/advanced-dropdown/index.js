import { createElement, Fragment } from "react";
import React, { useRef } from "react";
import useVariables from "../../combobox-control/use-variables";
import { DropdownMenu, MenuItem, MenuGroup } from '@wordpress/components';
import { chevronDown } from '@wordpress/icons';
import { BlockIconBox, TextControl } from "../..";
import classnames from "classnames";
import { css } from "emotion";
import { size } from "lodash";
const AdvancedDropdown = ({
  var0,
  var1,
  onChange
}) => {
  var _var1$value;
  const ref = useRef(null);
  let options = [{
    type: 'input',
    label: "Enter a number"
  }];
  const variables = useVariables({
    section: 'variables'
  }).filter(variable => variable.value !== var0.value).map(variable => {
    return {
      ...variable,
      label: createElement("div", {
        className: css`display: flex;align-items: center; 
            .admin-components-block-icon-box {
                width: 28px;
                display: flex;
                justify-content: center;
            }`
      }, createElement(BlockIconBox, {
        icon: variable?.iconBox?.icon,
        color: variable?.iconBox?.color
      }), " ", createElement("span", {
        className: css`margin: 0 8px`
      }, variable?.label, " "))
    };
  });
  const handleChange = selected => {
    onChange(selected);
  };
  const handleNumberChange = val => {
    onChange({
      value: val,
      type: "input"
    });
  };
  const selectedVariable = variables?.find(variable => variable.value === var1.value);
  return createElement("div", {
    className: classnames("logic-conditions-advanced-dropdown", css`
            cursor: ${var1?.type && var1?.type !== "input" ? "pointer" : "default"};
        `),
    ref: ref,
    onClick: event => {
      if (var1?.type && var1?.type !== "input") {
        event.stopPropagation();
        ref.current.querySelector('button').click();
      }
    }
  }, createElement("div", {
    className: ""
  }, !var1.type || var1?.type === "input" ? createElement(TextControl, {
    type: "number",
    placeholder: "Enter a number",
    value: (_var1$value = var1.value) !== null && _var1$value !== void 0 ? _var1$value : '',
    onChange: handleNumberChange
  }) : createElement("div", {
    className: "logic-conditions-advanced-dropdown__variable-label"
  }, selectedVariable?.label)), createElement(DropdownMenu, {
    className: "logic-conditions-advanced-dropdown__menu",
    icon: chevronDown
  }, ({
    onClose
  }) => createElement(MenuGroup, null, options.map(option => createElement(MenuItem, {
    key: option.value,
    onClick: () => {
      handleChange(option);
      onClose();
    }
  }, option.label)), size(variables) > 0 && createElement(Fragment, null, createElement("div", {
    className: "combobox-control-select-section",
    onClick: ev => ev.stopPropagation()
  }, "Variables"), variables.map(option => createElement(MenuItem, {
    key: option.value,
    onClick: () => {
      handleChange(option);
      onClose();
    }
  }, option.label))))));
};
export default AdvancedDropdown;
//# sourceMappingURL=index.js.map