import { createElement, Fragment } from "react";
/**
 * QuillForms Dependencies
 */

/**
 * WordPress Dependencies
 */
import { useEffect } from 'react';
// @ts-expect-error
import { Icon } from '@wordpress/components';
import { plus, close } from '@wordpress/icons';

/**
 * External Dependencies
 */
import { Editor, Transforms } from 'slate';
import classnames from 'classnames';
import { css } from 'emotion';
/**
 * Internal Dependencies
 */
import getPlainExcerpt from '../../get-plain-excerpt';
const EditorMergeTag = ({
  attributes,
  editor,
  children,
  path,
  element,
  mergeTags
}) => {
  const {
    type,
    modifier
  } = element.data;
  const [node] = Editor.node(editor, path);
  const mergeTag = mergeTags.find(a => a.type === type && a.modifier === modifier);
  const mergeTagIcon = mergeTag?.icon ? mergeTag.icon : plus;
  const renderedIcon = createElement(Icon, {
    icon: mergeTagIcon?.src ? mergeTagIcon?.src
    // @ts-expect-error
    : mergeTagIcon
  });
  useEffect(() => {
    if (!mergeTag) {
      editor.apply({
        type: 'remove_node',
        path,
        node
      });
      Transforms.insertNodes(editor, {
        text: `{{${type}:${modifier}}}`
      }, {
        at: path
      });
    }
  }, []);
  return createElement(Fragment, null, mergeTag && createElement("span", {
    ...attributes,
    contentEditable: false,
    className: classnames('rich-text-merge-tag__node-wrapper', css`
							color: ${mergeTag?.color ? mergeTag.color : '#bb426f'};
							bordercolor: ${mergeTag?.color ? mergeTag.color : '#bb426f'};
							fill: ${mergeTag?.color ? mergeTag.color : '#bb426f'};
						`)
  }, createElement("span", {
    className: classnames('rich-text-merge-tag__background', css`
								background: ${mergeTag?.color ? mergeTag.color : '#bb426f'};
							`)
  }), createElement("span", {
    className: "rich-text-merge-tag__icon-box"
  }, renderedIcon), createElement("span", {
    className: "rich-text-merge-tag__title",
    dangerouslySetInnerHTML: {
      __html: getPlainExcerpt(mergeTag.label)
    }
  }), createElement("button", {
    className: "rich-text-merge-tag__delete",
    onClick: () => {
      setTimeout(() => {
        editor.apply({
          type: 'remove_node',
          path,
          node
        });
      }, 0);
    }
  }, createElement(Icon, {
    icon: close
  })), children));
};
export default EditorMergeTag;
//# sourceMappingURL=index.js.map