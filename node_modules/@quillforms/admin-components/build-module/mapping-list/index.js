import { createElement } from "react";
/**
 * WordPress Dependencies
 */

import { useState, useEffect, useMemo } from 'react';

/**
 * Internal Dependencies
 */
import MappingRow from '../mapping-row';
const MappingList = ({
  sections,
  options,
  initial,
  onChange
}) => {
  // initial mapping rows.
  const initialMappingRows = useMemo(() => {
    const result = [];
    // first add the initial fields.
    for (const [key, value] of Object.entries(initial !== null && initial !== void 0 ? initial : {})) {
      result.push({
        key,
        value
      });
    }
    // then add the required options.
    for (const option of options !== null && options !== void 0 ? options : []) {
      if (option.required && !result.find(item => item.key === option.value)) {
        result.push({
          key: option.value,
          value: {}
        });
      }
    }
    // add an empty option if there is no options added.
    if (result.length === 0) {
      result.push({
        key: '',
        value: {}
      });
    }
    return result;
  }, []);

  // mapping rows state.
  const [mappingRows, setMappingRows] = useState(initialMappingRows);
  const selectedKeys = mappingRows.map(row => row.key);

  // call onChange
  useEffect(() => {
    const fields = {};
    for (const {
      key,
      value
    } of mappingRows) {
      if (key && value.type && value.value) {
        fields[key] = value;
      }
    }
    onChange(fields);
  }, [mappingRows]);
  return createElement("div", null, mappingRows.map((fieldRow, index) => {
    const option = options?.find(option => option.value === fieldRow.key);
    return createElement(MappingRow, {
      key: index,
      keyProps: {
        sections: sections,
        options: options?.filter(option => option.value === fieldRow.key || !selectedKeys.includes(option.value)),
        value: fieldRow.key,
        onChange: key => {
          setMappingRows(state => {
            const newState = [...state];
            newState[index] = {
              key,
              value: {}
            };
            return newState;
          });
        },
        disabled: option?.required
      },
      valueProps: {
        value: fieldRow.value,
        onChange: value => {
          setMappingRows(state => {
            const newState = [...state];
            newState[index].value = value;
            return newState;
          });
        },
        customize: option?.combobox?.customize
      },
      onAddClick: () => {
        setMappingRows(state => {
          const newState = [...state];
          newState.splice(index + 1, 0, {
            key: '',
            value: {}
          });
          return newState;
        });
      },
      onRemoveClick: option?.required || mappingRows.length === 1 ? undefined : () => {
        setMappingRows(state => {
          const newState = [...state];
          newState.splice(index, 1);
          return newState;
        });
      }
    });
  }));
};
export default MappingList;
//# sourceMappingURL=index.js.map