import { createElement } from "react";
/**
 * QuillForms Dependencies
 */
import SelectControl from '../../../select-control';

/**
 * WordPress Dependencies
 */
// @ts-expect-error

import { Disabled } from '@wordpress/components';
import { __ } from '@wordpress/i18n';

/**
 * Internal Dependencies
 */
import { useMappingKeyControlContext } from '../context';
import Option from './option';
const Select = ({
  sections,
  options
}) => {
  var _SelectOptions$find;
  const {
    value,
    onChange,
    disabled
  } = useMappingKeyControlContext();

  // @ts-expect-error
  const SelectOptions = [{
    key: 'select',
    name: createElement(Option, {
      label: __('Choose an option', 'quillforms')
    })
  }];
  // add each section with related options.
  for (const section of sections) {
    SelectOptions.push({
      key: section.key,
      name: createElement("div", {
        onClick: ev => ev.stopPropagation()
      }, section.label),
      className: 'mapping-key-control-select-section'
    });
    options.forEach((option, index) => {
      if (option.section === section.key) {
        SelectOptions.push({
          key: index,
          name: createElement(Option, {
            label: option.label,
            isStarred: option.isStarred,
            hasSection: true
          })
        });
      }
    });
  }
  // add options of undefined section.
  options.forEach((option, index) => {
    if (option.section === undefined) {
      SelectOptions.push({
        key: index,
        name: createElement(Option, {
          label: option.label,
          isStarred: option.isStarred
        })
      });
    }
  });
  const component = createElement("div", {
    className: "mapping-key-control-select"
  }, createElement(SelectControl, {
    label: "",
    value: (_SelectOptions$find = SelectOptions.find(option => Number.isInteger(option.key) && options[option.key].value === value)) !== null && _SelectOptions$find !== void 0 ? _SelectOptions$find : SelectOptions[0],
    onChange: ({
      selectedItem
    }) => {
      if (selectedItem) {
        if (selectedItem.key === 'select') {
          // clear
          onChange('');
        } else if (Number.isInteger(selectedItem.key)) {
          // update selected value
          const option = options[selectedItem.key];
          onChange(option.value);
        }
      }
    },
    options: SelectOptions
  }));
  return disabled ? createElement(Disabled, null, component) : component;
};
export default Select;
//# sourceMappingURL=index.js.map