import { createElement } from "react";
/**
 * WordPress Dependencies
 */
import { useState, useRef, useEffect } from 'react';
import { search, chevronDown } from '@wordpress/icons';
import { Icon } from '@wordpress/components';
/**
 * External Dependencies
 */
import { FixedSizeList as List } from 'react-window';
import { pick } from 'lodash';
import classNames from 'classnames';

/**
 * Internal Dependencies
 */
import FontItem from './font-item';
const FontPicker = ({
  fonts,
  selectedFont,
  setFont
}) => {
  const [showList, setShowList] = useState(false);
  const [searchKeyword, setSearchKeyword] = useState('');
  const filteredFonts = pick(fonts, Object.keys(fonts).filter(key => key.toLowerCase().includes(searchKeyword.toLowerCase())));
  const selectedFontIndex = Object.keys(fonts).findIndex(fontKey => fontKey === selectedFont);
  const filteredFontsKeys = Object.keys(filteredFonts);
  const wrapperRef = useRef(null);
  const searchRef = useRef(null);
  const listRef = useRef(null);
  const handleClickOutside = e => {
    if (e.target && wrapperRef.current && !wrapperRef.current.contains(e.target)) {
      setShowList(false);
    }
  };

  // Attaching the previous event with UseEffect hook
  useEffect(() => {
    // Bind the event listener
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      // Unbind the event listener on clean up
      document.removeEventListener('mousedown', handleClickOutside);
    };
  });
  useEffect(() => {
    if (showList) {
      searchRef?.current?.focus();
      setSearchKeyword('');
      if (selectedFontIndex > -1) listRef?.current?.scrollToItem(selectedFontIndex, 'center');
    } else {
      setSearchKeyword('');
    }
  }, [showList]);
  return createElement("div", {
    className: "admin-components-font-picker"
  }, createElement("div", {
    role: "presentation",
    className: classNames('admin-components-font-picker__select', {
      hidden: showList
    }),
    onClick: () => setShowList(true)
  }, createElement("div", {
    className: "admin-components-font-picker__selected-font"
  }, selectedFont), createElement(Icon, {
    icon: chevronDown
  })), showList && createElement("div", {
    className: "admin-components-font-picker__fonts-search-wrapper",
    ref: wrapperRef
  }, createElement("div", {
    className: "admin-components-font-picker__search"
  }, createElement(Icon, {
    icon: search
  }), createElement("input", {
    ref: searchRef,
    className: "admin-components-font-picker__input",
    type: "text",
    value: searchKeyword,
    onChange: e => setSearchKeyword(e.target.value)
  })), createElement(List, {
    width: '100%',
    ref: listRef,
    overscanCount: 12,
    className: "admin-components-font-picker__fonts-list",
    height: filteredFontsKeys.length > 0 ? 250 : 20,
    itemCount: filteredFontsKeys.length,
    itemSize: 35
  }, ({
    index,
    style
  }) => {
    return createElement("div", {
      role: "presentation",
      className: 'admin-components-font-picker__fonts-list-item' + (filteredFontsKeys[index] === selectedFont ? ' selected' : ''),
      style: style,
      onClick: () => {
        setFont(filteredFontsKeys[index]);
        setTimeout(() => {
          setShowList(false);
        }, 100);
      }
    }, createElement(FontItem, {
      font: filteredFontsKeys[index],
      fontType: filteredFonts[filteredFontsKeys[index]]
    }));
  })));
};
export default FontPicker;
//# sourceMappingURL=index.js.map