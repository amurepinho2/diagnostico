"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _hooks = require("@wordpress/hooks");
var _context = require("./context");
var _richText = _interopRequireDefault(require("./rich-text"));
var _select = _interopRequireDefault(require("./select"));
var _useFields = _interopRequireDefault(require("./use-fields"));
var _useHiddenFields = _interopRequireDefault(require("./use-hidden-fields"));
var _useVariables = _interopRequireDefault(require("./use-variables"));
/**
 * QuillForms Dependencies
 */

/**
 * WordPress Dependencies
 */

/**
 * Internal Dependencies
 */

const ComboboxControl = ({
  id,
  value,
  onChange,
  isToggleEnabled = true,
  customize,
  placeholder,
  hideChooseOption,
  selectFirstOption,
  excerptLength = 30,
  allowedFormats
}) => {
  const fields = (0, _useFields.default)({
    section: 'fields'
  });
  const variables = (0, _useVariables.default)({
    section: 'variables'
  });
  const hidden_fields = (0, _useHiddenFields.default)({
    section: 'hidden_fields'
  });
  let sections = [];
  let options = [];

  // fields
  if (fields.length) {
    sections.push({
      key: 'fields',
      label: 'Fields'
    });
    options = options.concat(fields);
  }
  // variables
  if (variables.length) {
    sections.push({
      key: 'variables',
      label: 'Variables'
    });
    options = options.concat(variables);
  }
  // hidden_fields
  if (hidden_fields.length) {
    sections.push({
      key: 'hidden_fields',
      label: 'Hidden Fields'
    });
    options = options.concat(hidden_fields);
  }
  // entry properties
  const EntryProperties = [{
    value: 'id',
    label: 'Entry ID'
  }, {
    value: 'form_id',
    label: 'Form ID'
  }, {
    value: 'date_created',
    label: 'Entry Date (YYYY-MM-DD)'
  }, {
    value: 'user_id',
    label: 'User ID'
  }, {
    value: 'user_ip',
    label: 'User IP Address'
  }, {
    value: 'user_agent',
    label: 'HTTP User Agent'
  }];
  sections.push({
    key: 'entry_properties',
    label: 'Entry Properties'
  });
  options = options.concat(EntryProperties.map(property => {
    return {
      type: 'property',
      value: property.value,
      label: property.label,
      section: 'entry_properties',
      isMergeTag: true
    };
  }));

  // apply global customize filter to sections and options.
  const filtered = (0, _hooks.applyFilters)('QuillForms.AdminComponents.ComboboxControl.Customize', {
    sections,
    options
  });
  sections = filtered.sections;
  options = filtered.options;

  // apply local customize filter to sections and options.
  if (customize) {
    const customized = customize({
      sections,
      options
    });
    sections = customized.sections;
    options = customized.options;
  }

  // select first option.
  (0, _react.useEffect)(() => {
    if (selectFirstOption && !value.type && !value.value && options[0]) {
      onChange({
        type: options[0].type,
        value: options[0].value
      });
    }
  }, []);
  return (0, _react.createElement)("div", {
    className: "combobox-control"
  }, (0, _react.createElement)(_context.ComboboxControlContextProvider, {
    value: {
      id,
      sections,
      options,
      value,
      onChange,
      isToggleEnabled,
      placeholder,
      excerptLength
    }
  }, value.type === 'text' ? (0, _react.createElement)(_richText.default, {
    allowedFormats: allowedFormats
  }) : (0, _react.createElement)(_select.default, {
    hideChooseOption: hideChooseOption
  })));
};
var _default = exports.default = ComboboxControl;
//# sourceMappingURL=index.js.map