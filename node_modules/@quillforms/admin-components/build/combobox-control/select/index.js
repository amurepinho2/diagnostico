"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _selectControl = _interopRequireDefault(require("../../select-control"));
var _i18n = require("@wordpress/i18n");
var _context = require("../context");
var _option = _interopRequireDefault(require("./option"));
var _richText = require("../../rich-text");
/**
 * QuillForms Dependencies
 */

/**
 * External Dependencies
 */

/**
 * Internal Dependencies
 */

const Select = ({
  hideChooseOption
}) => {
  var _SelectOptions$find;
  const {
    sections,
    options,
    value,
    onChange,
    isToggleEnabled,
    placeholder,
    excerptLength
  } = (0, _context.useComboboxControlContext)();

  // @ts-expect-error
  const SelectOptions = [{
    key: 'select',
    name: (0, _react.createElement)(_option.default, {
      label: placeholder !== null && placeholder !== void 0 ? placeholder : (0, _i18n.__)('Choose an option', 'quillforms')
    }),
    style: hideChooseOption ? {
      display: 'none'
    } : {}
  }];
  // add each section with related options.
  for (const section of sections) {
    SelectOptions.push({
      key: section.key,
      name: (0, _react.createElement)("div", {
        onClick: ev => ev.stopPropagation()
      }, section.label),
      className: 'combobox-control-select-section'
    });
    options.forEach((option, index) => {
      if (option.section === section.key) {
        SelectOptions.push({
          key: index,
          name: (0, _react.createElement)(_option.default, {
            label: (0, _richText.getPlainExcerpt)(option.label, excerptLength)
            // @ts-ignore
            ,
            order: option?.order,
            iconBox: option.iconBox,
            hasSection: true
          })
        });
      }
    });
  }
  // add options of undefined section.
  options.forEach((option, index) => {
    if (option.section === undefined) {
      SelectOptions.push({
        key: index,
        name: (0, _react.createElement)(_option.default, {
          label: option.label,
          iconBox: option.iconBox
        })
      });
    }
  });
  // add custom value option.
  if (isToggleEnabled) {
    SelectOptions.push({
      key: 'toggle',
      name: (0, _react.createElement)(_option.default, {
        label: (0, _i18n.__)('Custom Value', 'quillforms')
      })
    });
  }
  return (0, _react.createElement)("div", {
    className: "combobox-control-select"
  }, (0, _react.createElement)(_selectControl.default, {
    label: "",
    value: (_SelectOptions$find = SelectOptions.find(option => Number.isInteger(option.key) && options[option.key].type === value.type && options[option.key].value === value.value)) !== null && _SelectOptions$find !== void 0 ? _SelectOptions$find : SelectOptions[0],
    onChange: ({
      selectedItem
    }) => {
      if (selectedItem) {
        if (selectedItem.key === 'select') {
          // clear selection
          onChange({});
        } else if (selectedItem.key === 'toggle') {
          // toggle to rich text editor
          onChange({
            type: 'text'
          });
        } else if (Number.isInteger(selectedItem.key)) {
          // update selected value
          const option = options[selectedItem.key];
          onChange({
            type: option.type,
            value: option.value
          });
        }
      }
    },
    options: SelectOptions
  }));
};
var _default = exports.default = Select;
//# sourceMappingURL=index.js.map