"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _richText = require("../../rich-text");
var _button = _interopRequireDefault(require("../../button"));
var _components = require("@wordpress/components");
var _icons = require("@wordpress/icons");
var _context = require("../context");
/**
 * QuillForms Dependencies
 */

/**
 * WordPress Dependencies
 */

/**
 * External Dependencies
 */

/**
 * Internal Dependencies
 */

const RichText = ({
  allowedFormats
}) => {
  var _value$value;
  const {
    id,
    options,
    value,
    onChange,
    isToggleEnabled,
    placeholder
  } = (0, _context.useComboboxControlContext)();
  const tags = [];
  for (const option of options) {
    if (option.isMergeTag) {
      tags.push({
        type: option.type,
        modifier: option.value,
        label: option.label,
        icon: option.iconBox?.icon,
        color: option.iconBox?.color
      });
    }
  }
  return (0, _react.createElement)("div", {
    className: "combobox-control-rich-text"
  }, isToggleEnabled && (0, _react.createElement)(_button.default, {
    className: "combobox-control-rich-text-back",
    onClick: () => onChange({})
  }, (0, _react.createElement)(_components.Icon, {
    icon: _icons.closeSmall
  })), (0, _react.createElement)(_richText.RichTextControl, {
    id: id,
    value: (_value$value = value.value) !== null && _value$value !== void 0 ? _value$value : '',
    setValue: $value => onChange({
      type: 'text',
      value: $value
    }),
    mergeTags: tags,
    allowedFormats: allowedFormats,
    placeholder: placeholder
  }));
};
var _default = exports.default = RichText;
//# sourceMappingURL=index.js.map