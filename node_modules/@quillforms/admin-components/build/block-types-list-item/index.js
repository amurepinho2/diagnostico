"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _blocks = require("@quillforms/blocks");
var _components = require("@wordpress/components");
var _icons = require("@wordpress/icons");
var _data = require("@wordpress/data");
var _classnames = _interopRequireDefault(require("classnames"));
var _emotion = require("emotion");
var _tinycolor = _interopRequireDefault(require("tinycolor2"));
/* eslint-disable jsx-a11y/no-static-element-interactions */
/* eslint-disable jsx-a11y/click-events-have-key-events */
/**
 * QuillForms Dependencies
 */

/**
 * WordPress Dependencies
 */

// @ts-expect-error

/**
 * External Dependencies
 */

const areEqual = (prevProps, nextProps) => {
  if (prevProps.disabled === nextProps.disabled) return true;
  return false;
};
const BlockTypesListItem = (0, _react.memo)(({
  disabled,
  blockName,
  index,
  disableAnimation,
  destinationIndex,
  parent
}) => {
  const [isMounted, setIsMounted] = (0, _react.useState)(false);
  (0, _react.useEffect)(() => {
    setTimeout(() => {
      setIsMounted(true);
    }, 50);
  }, []);
  const {
    blockType
  } = (0, _data.useSelect)(select => {
    return {
      blockType: select('quillForms/blocks').getBlockType(blockName)
    };
  });
  if (!blockType) return null;
  let {
    icon
  } = blockType;
  if (icon?.src === 'block-default') {
    icon = {
      src: _icons.blockDefault
    };
  }
  if (!icon) icon = _icons.plus;
  const renderedIcon = (0, _react.createElement)(_components.Icon, {
    icon: icon.src ? icon.src
    // @ts-expect-error
    : icon
  });
  const {
    insertEmptyFieldAnswer
  } = (0, _data.useDispatch)('quillForms/renderer-core');
  const {
    __experimentalInsertBlock,
    setCurrentBlock
  } = (0, _data.useDispatch)('quillForms/block-editor');
  const generateBlockId = () => {
    return Math.random().toString(36).substr(2, 9);
  };

  /**
   * Returns a block object given its type and attributes.
   *
   * @param {string} name       Block name.
   * @param {Object} attributes Block attributes.
   *
   * @throws {Error} If the block type isn't registered.
   * @return {Object?} Block object.
   */
  const createBlock = (name, attributes = {}) => {
    // Blocks are stored with a unique ID, the assigned type name, the block
    // attributes.
    return {
      id: generateBlockId(),
      name,
      attributes: (0, _blocks.sanitizeBlockAttributes)(name, attributes)
    };
  };
  return (0, _react.createElement)("div", {
    onClick: e => {
      if (disabled) return;
      e.stopPropagation();
      const blockToInsert = createBlock(blockName);
      if (blockToInsert) {
        // blockToInsert.id = generateBlockId();
        if (blockType.supports.editable) insertEmptyFieldAnswer(blockToInsert.id, blockName);
        __experimentalInsertBlock(blockToInsert, destinationIndex, parent);
        setTimeout(() => {
          if (!document.querySelector(`#block-editor-box-wrapper-${blockToInsert.id} .block-editor-block-edit`)) {
            setCurrentBlock(blockToInsert.id);
            document?.getElementById(`block-editor-box-wrapper-${blockToInsert.id}`)?.scrollIntoView({
              behavior: 'smooth'
            });
          }
        }, 80);
      }
    },
    className: (0, _classnames.default)('admin-components-blocks-list-item', (0, _emotion.css)`
						&:not( .animation-disabled ) {
							opacity: 0;
							transform: translateX( -15px );
							transition: transform 0.3s ease ${index * 0.1}s,
								opacity 0.3s ease ${index * 0.1}s;

							&.mounted {
								opacity: 1;
								transform: scale( 1 );
							}
						}
						&:hover {
							background: ${(0, _tinycolor.default)(blockType?.color).setAlpha(0.1).toString()};
							cursor: pointer;
						}
					`, {
      disabled: disabled ? true : false,
      mounted: isMounted,
      'animation-disabled': disableAnimation
    })
  }, (0, _react.createElement)("span", {
    className: "admin-components-blocks-list-item__icon-wrapper",
    style: {
      backgroundColor: blockType?.color ? blockType.color : '#bb426f'
    }
  }, (0, _react.createElement)("span", {
    className: "admin-components-blocks-list-item__icon"
  }, renderedIcon)), (0, _react.createElement)("span", {
    className: "admin-components-blocks-list-item__block-name"
  }, blockType?.title), (blockType?.name === 'group' || blockType?.name === 'slider') && (0, _react.createElement)("div", {
    className: "admin-components-control-label__new-feature"
  }, "NEW"));
}, areEqual);
var _default = exports.default = BlockTypesListItem;
//# sourceMappingURL=index.js.map