"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _icons = require("@wordpress/icons");
var _components = require("@wordpress/components");
var _reactWindow = require("react-window");
var _lodash = require("lodash");
var _classnames = _interopRequireDefault(require("classnames"));
var _fontItem = _interopRequireDefault(require("./font-item"));
/**
 * WordPress Dependencies
 */

/**
 * External Dependencies
 */

/**
 * Internal Dependencies
 */

const FontPicker = ({
  fonts,
  selectedFont,
  setFont
}) => {
  const [showList, setShowList] = (0, _react.useState)(false);
  const [searchKeyword, setSearchKeyword] = (0, _react.useState)('');
  const filteredFonts = (0, _lodash.pick)(fonts, Object.keys(fonts).filter(key => key.toLowerCase().includes(searchKeyword.toLowerCase())));
  const selectedFontIndex = Object.keys(fonts).findIndex(fontKey => fontKey === selectedFont);
  const filteredFontsKeys = Object.keys(filteredFonts);
  const wrapperRef = (0, _react.useRef)(null);
  const searchRef = (0, _react.useRef)(null);
  const listRef = (0, _react.useRef)(null);
  const handleClickOutside = e => {
    if (e.target && wrapperRef.current && !wrapperRef.current.contains(e.target)) {
      setShowList(false);
    }
  };

  // Attaching the previous event with UseEffect hook
  (0, _react.useEffect)(() => {
    // Bind the event listener
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      // Unbind the event listener on clean up
      document.removeEventListener('mousedown', handleClickOutside);
    };
  });
  (0, _react.useEffect)(() => {
    if (showList) {
      searchRef?.current?.focus();
      setSearchKeyword('');
      if (selectedFontIndex > -1) listRef?.current?.scrollToItem(selectedFontIndex, 'center');
    } else {
      setSearchKeyword('');
    }
  }, [showList]);
  return (0, _react.createElement)("div", {
    className: "admin-components-font-picker"
  }, (0, _react.createElement)("div", {
    role: "presentation",
    className: (0, _classnames.default)('admin-components-font-picker__select', {
      hidden: showList
    }),
    onClick: () => setShowList(true)
  }, (0, _react.createElement)("div", {
    className: "admin-components-font-picker__selected-font"
  }, selectedFont), (0, _react.createElement)(_components.Icon, {
    icon: _icons.chevronDown
  })), showList && (0, _react.createElement)("div", {
    className: "admin-components-font-picker__fonts-search-wrapper",
    ref: wrapperRef
  }, (0, _react.createElement)("div", {
    className: "admin-components-font-picker__search"
  }, (0, _react.createElement)(_components.Icon, {
    icon: _icons.search
  }), (0, _react.createElement)("input", {
    ref: searchRef,
    className: "admin-components-font-picker__input",
    type: "text",
    value: searchKeyword,
    onChange: e => setSearchKeyword(e.target.value)
  })), (0, _react.createElement)(_reactWindow.FixedSizeList, {
    width: '100%',
    ref: listRef,
    overscanCount: 12,
    className: "admin-components-font-picker__fonts-list",
    height: filteredFontsKeys.length > 0 ? 250 : 20,
    itemCount: filteredFontsKeys.length,
    itemSize: 35
  }, ({
    index,
    style
  }) => {
    return (0, _react.createElement)("div", {
      role: "presentation",
      className: 'admin-components-font-picker__fonts-list-item' + (filteredFontsKeys[index] === selectedFont ? ' selected' : ''),
      style: style,
      onClick: () => {
        setFont(filteredFontsKeys[index]);
        setTimeout(() => {
          setShowList(false);
        }, 100);
      }
    }, (0, _react.createElement)(_fontItem.default, {
      font: filteredFontsKeys[index],
      fontType: filteredFonts[filteredFontsKeys[index]]
    }));
  })));
};
var _default = exports.default = FontPicker;
//# sourceMappingURL=index.js.map