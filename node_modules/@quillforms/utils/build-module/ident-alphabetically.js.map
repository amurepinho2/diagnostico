{"version":3,"names":["identAlphabetically","index","charCode","charCodeAt","identName","a","b","sp","out","i","div","length","Math","floor","String","fromCharCode","toUpperCase"],"sources":["@quillforms/utils/src/ident-alphabetically.ts"],"sourcesContent":["// Simple algorithm to generate alphabatical idented order\r\nconst identAlphabetically = ( index: number ) => {\r\n\tconst charCode = 'a'.charCodeAt( 0 );\r\n\r\n\tconst identName = ( a: number ): string => {\r\n\t\tconst b = [ a ];\r\n\t\tlet sp, out, i, div;\r\n\r\n\t\tsp = 0;\r\n\t\twhile ( sp < b.length ) {\r\n\t\t\tif ( b[ sp ] > 25 ) {\r\n\t\t\t\tdiv = Math.floor( b[ sp ] / 26 );\r\n\t\t\t\tb[ sp + 1 ] = div - 1;\r\n\t\t\t\tb[ sp ] %= 26;\r\n\t\t\t}\r\n\t\t\tsp += 1;\r\n\t\t}\r\n\r\n\t\tout = '';\r\n\t\tfor ( i = 0; i < b.length; i += 1 ) {\r\n\t\t\tout = String.fromCharCode( charCode + b[ i ] ) + out;\r\n\t\t}\r\n\r\n\t\treturn out.toUpperCase();\r\n\t};\r\n\treturn identName( index );\r\n};\r\n\r\nexport default identAlphabetically;\r\n"],"mappings":"AAAA;AACA,MAAMA,mBAAmB,GAAKC,KAAa,IAAM;EAChD,MAAMC,QAAQ,GAAG,GAAG,CAACC,UAAU,CAAE,CAAE,CAAC;EAEpC,MAAMC,SAAS,GAAKC,CAAS,IAAc;IAC1C,MAAMC,CAAC,GAAG,CAAED,CAAC,CAAE;IACf,IAAIE,EAAE,EAAEC,GAAG,EAAEC,CAAC,EAAEC,GAAG;IAEnBH,EAAE,GAAG,CAAC;IACN,OAAQA,EAAE,GAAGD,CAAC,CAACK,MAAM,EAAG;MACvB,IAAKL,CAAC,CAAEC,EAAE,CAAE,GAAG,EAAE,EAAG;QACnBG,GAAG,GAAGE,IAAI,CAACC,KAAK,CAAEP,CAAC,CAAEC,EAAE,CAAE,GAAG,EAAG,CAAC;QAChCD,CAAC,CAAEC,EAAE,GAAG,CAAC,CAAE,GAAGG,GAAG,GAAG,CAAC;QACrBJ,CAAC,CAAEC,EAAE,CAAE,IAAI,EAAE;MACd;MACAA,EAAE,IAAI,CAAC;IACR;IAEAC,GAAG,GAAG,EAAE;IACR,KAAMC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,CAAC,CAACK,MAAM,EAAEF,CAAC,IAAI,CAAC,EAAG;MACnCD,GAAG,GAAGM,MAAM,CAACC,YAAY,CAAEb,QAAQ,GAAGI,CAAC,CAAEG,CAAC,CAAG,CAAC,GAAGD,GAAG;IACrD;IAEA,OAAOA,GAAG,CAACQ,WAAW,CAAC,CAAC;EACzB,CAAC;EACD,OAAOZ,SAAS,CAAEH,KAAM,CAAC;AAC1B,CAAC;AAED,eAAeD,mBAAmB","ignoreList":[]}