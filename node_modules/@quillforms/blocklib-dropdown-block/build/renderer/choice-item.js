"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _rendererCore = require("@quillforms/renderer-core");
var _utils = require("@quillforms/utils");
var _classnames = _interopRequireDefault(require("classnames"));
var _tinycolor = _interopRequireDefault(require("tinycolor2"));
var styles = _interopRequireWildcard(require("./styles"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * QuillForms Dependencies
 */

/**
 * WordPress Dependencies
 */

/**
 * External Dependencies
 */

let selectionTimer;
const ChoiceItem = ({
  choice,
  blockId,
  choiceIndex,
  val,
  clickHandler,
  showDropdown,
  clicked,
  hovered
}) => {
  const [isBeingSelected, setIsBeingSelected] = (0, _react.useState)(false);
  const item = (0, _react.useRef)();
  const cx = (0, _utils.useCx)();
  (0, _react.useEffect)(() => {
    if (!showDropdown) setIsBeingSelected(false);
  }, [showDropdown]);
  const theme = (0, _rendererCore.useTheme)();
  const answersColor = (0, _tinycolor.default)(theme.answersColor);
  const isSelected = val && val === choice.value;
  (0, _react.useEffect)(() => {
    if (clicked) item.current.click();
    return () => {
      clicked = false;
    };
  }, [clicked]);
  return (0, _react.createElement)("div", {
    ref: item,
    id: `block-${blockId}-option-${choiceIndex}`,
    className: cx('dropdown__choiceWrapper', {
      selected: isSelected,
      isBeingSelected
    }, (0, _utils.css)`
						background: ${hovered ? answersColor.setAlpha(0.2).toString() : answersColor.setAlpha(0.1).toString()};

						border-color: ${theme.answersColor};
						color: ${theme.answersColor};

						&:hover {
							background: ${answersColor.setAlpha(0.2).toString()};
						}

						&.selected {
							background: ${(0, _tinycolor.default)(theme.answersColor).setAlpha(0.75).toString()};
							color: ${(0, _tinycolor.default)(theme.answersColor).isDark() ? '#fff' : '#333'}
					`, styles.DropdownChoiceWrapper),
    role: "presentation",
    onClick: () => {
      if (isSelected) {
        clearTimeout(selectionTimer);
      }
      if (!isSelected) setIsBeingSelected(true);
      clickHandler();
      selectionTimer = setTimeout(() => {
        if (isBeingSelected) setIsBeingSelected(false);
      }, 400);
    }
  }, choice.label);
};
var _default = exports.default = ChoiceItem;
//# sourceMappingURL=choice-item.js.map