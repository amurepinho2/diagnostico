import { createElement, Fragment } from "react";
/**
 * WordPress Dependencies
 */
import { useSelect } from '@wordpress/data';

/**
 * Internal Dependencies
 */
import EditableBlockFooter from './editable';
import NonEditableBlockFooter from './non-editable';
import { __experimentalUseFieldRenderContext } from '../field-render';

/**
 * External Dependencies
 */
import { TailSpin as Loader } from 'react-loader-spinner';
import { useBlockTheme } from '../../hooks';
import { css } from 'emotion';
import ParentBlockFooter from './parent';
const BlockFooter = ({
  shakingErr,
  isPending
}) => {
  const {
    id,
    blockName,
    attributes
  } = __experimentalUseFieldRenderContext();
  const blockTheme = useBlockTheme(attributes?.themeId);
  if (!blockName) return null;
  const {
    isEditable,
    isParent
  } = useSelect(select => {
    return {
      isEditable: select('quillForms/blocks').hasBlockSupport(blockName, 'editable'),
      isParent: select('quillForms/blocks').hasBlockSupport(blockName, 'innerBlocks')
    };
  });
  return createElement("div", {
    className: "renderer-core-field-footer"
  }, isPending ? createElement("div", {
    className: css`
						margin: 10px;
					`
  }, createElement(Loader, {
    color: blockTheme.answersColor,
    height: 30,
    width: 30
  })) : createElement(Fragment, null, isParent ? createElement(ParentBlockFooter, null) : createElement(Fragment, null, !isEditable ? createElement(NonEditableBlockFooter, null) : createElement(EditableBlockFooter, {
    id: id,
    shakingErr: shakingErr
  }))));
};
export default BlockFooter;
//# sourceMappingURL=index.js.map