import { createElement, Fragment } from "react";
/**
 * WordPress Dependencies
 */
import { useSelect } from '@wordpress/data';

/**
 * Internal Dependencies
 */
import FieldAction from '../field-action';
import ErrMsg from '../error-message';
import { __experimentalUseFieldRenderContext } from '../field-render';
import SubmitBtn from '../submit-btn';
const EditableBlockFooter = ({
  id,
  shakingErr
}) => {
  if (!id) return null;
  const {
    isValid,
    validationErr
  } = useSelect(select => {
    return {
      isValid: select('quillForms/renderer-core').isValidField(id),
      validationErr: select('quillForms/renderer-core').getFieldValidationErr(id)
    };
  });
  const {
    next,
    isErrMsgVisible,
    showErrMsg,
    isLastField
  } = __experimentalUseFieldRenderContext();
  return createElement(Fragment, null, shakingErr || !isValid && validationErr?.length > 0 && isErrMsgVisible ?
  // @ts-expect-error
  createElement(ErrMsg, {
    message: shakingErr ? shakingErr : validationErr
  }) : isLastField ? createElement(SubmitBtn, null) :
  // @ts-expect-error
  createElement(FieldAction, {
    clickHandler: () => {
      if (validationErr && !isValid) {
        showErrMsg(true);
      } else {
        next();
      }
    }
  }));
};
export default EditableBlockFooter;
//# sourceMappingURL=editable.js.map