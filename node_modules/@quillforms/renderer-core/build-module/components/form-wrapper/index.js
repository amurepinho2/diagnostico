import { createElement } from "react";
/**
 * WordPress Dependencies
 */
import { useEffect, useState } from '@wordpress/element';
import { useSelect, useDispatch } from '@wordpress/data';
import { doAction } from '@wordpress/hooks';
import { removep } from "@wordpress/autop";

/** 
 * External Dependencies
 */
import { cloneDeep, map, omit, size } from 'lodash';

/**
 * Internal Dependencies
 */
import useEditableFields from '../../hooks/use-editable-fields';
import FormFlow from '../form-flow';
import useBlocks from '../../hooks/use-blocks';
import useFormContext from '../../hooks/use-form-context';
import { useFormSettings } from '../../hooks';
const FormWrapper = ({
  applyLogic
}) => {
  const [isMounted, setIsMounted] = useState(false);
  const editableFields = useEditableFields(true);
  const {
    currentBlockId,
    blockTypes
  } = useSelect(select => {
    return {
      currentBlockId: select('quillForms/renderer-core').getCurrentBlockId(),
      blockTypes: select('quillForms/blocks').getBlockTypes()
    };
  });
  const blocks = useBlocks();
  const {
    isPreview,
    formObj: {
      hiddenFields
    },
    formId
  } = useFormContext();
  const {
    saveAnswersInBrowser
  } = useFormSettings();
  const {
    setSwiper,
    insertEmptyFieldAnswer,
    goToBlock,
    setPaymentData,
    setFieldAnswer
  } = useDispatch('quillForms/renderer-core');
  const replaceHiddenFields = val => {
    const newVal = val.replace(/{{hidden_field:([a-zA-Z0-9-_]+)}}/g, (_match, p1) => {
      if (size(hiddenFields) > 0 && hiddenFields?.[p1]) {
        return hiddenFields[p1];
      }
      return '';
    });
    return newVal;
  };
  useEffect(() => {
    if (!isPreview) {
      editableFields.forEach(field => {
        if (field?.attributes?.defaultValue) {
          const blockType = blockTypes[field.name];
          if (blockType?.supports?.numeric) {
            setFieldAnswer(field.id,
            // @ts-expect-error
            blockType?.getNumericVal(replaceHiddenFields(removep(field.attributes.defaultValue))));
          } else {
            setFieldAnswer(field.id, replaceHiddenFields(removep(field.attributes.defaultValue)));
          }
        } else {
          insertEmptyFieldAnswer(field.id, field.name);
        }
      });
      const welcomeScreens = map(cloneDeep(blocks).filter(block => block.name === 'welcome-screen'), block => omit(block, ['name']));
      const thankyouScreens = map(cloneDeep(blocks).filter(block => block.name === 'thankyou-screen'), block => omit(block, ['name']));
      setSwiper({
        walkPath: cloneDeep(blocks.filter(block => block.name !== 'thankyou-screen' && block.name !== 'welcome-screen')),
        welcomeScreens: size(welcomeScreens) === 0 ? [] : welcomeScreens,
        thankyouScreens: size(thankyouScreens) === 0 ? [] : thankyouScreens
      });
      if (!applyLogic && !isPreview) {
        if (currentBlockId) goToBlock(currentBlockId, true);
      }
      setIsMounted(true);
    }
  }, [JSON.stringify(blocks)]);
  useEffect(() => {
    if (isMounted) {
      const firstBlock = blocks && blocks[0] ? blocks[0] : undefined;
      const urlParams = typeof window !== 'undefined' ? new URLSearchParams(window.location.search) : undefined;
      const isPaymentStep = urlParams?.get('step') === 'payment';
      let formCompleted = false;
      if (isPaymentStep) {
        doAction('QuillForms.RendererCore.PaymentStep', urlParams, () => {
          var _ref, _window$pending_submi;
          formCompleted = true;
          goToBlock( // @ts-expect-error
          (_ref = (_window$pending_submi = window?.pending_submission?.thankyou_screen_id) !== null && _window$pending_submi !== void 0 ? _window$pending_submi : urlParams.get('thankyou_screen_id')) !== null && _ref !== void 0 ? _ref : 'default_thankyou_screen');
        }, () => {
          // @ts-expect-error.
          setPaymentData(window?.pending_submission);
        });
      }
      if (!formCompleted) {
        setTimeout(() => {
          if (firstBlock?.id) {
            goToBlock(firstBlock.id);
          }
        }, 100);
      }
    }
  }, [isMounted]);
  return createElement(FormFlow, {
    applyLogic: applyLogic
  });
};
export default FormWrapper;
//# sourceMappingURL=index.js.map