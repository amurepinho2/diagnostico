import { createElement, Fragment } from "react";
/**
 * External Dependencies
 */
import classnames from 'classnames';
import { css } from 'emotion';

/**
 * Internal Dependencies
 */
import Button from '../button';
import HTMLParser from '../html-parser';
import { __experimentalUseFieldRenderContext } from '../field-render';
import useBlockTypes from '../../hooks/use-block-types';
import useMessages from '../../hooks/use-messages';
import useBlockTheme from '../../hooks/use-block-theme';
const FieldAction = ({
  clickHandler,
  show
}) => {
  const messages = useMessages();
  const {
    blockName,
    isSubmitBtnVisible,
    attributes
  } = __experimentalUseFieldRenderContext();
  const theme = useBlockTheme(attributes?.themeId);
  if (!blockName) return null;
  const blockType = useBlockTypes()[blockName];
  const isTouchScreen = 'ontouchstart' in window || navigator.maxTouchPoints > 0 ||
  // @ts-expect-error
  navigator.msMaxTouchPoints > 0;
  return createElement("div", {
    className: classnames('renderer-core-field-action', {
      'is-visible': isSubmitBtnVisible || show
    })
  }, blockType?.nextBtn ?
  // @ts-expect-error
  createElement(blockType.nextBtn, {
    onClick: clickHandler
  }) : createElement(Fragment, null, createElement(Button, {
    theme: theme,
    onClick: clickHandler
  }, createElement(HTMLParser, {
    value: typeof attributes?.nextBtnLabel === 'string' ? attributes.nextBtnLabel : messages['label.button.ok']
  })), !isTouchScreen && createElement("div", {
    className: classnames('renderer-core-field-action__helper-text', css`
									color: ${theme.questionsColor};
									font-size: 15px;
								`)
  }, createElement(HTMLParser, {
    value: messages['label.hintText.enter']
  }))));
};
export default FieldAction;
//# sourceMappingURL=index.js.map