import { createElement, Fragment } from "react";
/**
 * QuillForms Dependencies
 */
import { getPaymentGatewayModules } from '@quillforms/payment-gateways';
import Button from '../../button';
import configApi from '@quillforms/config';

/**
 * WordPress Dependencies
 */
import RadioControl from './radio-control';
import { useState } from '@wordpress/element';
import { useDispatch } from '@wordpress/data';
import { __ } from '@wordpress/i18n';
import useGeneralTheme from '../../../hooks/use-general-theme';

/**
 * External Dependencies
 */
import { css } from 'emotion';
import { size } from 'lodash';
import classnames from 'classnames';
import { TailSpin as Loader } from 'react-loader-spinner';
const Methods = ({
  data
}) => {
  var _urlParams$get, _data$payments$labels, _data$payments$labels2;
  const {
    setPaymentData,
    completeForm
  } = useDispatch('quillForms/renderer-core');
  const generalTheme = useGeneralTheme();
  const gateways = getPaymentGatewayModules();
  const methodsKeys = Object.keys(data.payments.methods);
  const options = methodsKeys.map(key => {
    const [gateway, method] = key.split(':');
    return {
      label: gateways[gateway].methods[method].customer.label.text,
      value: key
    };
  });
  const urlParams = new URLSearchParams(window.location.search);
  let defaultMethod = methodsKeys[0];
  if (urlParams.get('step') === 'payment' && methodsKeys.includes((_urlParams$get = urlParams.get('method')) !== null && _urlParams$get !== void 0 ? _urlParams$get : '')) {
    var _urlParams$get2;
    defaultMethod = (_urlParams$get2 = urlParams.get('method')) !== null && _urlParams$get2 !== void 0 ? _urlParams$get2 : '';
  }
  const [selected, setSelected] = useState(defaultMethod);
  const [gateway, method] = selected.split(':');
  const CustomerRender = gateways[gateway].methods[method].customer.render;
  const discountDetails = data.payments?.discount_details;
  const discountAmount = discountDetails?.amount;
  const [isPaying, setIsPaying] = useState(false);
  const completeFullDiscountedOrders = async () => {
    if (isPaying) return;
    setIsPaying(true);
    try {
      const {
        submission_id,
        hashed_id
      } = data;
      let response = await fetch(configApi.getAdminUrl() + 'admin-ajax.php', {
        method: 'POST',
        body: new URLSearchParams({
          action: 'quillforms_complete_full_discounted_orders',
          submissionId: submission_id,
          hashedId: hashed_id
        })
      });
      let result = await response.json();
      if (result.success) {
        completeForm();
      } else {
        throw new Error(result.message);
      }
    } catch (e) {
      console.log('completePendingSubmission: error throwed', e);
      return {
        success: false,
        message: e instanceof Error && e.message ? e.message : 'Unexpected error'
      };
    }
    setIsPaying(false);
  };
  return createElement("div", {
    className: "renderer-core-payment-modal-methods"
  }, createElement(Fragment, null, size(methodsKeys) > 1 && createElement(Fragment, null, createElement("p", {
    className: css`
								color: ${generalTheme.questionsColor};
								font-size: 20px;
							`
  }, (_data$payments$labels = data.payments.labels?.select_payment_method) !== null && _data$payments$labels !== void 0 ? _data$payments$labels : 'Select a payment method'), createElement("div", {
    className: "renderer-components-radio-control__options-group"
  }, createElement(RadioControl, {
    id: "payment-methods",
    selected: selected,
    options: options,
    onChange: setSelected
  })))), discountAmount !== 0 && createElement(CustomerRender, {
    slug: selected,
    data: data,
    onComplete: () => {
      completeForm();
      setPaymentData(null);
    }
  }), discountAmount === 0 && createElement("div", null, createElement(Button, {
    className: classnames({
      loading: isPaying
    }, css`
								&.loading .renderer-core-arrow-icon {
									display: none;
								}
							`, 'payment-button'),
    onClick: () => {
      completeFullDiscountedOrders();
    }
  }, createElement("span", {
    id: "button-text"
  }, isPaying ? createElement(Loader, {
    color: generalTheme.buttonsFontColor,
    height: 50,
    width: 50
  }) : createElement(Fragment, null, (_data$payments$labels2 = data?.payments?.labels?.pay) !== null && _data$payments$labels2 !== void 0 ? _data$payments$labels2 : __('Pay now', 'quillforms'))))));
};
export default Methods;
//# sourceMappingURL=index.js.map