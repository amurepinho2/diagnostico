import { createElement } from "react";
/**
 * WordPresss Dependencies
 */
import { memo } from '@wordpress/element';
/**
 * Internal Dependencies
 */
import BlockCounter from '../field-counter';
import BlockTitle from '../field-label';
import BlockDescription from '../field-description';
import BlockAttachment from '../field-attachment';
import BlockCustomHTML from '../field-custom-html';
import { __experimentalUseFieldRenderContext } from '../field-render';
import { useBlockTypes, useFormContext, useFormSettings } from '../../hooks';
const QuestionHeader = memo(() => {
  var _useFormSettings$show, _attributes$layout;
  const {
    blockName,
    id,
    attributes
  } = __experimentalUseFieldRenderContext();
  const {
    deviceWidth
  } = useFormContext();
  const blockTypes = useBlockTypes();
  const showQuestionsNumbers = (_useFormSettings$show = useFormSettings()?.showQuestionsNumbers) !== null && _useFormSettings$show !== void 0 ? _useFormSettings$show : true;
  if (!blockName || !id) return null;
  const blockType = blockTypes[blockName];
  const layout = (_attributes$layout = attributes?.layout) !== null && _attributes$layout !== void 0 ? _attributes$layout : 'stack';
  return createElement("div", {
    className: "renderer-components-question-header"
  }, (showQuestionsNumbers || blockType?.counterIcon) && createElement(BlockCounter, {
    id: id,
    attributes: attributes,
    blockType: blockType
  }), createElement(BlockTitle, null), createElement(BlockDescription, null), (layout === 'stack' || deviceWidth === 'mobile' && (layout === 'float-left' || layout === 'float-right')) && createElement(BlockAttachment, null), createElement(BlockCustomHTML, null));
});
export default QuestionHeader;
//# sourceMappingURL=index.js.map