import type { SwiperState, SwiperActionTypes, RendererAnswersActionTypes, SubmitActionTypes } from './types';
/**
 
 * Returns an action object used in setting swiper state
 *
 * @param {SwiperState} swiperState New swiper state.
 *
 * @return {SwiperActionTypes} Action object.
 */
export declare const setSwiper: (swiperState: Partial<SwiperState>) => SwiperActionTypes;
/**
 * Go to next block
 *
 * @param {boolean} isSwiping Is swiping
 *
 * @return {SwiperActionTypes} Action object.
 */
export declare const goNext: (isSwiping?: boolean) => SwiperActionTypes;
/**
 * Go to previous block
 *
 * @return {SwiperActionTypes} Action object.
 */
export declare const goPrev: () => SwiperActionTypes;
/**
 * Go to a specific field
 *
 * @param {string} id               The field id.
 *
 * @param          forceUpdateState
 * @return {SwiperActionTypes} Action object.
 */
export declare const goToBlock: (id: string, forceUpdateState?: boolean) => SwiperActionTypes;
/**
 * Complete form and show thank you screen
 *
 * @return {SwiperActionTypes} Action object
 */
export declare const completeForm: () => SwiperActionTypes;
/**
 * Reset answers
 *
 * @return {RendererAnswersActionTypes} Action object.
 */
export declare const resetAnswers: () => RendererAnswersActionTypes;
/**
 * Returns an action object used in inserting empty field answer.
 *
 * @param {string} id        Field uuid.
 * @param {string} type      Field type
 *
 * @param          blockName
 * @return {RendererAnswersActionTypes} Action object.
 */
export declare const insertEmptyFieldAnswer: (id: string, blockName: string) => RendererAnswersActionTypes;
/**
 * Returns an action object used in setting field answer.
 *
 * @param {string}  id  Field uuid.
 * @param {unknown} val Field value could be string, array, number or any type.
 *
 * @return {Object} Action object.
 */
export declare const setFieldAnswer: (id: string, val: unknown) => RendererAnswersActionTypes;
/**
 * Returns an action object used in setting field valid flag.
 *
 * @param {string}  id  Field uuid.
 * @param {boolean} val Field isValid flag.
 *
 * @return {Object} Action object.
 */
export declare const setIsFieldValid: (id: string, val: boolean) => RendererAnswersActionTypes;
/**
 * Returns an action object used in setting fields answered flag.
 *
 * @param {string}  id  Field uuid.
 * @param {boolean} val Field isAnswered flag.
 *
 * @return {RendererAnswersActionTypes} Action object.
 */
export declare const setIsFieldAnswered: (id: string, val: boolean) => RendererAnswersActionTypes;
/**
 * Returns an action object used in setting fields pending flag.
 *
 * @param {string}  id  Field uuid.
 * @param {boolean} val Field isPending flag.
 *
 * @return {RendererAnswersActionTypes} Action object.
 */
export declare const setIsFieldPending: (id: string, val: boolean) => RendererAnswersActionTypes;
/**
 * Returns and object used in setting pending message key
 *
 * @param {string} id  Field uuid.
 * @param {string} val Field pendingMsg flag.
 *
 * @return {Object} Action object.
 */
export declare const setFieldPendingMsg: (id: string, val: string) => RendererAnswersActionTypes;
/**
 * Returns and object used in setting error message key
 *
 * @param {string} id  Field uuid.
 * @param {string} val Field isAnswered flag.
 *
 * @return {Object} Action object.
 */
export declare const setFieldValidationErr: (id: string, val: string) => RendererAnswersActionTypes;
/**
 * Set is reviewing flag
 *
 * @param {boolean} val The new flag value.
 *
 * @return {Object} Action object
 */
export declare const setIsReviewing: (val: boolean) => SubmitActionTypes;
/**
 * Set is submitting flag.
 *
 * @param {boolean} val The new flag value.
 *
 * @return {Object} Action object
 */
export declare const setIsSubmitting: (val: boolean) => SubmitActionTypes;
/**
 * Set submission errors.
 *
 * @param {string} val The new submission errors.
 *
 * @return {Object} Action object
 */
export declare const setSubmissionErr: (val: string) => SubmitActionTypes;
/**
 * Set payment data
 *
 * @param  data
 * @return {SwiperActionTypes} Action object
 */
export declare const setPaymentData: (data: any) => SubmitActionTypes;
/**
 * Set isFocused flag
 *
 * @param {boolean} val The new flag value.
 *
 * @return {Object} Action object
 */
export declare const setIsFocused: (val: boolean) => {
    type: string;
    val: boolean;
};
/**
 * Set footerDisplay flag
 * This flag will alomst be needed to control in touch screens.
 *
 * @param {boolean} val The new flag value.
 *
 * @return {Object} Action object
 */
export declare const setFooterDisplay: (val: boolean) => {
    type: string;
    val: boolean;
};
/**
 * Set isCurrentBlockSafeToSwipe flag
 * This flag should control going to the next block.
 *
 * @param {boolean} val The new flag value.
 *
 * @return {Object} Action object
 */
export declare const setIsCurrentBlockSafeToSwipe: (val: boolean) => {
    type: string;
    val: boolean;
};
//# sourceMappingURL=actions.d.ts.map