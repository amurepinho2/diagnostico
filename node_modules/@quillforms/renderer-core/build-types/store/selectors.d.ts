/**
 * QuillForms Dependencies
 */
import type { FormBlock, FormBlocks } from '@quillforms/types';
/**
 * Internal Dependencies
 */
import type { State } from './reducer';
import type { RendererAnswersState, Screen, SwiperState } from './types';
export declare const getBlocksRecursively: (walkPath: FormBlocks) => FormBlocks;
/**
 * Get swiper state.
 *
 * @param {State} state Global application state.
 *
 * @return {Object} The swiper state
 */
export declare function getSwiperState(state: State): SwiperState;
/**
 * Get walk path.
 *
 * @param {State} state Global application state.
 *
 * @return {Array} Walk path
 */
export declare function getWalkPath(state: State): FormBlocks;
/**
 * Is animating
 *
 * @param {State} state Global application state.
 *
 * @return {boolean} Is animating
 */
export declare function isAnimating(state: State): boolean;
/**
 * Get current block id.
 *
 * @param {State} state Global application state.
 *
 * @return {string}  Current block id
 */
export declare function getCurrentBlockId(state: State): string | undefined;
/**
 * Get welcome screens.
 *
 * @param {State} state Global application state.
 *
 * @return {Screen[]} Welcome screens
 */
export declare function getWelcomeScreens(state: State): Screen[];
/**
 * Get thank you screens.
 *
 * @param {State} state Global application state.
 *
 * @return {Screen[]} Thank you screens
 */
export declare function getThankYouScreens(state: State): Screen[];
/**
 * Get block by id
 *
 * @param {State}  state Global application state.
 * @param {string} id    The block id.
 *
 * @return {FormBlock } The block
 */
export declare function getBlockById(state: State, id: string): FormBlock | undefined;
/**
 * Is thankyou screen active.
 *
 * @param {State} state Global application state.
 *
 * @return {boolean} Is thankyou screen active
 */
export declare function isThankyouScreenActive(state: State): boolean;
/**
 * Is welcome screen active.
 *
 * @param {State} state Global application state.
 *
 * @return {boolean} Is welcome screen active
 */
export declare function isWelcomeScreenActive(state: State): boolean;
/**
 * Is Current Block Safe to Swipe
 *
 * @param {State} state Global application state.
 *
 * @return {boolean} Is submitting
 */
export declare function isCurrentBlockSafeToSwipe(state: State): boolean;
/**
 * Is reviewing
 *
 * @param {State} state Global application state.
 *
 * @return {boolean} Is reviewing
 */
export declare function isReviewing(state: State): boolean;
/**
 * Is submitting
 *
 * @param {State} state Global application state.
 *
 * @return {boolean} Is submitting
 */
export declare function isSubmitting(state: State): boolean;
/**
 * Get payment data.
 *
 * @param {State} state Global application state.
 *
 * @return {boolean} Is payment modal active
 */
export declare function getPaymentData(state: State): boolean;
/**
 * Get block counter value
 *
 * @param {State}  state Global application state.
 * @param {string} id    Block id.
 *
 * @return {?number} The block counter value.
 */
export declare function getBlockCounterValue(state: State, id: string): number | undefined;
/**
 * Get current path editable fields
 *
 * @param {State} state Global application state.
 *
 * @return {Array} The editable fields in current path
 */
export declare const getEditableFieldsInCurrentPath: (state: State) => FormBlock[];
/**
 *
 * Get Fields by support criteria
 *
 * @param {State} state           Global application state.
 * @param {Array} supportCriteria The block type support criteria.
 *
 * @return {Array} The  fields in current path with the support criteria passed.
 */
export declare const getFieldsBySupportCriteria: (state: State, supportCriteria: any) => FormBlock[];
/**
 * Get all answers.
 *
 * @param {State} state Global application state.
 *
 * @return {RendererAnswersState} Answers
 */
export declare function getAnswers(state: State): RendererAnswersState;
/**
 * Get answers values.
 *
 * @param {RendererAnswersState} state Global application state.
 *
 * @return {Object} Answers values
 *
 */
export declare function getAnswersValues(state: State): Record<string, unknown>;
/**
 * Get count of answered fields.
 *
 * @param {State} state
 *
 * @return {number} Answered fields count
 */
export declare function getAnsweredFieldsLength(state: State): number;
/**
 * Get field answer value.
 *
 * @param {State}  state Global application state.
 * @param {string} id    Field id.
 *
 * @return {unknown} Field answer value
 */
export declare function getFieldAnswerVal(state: State, id: string): unknown;
/**
 * Get invalid fields
 *
 * @param {State} state
 *
 * @return {Partial< RendererAnswersState >} Invalid fields keyed by id
 */
export declare function getInvalidAnswers(state: State): Partial<RendererAnswersState>;
/**
 * Get invalid fields length
 *
 * @param {State} state
 *
 * @return {number} Invalid fields length
 */
export declare function getInvalidFieldsLength(state: State): number;
/**
 * Get first invalid field id
 *
 * @param {State} state
 *
 * @return {?string} First invalid field id
 */
export declare const getFirstInvalidFieldId: (state: State) => string | undefined;
/**
 * Is answered field.
 *
 * @param {State}  state Global application state.
 * @param {string} id    Field id.
 *
 * @return {boolean} showErr flag
 */
export declare function isAnsweredField(state: State, id: string): boolean;
/**
 * Is valid field.
 *
 * @param {State}  state Global application state.
 * @param {string} id    Field id.
 *
 * @return {boolean} showErr flag
 */
export declare function isValidField(state: State, id: string): boolean;
/**
 * Has valid fields.
 * This for blocks that support inner blocks like group.
 *
 * @param {State}  state Global application state.
 * @param {string} id    Field id.
 *
 * @return {boolean} showErr flag
 */
export declare function hasValidFields(state: State, id: string): boolean;
/**
 * Is field pending.
 *
 * @param {State}  state Global application state.
 * @param {string} id    Field id.
 *
 * @return {boolean} isPending flag.
 */
export declare function isFieldPending(state: State, id: string): boolean;
/**
 * Get pending message if pending.
 *
 * @param {State}  state Global application state.
 * @param {string} id    Field id.
 *
 * @return {string|false} Pending message if pending, or false.
 */
export declare function getPendingMsg(state: State): string | false;
/**
 * Get field validation error message.
 *
 * @param {State}  state Global application state.
 * @param {string} id    Field id.
 *
 * @return {string} Field validation error message
 */
export declare function getFieldValidationErr(state: State, id: string): string | [];
/**
 * Get is focused flag
 *
 * @param {State} state Global application state.
 *
 * @return {boolean} isFocused flag
 */
export declare function isFocused(state: State): boolean;
/**
 * Should footer be displayed flag
 *
 * @param {State} state Global application state.
 *
 * @return {boolean} isFocused flag
 */
export declare function shouldFooterBeDisplayed(state: State): boolean;
/**
 * Get submission error message
 *
 * @param {State} state Global application state.
 *
 * @return {string} submission error message
 */
export declare function getSubmissionErr(state: State): string;
//# sourceMappingURL=selectors.d.ts.map