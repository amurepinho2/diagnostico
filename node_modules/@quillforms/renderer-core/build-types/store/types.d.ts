import { BlockAttributes, FormBlocks } from '@quillforms/types';
import { SET_SUBMISSION_ERR, SET_SWIPER_STATE, COMPLETE_FORM, GO_NEXT, GO_PREV, GO_TO_BLOCK, INSERT_EMPTY_FIELD_ANSWER, SET_FIELD_ANSWER, SET_IS_FIELD_VALID, SET_FIELD_VALIDATION_ERR, SET_IS_FIELD_ANSWERED, SET_IS_FIELD_PENDING, SET_FIELD_PENDING_MSG, RESET_ANSWERS, SET_IS_REVIEWING, SET_IS_SUBMITTING, SET_PAYMENT_DATA, SET_IS_CURRENT_BLOCK_SAFE_TO_SWIPE } from './constants';
export declare type Screen = {
    id: string;
    attributes?: BlockAttributes;
};
export declare type SwiperState = {
    walkPath: FormBlocks;
    welcomeScreens: Screen[];
    thankyouScreens: Screen[];
    currentBlockId: undefined | string;
    nextBlockId: undefined | string;
    lastActiveBlockId: undefined | string;
    prevBlockId: undefined | string;
    canSwipeNext: boolean;
    canSwipePrev: boolean;
    isAnimating: boolean;
    isReviewing: boolean;
    isCurrentBlockSafeToSwipe: boolean;
    isThankyouScreenActive: boolean;
    isWelcomeScreenActive: boolean;
};
export declare type SubmissionState = {
    isReviewing: boolean;
    isSubmitting: boolean;
    submissionErr: string;
    paymentData: any;
};
/**
 * Actions
 */
declare type setSwiperAction = {
    type: typeof SET_SWIPER_STATE;
    swiperState: Partial<SwiperState>;
};
declare type goNextAction = {
    type: typeof GO_NEXT;
    isSwiping?: boolean;
};
declare type goPrevAction = {
    type: typeof GO_PREV;
};
declare type goTonextBtn = {
    type: typeof GO_TO_BLOCK;
    id: string;
    forceUpdateState?: boolean;
};
declare type completeFormAction = {
    type: typeof COMPLETE_FORM;
};
export declare type Answer = {
    isValid: boolean;
    isAnswered: boolean;
    isPending: boolean;
    pendingMsg: string | undefined;
    blockName: string;
    value: unknown;
    validationErr: string | undefined;
};
export declare type RendererAnswersState = Record<string, Answer>;
/**
 * Actions
 */
declare type insertEmptyFieldAnswerAction = {
    type: typeof INSERT_EMPTY_FIELD_ANSWER;
    id: string;
    blockName: string;
};
declare type setFieldAnswerAction = {
    type: typeof SET_FIELD_ANSWER;
    id: string;
    val: unknown;
};
declare type setIsFieldValidAction = {
    type: typeof SET_IS_FIELD_VALID;
    id: string;
    val: boolean;
};
declare type setIsFieldAnsweredAction = {
    type: typeof SET_IS_FIELD_ANSWERED;
    id: string;
    val: boolean;
};
declare type setIsFieldPendingAction = {
    type: typeof SET_IS_FIELD_PENDING;
    id: string;
    val: boolean;
};
declare type setIsCurrentBlockSafeToSwipeAction = {
    type: typeof SET_IS_CURRENT_BLOCK_SAFE_TO_SWIPE;
    val: boolean;
};
declare type setFieldPendingMsg = {
    type: typeof SET_FIELD_PENDING_MSG;
    id: string;
    val: string;
};
declare type setFieldValidationErr = {
    type: typeof SET_FIELD_VALIDATION_ERR;
    id: string;
    val: string;
};
declare type resetAnswers = {
    type: typeof RESET_ANSWERS;
};
declare type setIsReviewing = {
    type: typeof SET_IS_REVIEWING;
    val: boolean;
};
declare type setIsSubmitting = {
    type: typeof SET_IS_SUBMITTING;
    val: boolean;
};
declare type setSumbissionErr = {
    type: typeof SET_SUBMISSION_ERR;
    val: string;
};
declare type setPaymentDataAction = {
    type: typeof SET_PAYMENT_DATA;
    data: {
        products: {
            name: string;
            value: number;
        }[];
        total: number;
        methods: {
            [key: string]: {};
        };
    };
};
export declare type RendererAnswersActionTypes = insertEmptyFieldAnswerAction | setFieldAnswerAction | setIsFieldValidAction | setFieldValidationErr | setIsFieldAnsweredAction | setIsFieldPendingAction | setFieldPendingMsg | resetAnswers | ReturnType<() => {
    type: 'NOOP';
}>;
export declare type SwiperActionTypes = setSwiperAction | goNextAction | goPrevAction | goTonextBtn | setIsCurrentBlockSafeToSwipeAction | completeFormAction | ReturnType<() => {
    type: 'NOOP';
}>;
export declare type SubmitActionTypes = setIsReviewing | setIsSubmitting | setSumbissionErr | setPaymentDataAction | completeFormAction | ReturnType<() => {
    type: 'NOOP';
}>;
export interface CustomStoreDescriptor {
    name: string;
    actions: any;
    selectors: any;
    reducer: any;
}
export {};
//# sourceMappingURL=types.d.ts.map