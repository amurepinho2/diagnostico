"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAnsweredFieldsLength = getAnsweredFieldsLength;
exports.getAnswers = getAnswers;
exports.getAnswersValues = getAnswersValues;
exports.getBlockById = getBlockById;
exports.getBlockCounterValue = getBlockCounterValue;
exports.getBlocksRecursively = void 0;
exports.getCorrectAnswersCount = getCorrectAnswersCount;
exports.getCorrectIncorrectDisplay = getCorrectIncorrectDisplay;
exports.getCurrentBlockId = getCurrentBlockId;
exports.getEditableFieldsInCurrentPath = void 0;
exports.getFieldAnswerVal = getFieldAnswerVal;
exports.getFieldValidationErr = getFieldValidationErr;
exports.getFirstInvalidFieldId = exports.getFieldsBySupportCriteria = void 0;
exports.getIncorrectAnswersCount = getIncorrectAnswersCount;
exports.getInvalidAnswers = getInvalidAnswers;
exports.getInvalidFieldsLength = getInvalidFieldsLength;
exports.getPaymentData = getPaymentData;
exports.getPendingMsg = getPendingMsg;
exports.getSubmissionErr = getSubmissionErr;
exports.getSwiperState = getSwiperState;
exports.getThankYouScreens = getThankYouScreens;
exports.getWalkPath = getWalkPath;
exports.getWelcomeScreens = getWelcomeScreens;
exports.hasValidFields = hasValidFields;
exports.isAnimating = isAnimating;
exports.isAnsweredField = isAnsweredField;
exports.isCurrentBlockSafeToSwipe = isCurrentBlockSafeToSwipe;
exports.isFieldAnswerCorrect = isFieldAnswerCorrect;
exports.isFieldAnswerLocked = isFieldAnswerLocked;
exports.isFieldCorrectIncorrectScreenDisplayed = isFieldCorrectIncorrectScreenDisplayed;
exports.isFieldPending = isFieldPending;
exports.isFocused = isFocused;
exports.isReviewing = isReviewing;
exports.isSubmitting = isSubmitting;
exports.isThankyouScreenActive = isThankyouScreenActive;
exports.isValidField = isValidField;
exports.isWelcomeScreenActive = isWelcomeScreenActive;
exports.shouldFooterBeDisplayed = shouldFooterBeDisplayed;
var _data = require("@wordpress/data");
var _lodash = require("lodash");
/**
 * QuillForms Dependencies
 */

/**
 * WordPress Dependencies
 */

/**
 * External Dependencies
 */

const getBlocksRecursively = walkPath => {
  const allBlocks = [];
  (0, _lodash.forEach)(walkPath, block => {
    allBlocks.push(block);
    if (block.name === 'group' && (0, _lodash.size)(block.innerBlocks) > 0) {
      (0, _lodash.forEach)(block.innerBlocks, childBlock => {
        allBlocks.push(childBlock);
      });
    }
  });
  return allBlocks;
};
/**
 * Get swiper state.
 *
 * @param {State} state Global application state.
 *
 * @return {Object} The swiper state
 */
exports.getBlocksRecursively = getBlocksRecursively;
function getSwiperState(state) {
  return state.swiper;
}

/**
 * Get walk path.
 *
 * @param {State} state Global application state.
 *
 * @return {Array} Walk path
 */
function getWalkPath(state) {
  return state.swiper.walkPath;
}

/**
 * Is animating
 *
 * @param {State} state Global application state.
 *
 * @return {boolean} Is animating
 */
function isAnimating(state) {
  return state.swiper.isAnimating;
}

/**
 * Get correct incorrect display state
 * 
 * @param {State} state Global application state.
 * 
 * @return {boolean} Correct incorrect display state
 */
function getCorrectIncorrectDisplay(state) {
  return state.swiper.correctIncorrectDisplay;
}

/**
 * Get current block id.
 *
 * @param {State} state Global application state.
 *
 * @return {string}  Current block id
 */
function getCurrentBlockId(state) {
  return state.swiper.currentBlockId;
}

/**
 * Get welcome screens.
 *
 * @param {State} state Global application state.
 *
 * @return {Screen[]} Welcome screens
 */
function getWelcomeScreens(state) {
  return state.swiper.welcomeScreens;
}

/**
 * Get thank you screens.
 *
 * @param {State} state Global application state.
 *
 * @return {Screen[]} Thank you screens
 */
function getThankYouScreens(state) {
  return state.swiper.thankyouScreens;
}

/**
 * Get block by id
 *
 * @param {State}  state Global application state.
 * @param {string} id    The block id.
 *
 * @return {FormBlock } The block
 */
function getBlockById(state, id) {
  return state.swiper.walkPath.find(block => block.id === id);
}

/**
 * Is thankyou screen active.
 *
 * @param {State} state Global application state.
 *
 * @return {boolean} Is thankyou screen active
 */
function isThankyouScreenActive(state) {
  return state.swiper.isThankyouScreenActive;
}

/**
 * Is welcome screen active.
 *
 * @param {State} state Global application state.
 *
 * @return {boolean} Is welcome screen active
 */
function isWelcomeScreenActive(state) {
  return state.swiper.isWelcomeScreenActive;
}

/**
 * Is Current Block Safe to Swipe
 *
 * @param {State} state Global application state.
 *
 * @return {boolean} Is submitting
 */
function isCurrentBlockSafeToSwipe(state) {
  return state.swiper.isCurrentBlockSafeToSwipe;
}

/**
 * Is reviewing
 *
 * @param {State} state Global application state.
 *
 * @return {boolean} Is reviewing
 */
function isReviewing(state) {
  return state.submit.isReviewing;
}

/**
 * Is submitting
 *
 * @param {State} state Global application state.
 *
 * @return {boolean} Is submitting
 */
function isSubmitting(state) {
  return state.submit.isSubmitting;
}

/**
 * Get payment data.
 *
 * @param {State} state Global application state.
 *
 * @return {boolean} Is payment modal active
 */
function getPaymentData(state) {
  return state.submit.paymentData;
}

/**
 * Get block counter value
 *
 * @param {State}  state Global application state.
 * @param {string} id    Block id.
 *
 * @return {?number} The block counter value.
 */
function getBlockCounterValue(state, id) {
  const blocksWithCounter = getFieldsBySupportCriteria(state, ['editable', 'innerBlocks']);
  const counterValue = blocksWithCounter.findIndex(editableField => editableField.id === id);
  if (counterValue === -1) return undefined;
  return counterValue;
}
/**
 * Get current path editable fields
 *
 * @param {State} state Global application state.
 *
 * @return {Array} The editable fields in current path
 */
const getEditableFieldsInCurrentPath = state => {
  return state.swiper.walkPath.filter(block => {
    return (0, _data.select)('quillForms/blocks').hasBlockSupport(block.name, 'editable');
  });
};

/**
 *
 * Get Fields by support criteria
 *
 * @param {State} state           Global application state.
 * @param {Array} supportCriteria The block type support criteria.
 *
 * @return {Array} The  fields in current path with the support criteria passed.
 */
exports.getEditableFieldsInCurrentPath = getEditableFieldsInCurrentPath;
const getFieldsBySupportCriteria = (state, supportCriteria) => {
  const blockTypesSelector = (0, _data.select)('quillForms/blocks');
  return state.swiper.walkPath.filter(block => {
    let matched = false;
    supportCriteria.forEach(feature => {
      if (blockTypesSelector.hasBlockSupport(block.name, feature) === true) {
        matched = true;
      }
    });
    return matched;
  });
};

/**
 * Get all answers.
 *
 * @param {State} state Global application state.
 *
 * @return {RendererAnswersState} Answers
 */
exports.getFieldsBySupportCriteria = getFieldsBySupportCriteria;
function getAnswers(state) {
  return state.answers;
}

/**
 * Get answers values.
 *
 * @param {RendererAnswersState} state Global application state.
 *
 * @return {Object} Answers values
 *
 */
function getAnswersValues(state) {
  return (0, _lodash.mapValues)(state.answers, o => {
    return o.value;
  });
}

/**
 * Get count of answered fields.
 *
 * @param {State} state
 *
 * @return {number} Answered fields count
 */
function getAnsweredFieldsLength(state) {
  const answeredFields = (0, _lodash.pickBy)(state.answers, value => value?.isAnswered === true);
  return answeredFields ? (0, _lodash.size)(answeredFields) : 0;
}

/**
 * Get field answer value.
 *
 * @param {State}  state Global application state.
 * @param {string} id    Field id.
 *
 * @return {unknown} Field answer value
 */
function getFieldAnswerVal(state, id) {
  const answer = state.answers[id]?.value;
  return answer;
}

/**
 * Get invalid fields
 *
 * @param {State} state
 *
 * @return {Partial< RendererAnswersState >} Invalid fields keyed by id
 */
function getInvalidAnswers(state) {
  const invalidFields = (0, _lodash.pickBy)(state.answers, o => o.isValid === false);
  return invalidFields;
}

/**
 * Get invalid fields length
 *
 * @param {State} state
 *
 * @return {number} Invalid fields length
 */
function getInvalidFieldsLength(state) {
  return (0, _lodash.size)(getInvalidAnswers(state));
}

/**
 * Get first invalid field id
 *
 * @param {State} state
 *
 * @return {?string} First invalid field id
 */
const getFirstInvalidFieldId = state => {
  const invalidFields = getInvalidAnswers(state);
  if ((0, _lodash.size)(invalidFields) > 0) {
    const invalidFieldsIds = Object.keys(invalidFields);
    const walkPath = getBlocksRecursively(getWalkPath(state));
    const firstField = (0, _lodash.find)(walkPath, o => invalidFieldsIds.includes(o.id));
    if (firstField) return firstField.id;
  }
  return undefined;
};

/**
 * Is answered field.
 *
 * @param {State}  state Global application state.
 * @param {string} id    Field id.
 *
 * @return {boolean} showErr flag
 */
exports.getFirstInvalidFieldId = getFirstInvalidFieldId;
function isAnsweredField(state, id) {
  return state.answers[id]?.isAnswered === true;
}

/**
 * Is valid field.
 *
 * @param {State}  state Global application state.
 * @param {string} id    Field id.
 *
 * @return {boolean} showErr flag
 */
function isValidField(state, id) {
  return state.answers[id]?.isValid;
}

/**
 * Has valid fields.
 * This for blocks that support inner blocks like group.
 *
 * @param {State}  state Global application state.
 * @param {string} id    Field id.
 *
 * @return {boolean} showErr flag
 */
function hasValidFields(state, id) {
  const block = getBlockById(state, id);
  if (!block) return false;
  let isValid = true;
  if ((0, _lodash.size)(block?.innerBlocks) > 0) {
    (0, _lodash.forEach)(block.innerBlocks, $block => {
      const $blockId = $block.id;
      if (!state.answers?.[$blockId]?.isValid) {
        isValid = false;
      }
    });
  }
  return isValid;
}

/**
 * Is field answer correct
 * @param state 
 * @param id 
 */
function isFieldAnswerCorrect(state, id) {
  return state.answers[id]?.isCorrect;
}

/**
 * Is field answer locked
 * 
 * @param state
 * @param id
 */
function isFieldAnswerLocked(state, id) {
  return state.answers[id]?.isLocked;
}

/**
 * Is field Correct Incorrect Screen Displayed
 * 
 * @param state
 * @param id
 */
function isFieldCorrectIncorrectScreenDisplayed(state, id) {
  return state.answers[id]?.isCorrectIncorrectScreenDisplayed;
}

/**
 * Is field pending.
 *
 * @param {State}  state Global application state.
 * @param {string} id    Field id.
 *
 * @return {boolean} isPending flag.
 */
function isFieldPending(state, id) {
  return state.answers[id]?.isPending;
}

/**
 * Get pending message if pending.
 *
 * @param {State}  state Global application state.
 * @param {string} id    Field id.
 *
 * @return {string|false} Pending message if pending, or false.
 */
function getPendingMsg(state) {
  for (const answer of Object.values(state.answers)) {
    var _answer$pendingMsg;
    if (answer?.isPending) return (_answer$pendingMsg = answer.pendingMsg) !== null && _answer$pendingMsg !== void 0 ? _answer$pendingMsg : '';
  }
  return false;
}

/**
 * Get field validation error message.
 *
 * @param {State}  state Global application state.
 * @param {string} id    Field id.
 *
 * @return {string} Field validation error message
 */
function getFieldValidationErr(state, id) {
  const validationErr = state.answers[id]?.validationErr;
  return validationErr ? validationErr : [];
}

/**
 * Get is focused flag
 *
 * @param {State} state Global application state.
 *
 * @return {boolean} isFocused flag
 */
function isFocused(state) {
  return state.isFocused;
}

/**
 * Should footer be displayed flag
 *
 * @param {State} state Global application state.
 *
 * @return {boolean} isFocused flag
 */
function shouldFooterBeDisplayed(state) {
  return state.footerDisplay;
}

/**
 * Get submission error message
 *
 * @param {State} state Global application state.
 *
 * @return {string} submission error message
 */
function getSubmissionErr(state) {
  return state.submit.submissionErr;
}

/**
 * Get correct answers count
 * 
 * @param {State} state Global application state.
 * 
 * @return {number} correct answers count
 */
function getCorrectAnswersCount(state) {
  // access answers object and filter correct answers
  return Object.values(state.answers).filter(answer => answer.isCorrect === true).length;
}

/**
 * Get incorrect answers count
 * 
 * @param {State} state Global application state.
 * 
 * @return {number} incorrect answers count
 */
function getIncorrectAnswersCount(state) {
  // access answers object and filter incorrect answers
  return Object.values(state.answers).filter(answer => answer.isCorrect === false).length;
}
//# sourceMappingURL=selectors.js.map