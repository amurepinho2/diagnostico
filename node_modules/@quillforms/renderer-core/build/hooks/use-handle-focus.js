"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _element = require("@wordpress/element");
var _data = require("@wordpress/data");
/**
 * WordPress Dependencies
 */

let focusTimer;
const useHandleFocus = (inputRef, isActive, isTouchScreen) => {
  const {
    isAnimating,
    currentBlockId
  } = (0, _data.useSelect)(select => {
    return {
      isAnimating: select('quillForms/renderer-core').isAnimating(),
      currentBlockId: select('quillForms/renderer-core').getCurrentBlockId()
    };
  });
  const {
    isFocused
  } = (0, _data.useSelect)(select => {
    return {
      isFocused: select('quillForms/renderer-core').isFocused()
    };
  });
  const isVisible = ref => {
    if (!ref?.current) return false;
    const current = ref?.current?.inputElement ? ref.current.inputElement : ref.current;
    const rect = (0, _element.findDOMNode)(current)?.getBoundingClientRect();
    return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) /* or $(window).height() */ && rect.right <= (window.innerWidth || document.documentElement.clientWidth) /* or $(window).width() */;
  };
  (0, _element.useEffect)(() => {
    if (!isTouchScreen && isFocused && isActive && !isAnimating) {
      if (isVisible(inputRef)) {
        focusTimer = setTimeout(() => {
          if (inputRef?.current?.focus) {
            inputRef.current.focus();
          } else if (inputRef?.current?.inputElement?.focus) {
            inputRef.current.inputElement.focus();
          }
        }, 30);
      } else if (currentBlockId) {
        const el = document?.querySelector(`#block-${currentBlockId} .renderer-components-field-wrapper__content-wrapper`);
        focusTimer = setTimeout(() => {
          if (document.activeElement !== el) el.focus();
        }, 50);
      }
    }
  }, [isFocused, isActive, isAnimating]);
  (0, _element.useEffect)(() => {
    if (!isActive) {
      clearTimeout(focusTimer);
    }
    if (inputRef?.current?.blur && !isActive && document.activeElement === inputRef.current) {
      inputRef.current.blur();
    }
  }, [inputRef, isActive]);
};
var _default = exports.default = useHandleFocus;
//# sourceMappingURL=use-handle-focus.js.map