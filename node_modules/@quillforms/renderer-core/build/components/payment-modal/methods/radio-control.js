"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _classnames = _interopRequireDefault(require("classnames"));
var _emotion = require("emotion");
var _tinycolor = _interopRequireDefault(require("tinycolor2"));
var _useGeneralTheme = _interopRequireDefault(require("../../../hooks/use-general-theme"));
/* eslint-disable jsx-a11y/click-events-have-key-events */
/* eslint-disable jsx-a11y/no-static-element-interactions */

const RadioControl = ({
  options,
  id,
  selected,
  onChange,
  ...additionalProps
}) => {
  const generalTheme = (0, _useGeneralTheme.default)();
  const onChangeValue = optionValue => onChange(optionValue);
  if (!options?.length) {
    return null;
  }
  const answersColor = (0, _tinycolor.default)(generalTheme.answersColor);
  return (0, _react.createElement)(_react.Fragment, null, options.map((option, index) => (0, _react.createElement)("div", {
    key: option.value,
    className: (0, _classnames.default)('renderer-components-radio-control__option', {
      selected: option.value === selected
    }, (0, _emotion.css)`
							border-color: ${generalTheme.answersColor};
							color: ${generalTheme.answersColor};
							.check {
								border-color: ${generalTheme.answersColor};
							}
							&:hover {
								background: ${answersColor.setAlpha(0.2).toString()};
							}

							&.selected {
								background: ${(0, _tinycolor.default)(generalTheme.answersColor).setAlpha(0.75).toString()};
								color: ${(0, _tinycolor.default)(generalTheme.answersColor).isDark() ? '#fff' : '#333'};
								input[type='radio'] ~ .check {
									border: 5px solid
										${(0, _tinycolor.default)(generalTheme.answersColor).isDark() ? '#fff' : '#333'};
								}

								input[type='radio'] ~ .check::before {
									background: ${generalTheme.answersColor};
								}
							}
						`),
    onClick: () => onChangeValue(option.value)
  }, (0, _react.createElement)("input", {
    id: `${id}-${index}`,
    className: "renderer-components-radio-control__input",
    type: "radio",
    name: id,
    value: option.value,
    checked: option.value === selected,
    ...additionalProps
  }), (0, _react.createElement)("label", {
    htmlFor: `${id}-${index}`
  }, option.label), (0, _react.createElement)("div", {
    className: "check"
  }, (0, _react.createElement)("div", {
    className: "inside"
  })))));
};
var _default = exports.default = RadioControl;
//# sourceMappingURL=radio-control.js.map