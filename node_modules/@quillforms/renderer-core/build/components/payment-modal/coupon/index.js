"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _useGeneralTheme = _interopRequireDefault(require("../../../hooks/use-general-theme"));
var _config = _interopRequireDefault(require("@quillforms/config"));
var _element = require("@wordpress/element");
var _data = require("@wordpress/data");
var _classnames = _interopRequireDefault(require("classnames"));
var _reactLoaderSpinner = require("react-loader-spinner");
var _emotion = require("emotion");
/**
 * QuillForms Dependencies
 */

/**
 * External Dependencies
 */

const Coupon = ({
  data
}) => {
  var _data$payments$labels, _data$payments$labels2, _data$payments$labels3;
  const generalTheme = (0, _useGeneralTheme.default)();
  const [isPaying, setIsPaying] = (0, _element.useState)(false);
  const [showCoupon, setShowCoupon] = (0, _element.useState)(false);
  const [coupon, setCoupon] = (0, _element.useState)('');
  const [error, setError] = (0, _element.useState)('');
  const {
    setPaymentData
  } = (0, _data.useDispatch)('quillForms/renderer-core');
  const applyCoupon = async () => {
    setError('');
    setIsPaying(true);
    try {
      const {
        submission_id,
        hashed_id
      } = data;
      let response = await fetch(_config.default.getAdminUrl() + 'admin-ajax.php', {
        method: 'POST',
        body: new URLSearchParams({
          action: 'quillforms_apply_discount',
          submissionId: submission_id,
          hashedId: hashed_id,
          coupon
        })
      });
      let result = await response.json();
      if (result.success) {
        // Update new products
        const UpdatedData = {
          ...data
        };
        UpdatedData.payments.discount_details = result.data.details;
        UpdatedData.payments.discount_details['coupon'] = coupon;
        setPaymentData(UpdatedData);
      } else {
        setError(result.data);
      }
    } catch (e) {
      console.log('applyCoupon: error throwed', e);
      return {
        success: false,
        message: e instanceof Error && e.message ? e.message : 'Unexpected error'
      };
    }
    setIsPaying(false);
    setCoupon('');
  };
  return (0, _react.createElement)("div", {
    className: "renderer-core-payment-coupon"
  }, (0, _react.createElement)("div", {
    className: (0, _classnames.default)("renderer-core-payment-coupon__label", (0, _emotion.css)`
					color: ${generalTheme.questionsColor};
				`),
    onClick: () => setShowCoupon(true)
  }, (_data$payments$labels = data.payments.labels?.discountQuestion) !== null && _data$payments$labels !== void 0 ? _data$payments$labels : 'You have a coupon?'), showCoupon && (0, _react.createElement)("div", {
    className: "render-core-payment-coupon-form"
  }, (0, _react.createElement)("div", {
    className: "renderer-core-payment-coupon__input"
  }, (0, _react.createElement)("input", {
    type: "text",
    placeholder: (_data$payments$labels2 = data.payments.labels?.discountPlaceholde) !== null && _data$payments$labels2 !== void 0 ? _data$payments$labels2 : 'Enter your discount code',
    style: {
      color: '#333',
      border: `1px solid rgba(0, 0, 0, 0.3)`,
      borderRadius: '8px',
      fontSize: '16px',
      padding: '10px 20px',
      lineHeight: '1',
      background: "#fff"
    },
    className: (0, _classnames.default)((0, _emotion.css)`
									&:focus {
										outline: none;
										border: 1px solid rgba( 0, 0, 0, 0.3 );
									}
								`),
    value: coupon,
    onChange: e => setCoupon(e.target.value)
  })), (0, _react.createElement)("div", {
    className: "renderer-core-payment-coupon__apply"
  }, (0, _react.createElement)("button", {
    className: (0, _classnames.default)({
      loading: isPaying
    }, (0, _emotion.css)`
									border-radius: 8px;
									background: ${generalTheme.buttonsBgColor};
									color: ${generalTheme.buttonsFontColor};
									border: none;
									padding: 10px 20px;
									font-size: 16px;
									cursor: pointer;
									&.loading .renderer-core-arrow-icon {
										display: none;
									}
								`, 'apply-coupon-button'),
    onClick: () => applyCoupon()
  }, (0, _react.createElement)("span", {
    id: "button-text"
  }, isPaying ? (0, _react.createElement)(_reactLoaderSpinner.TailSpin, {
    color: generalTheme.buttonsFontColor,
    height: 16,
    width: 16
  }) : (0, _react.createElement)(_react.Fragment, null, (_data$payments$labels3 = data.payments.labels?.applyDiscount) !== null && _data$payments$labels3 !== void 0 ? _data$payments$labels3 : 'apply', " "))))), error && (0, _react.createElement)("div", {
    className: (0, _classnames.default)('renderer-core-payment-coupon__error', (0, _emotion.css)`
							color: #a94442;
							font-size: 14px;
							margin-top: 10px;
						`)
  }, error));
};
var _default = exports.default = Coupon;
//# sourceMappingURL=index.js.map