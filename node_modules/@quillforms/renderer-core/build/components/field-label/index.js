"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _emotion = require("emotion");
var _classnames = _interopRequireDefault(require("classnames"));
var _htmlParser = _interopRequireDefault(require("../html-parser"));
var _context = require("../field-render/context");
var _useBlockTheme = _interopRequireDefault(require("../../hooks/use-block-theme"));
/**
 * External Dependencies
 */

/**
 * Internal Dependencies
 */

const BlockLabel = () => {
  const {
    attributes
  } = (0, _context.__experimentalUseFieldRenderContext)();
  let label = '...';
  if (attributes?.label) label = attributes.label;
  if (attributes?.required) label = label + ' *';
  label = label.replace("</p> *", " * </p>");
  const theme = (0, _useBlockTheme.default)(attributes?.themeId);
  return (0, _react.createElement)("div", {
    className: (0, _classnames.default)('renderer-components-block-label', (0, _emotion.css)`
					color: ${theme.questionsColor} !important;
					font-family: ${theme.questionsLabelFont} !important;
					@media ( min-width: 768px ) {
						font-size: ${theme.questionsLabelFontSize.lg} !important;
						line-height: ${theme.questionsLabelLineHeight.lg} !important;
					}
					@media ( max-width: 767px ) {
						font-size: ${theme.questionsLabelFontSize.sm} !important;
						line-height: ${theme.questionsLabelLineHeight.sm} !important;
					}
				`)
  }, (0, _react.createElement)(_htmlParser.default, {
    value: label
  }));
};
var _default = exports.default = BlockLabel;
//# sourceMappingURL=index.js.map