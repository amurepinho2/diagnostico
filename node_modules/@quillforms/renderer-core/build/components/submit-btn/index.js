"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _data = require("@wordpress/data");
var _element = require("@wordpress/element");
var _classnames = _interopRequireDefault(require("classnames"));
var _reactLoaderSpinner = require("react-loader-spinner");
var _emotion = require("emotion");
var _button = _interopRequireDefault(require("../button"));
var _htmlParser = _interopRequireDefault(require("../html-parser"));
var _hooks = require("../../hooks");
var _fieldRender = require("../field-render");
/* eslint-disable no-nested-ternary */
/**
 * WordPress Dependencies
 */

/**
 * External Dependencies
 */

/**
 * Internal Dependencies
 */

const SubmitBtn = () => {
  const messages = (0, _hooks.useMessages)();
  const [active, setActive] = (0, _element.useState)(false);
  (0, _element.useEffect)(() => {
    setTimeout(() => {
      setActive(true);
    }, 100);
  });
  const {
    isLastField,
    isActive,
    attributes
  } = (0, _fieldRender.__experimentalUseFieldRenderContext)();
  const theme = (0, _hooks.useBlockTheme)(attributes?.themeId);
  const isTouchScreen = typeof window !== 'undefined' && 'ontouchstart' in window || typeof navigator !== 'undefined' && navigator.maxTouchPoints > 0 ||
  // @ts-expect-error
  typeof navigator !== 'undefined' && navigator.msMaxTouchPoints > 0;
  const {
    goToBlock,
    goNext,
    setIsReviewing,
    setIsSubmitting,
    setIsFieldValid,
    setFieldValidationErr,
    setSubmissionErr,
    completeForm,
    setIsCurrentBlockSafeToSwipe,
    setIsFieldPending
  } = (0, _data.useDispatch)('quillForms/renderer-core');
  const {
    onSubmit,
    beforeGoingNext
  } = (0, _hooks.useFormContext)();
  const [isWaitingPending, setIsWaitingPending] = (0, _element.useState)(false);
  const {
    answers,
    firstInvalidFieldId,
    pendingMsg,
    isSubmitting,
    submissionErr,
    currentBlockId
  } = (0, _data.useSelect)(select => {
    return {
      currentBlockId: select('quillForms/renderer-core').getCurrentBlockId(),
      answers: select('quillForms/renderer-core').getAnswers(),
      pendingMsg: select('quillForms/renderer-core').getPendingMsg(),
      isSubmitting: select('quillForms/renderer-core').isSubmitting(),
      firstInvalidFieldId: select('quillForms/renderer-core').getFirstInvalidFieldId(),
      submissionErr: select('quillForms/renderer-core').getSubmissionErr()
    };
  });
  if (!currentBlockId) return null;
  const handleKeyDown = e => {
    if (e.key === 'Enter' && !isTouchScreen) {
      submitHandler();
    }
  };
  const goToFirstInvalidField = () => {
    if (firstInvalidFieldId) goToBlock(firstInvalidFieldId);
  };
  (0, _element.useEffect)(() => {
    if (isLastField && isActive) {
      setIsReviewing(false);
      window.addEventListener('keydown', handleKeyDown);
    } else {
      removeEventListener('keydown', handleKeyDown);
    }
    return () => removeEventListener('keydown', handleKeyDown);
  }, [isLastField, isActive]);
  const submitHandler = async () => {
    if (isSubmitting) return;
    if (beforeGoingNext && currentBlockId) {
      await beforeGoingNext({
        answers,
        setIsFieldValid,
        setFieldValidationErr,
        goToBlock,
        currentBlockId,
        goNext,
        setIsCurrentBlockSafeToSwipe,
        setIsPending: val => setIsFieldPending(currentBlockId, val)
      });
    }
    if (pendingMsg === false) {
      reviewAndSubmit();
    } else {
      setIsWaitingPending(true);
    }
  };
  const reviewAndSubmit = () => {
    setIsReviewing(false);
    if (firstInvalidFieldId) {
      setTimeout(() => {
        setIsReviewing(true);
      }, 50);
      setTimeout(() => {
        goToFirstInvalidField();
      }, 100);
    } else {
      setIsSubmitting(true);
      onSubmit({
        answers
      }, {
        setIsSubmitting,
        setIsFieldValid,
        setFieldValidationErr,
        setIsReviewing,
        goToBlock,
        completeForm,
        setSubmissionErr,
        setIsPending: val => setIsFieldPending(currentBlockId, val)
      });
    }
  };
  (0, _element.useEffect)(() => {
    if (isWaitingPending && pendingMsg === false) {
      setIsWaitingPending(false);
      reviewAndSubmit();
    }
  }, [isWaitingPending, pendingMsg]);
  return (0, _react.createElement)("div", {
    className: (0, _classnames.default)("renderer-core-submit-btn-wrapper", {
      active
    }, (0, _emotion.css)`
			opacity: 0;
			transform: translateY(20px);
			transition: all 0.4s ease;
			&.active {
				opacity: 1;
				transform: translateY(0);
			}
		`)
  }, (0, _react.createElement)(_button.default, {
    className: "renderer-core-submit-btn",
    onClick: () => {
      if (!isSubmitting) submitHandler();
    },
    onKeyDown: e => {
      if (e.key === 'Enter') {
        e.stopPropagation();
        if (!isSubmitting) submitHandler();
      }
    },
    theme: theme
  }, (0, _react.createElement)(_htmlParser.default, {
    value: isWaitingPending ? pendingMsg ? pendingMsg : '' : messages['label.submitBtn']
  }), (isWaitingPending || isSubmitting) && (0, _react.createElement)(_reactLoaderSpinner.TailSpin, {
    wrapperClass: "renderer-core-submit-btn__loader",
    color: "#fff",
    height: 20,
    width: 20
  })), submissionErr && (0, _react.createElement)("div", {
    className: (0, _classnames.default)('renderer-core-submit-error', (0, _emotion.css)`
							color: ${theme.questionsColor};
							margin-top: 15px;
						`)
  }, submissionErr));
};
var _default = exports.default = SubmitBtn;
//# sourceMappingURL=index.js.map