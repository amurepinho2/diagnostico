"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _data = require("@wordpress/data");
var _element = require("@wordpress/element");
var _hooks = require("@wordpress/hooks");
var _reactLoaderSpinner = require("react-loader-spinner");
var _button = _interopRequireDefault(require("../button"));
var _hooks2 = require("../../hooks");
/**
 * WordPress Dependencies
 */

/**
 * External Dependencies
 */

/**
 * Internal Dependencies
 */

const SaveBtn = () => {
  const [isSaving, setIsSaving] = (0, _element.useState)(false);
  const [saved, setSaved] = (0, _element.useState)(false);
  const {
    formObj,
    isPreview
  } = (0, _hooks2.useFormContext)();
  // @ts-ignore saved_data is a property of formObj.
  const {
    saved_data = {}
  } = formObj;
  const [snapshot, setSnapshot] = (0, _element.useState)(saved_data?.snapshot || '');
  const {
    answers,
    currentBlockId,
    getFieldAnswerVal
  } = (0, _data.useSelect)(select => {
    return {
      currentBlockId: select('quillForms/renderer-core').getCurrentBlockId(),
      answers: select('quillForms/renderer-core').getAnswers(),
      isReviewing: select('quillForms/renderer-core').isReviewing(),
      getFieldAnswerVal: select('quillForms/renderer-core').getFieldAnswerVal
    };
  });
  const {
    goToBlock,
    setFieldValidationErr,
    setIsFieldValid,
    setIsReviewing
  } = (0, _data.useDispatch)('quillForms/renderer-core');
  (0, _element.useEffect)(() => {
    if (saved) {
      setTimeout(() => {
        setSaved(false);
      }, 2000);
    }
  }, [saved]);
  const saveAndContinue = formObj?.saveandcontinue;
  const recipients = saveAndContinue?.recipients;
  if (!saveAndContinue?.enable || !recipients?.length) {
    return null;
  }
  const getEmailBlockId = () => {
    let emailBlockId = recipients[0];
    // Check if has text like {{field:blockId}} clear it and return blockId.
    if (!emailBlockId.includes('{{field:')) {
      return false;
    }
    emailBlockId = emailBlockId.replace('{{field:', '');
    emailBlockId = emailBlockId.replace('}}', '');
    return emailBlockId;
  };
  const saveHandler = async () => {
    if (isPreview || isSaving) return;
    // @ts-ignore, qfRender is a global variable.
    const qfRender = window.qfRender;
    const ajaxurl = qfRender.ajaxurl || '';
    const formId = qfRender.formId;
    const emailBlockId = getEmailBlockId();
    if (emailBlockId) {
      const emailValue = getFieldAnswerVal(emailBlockId);
      if (!emailValue) {
        goToBlock(emailBlockId);
        setIsReviewing(true);
        setTimeout(() => {
          setIsFieldValid(emailBlockId, false);
          setFieldValidationErr(emailBlockId, 'Error');
        }, 100);
        return;
      }
    }
    setIsSaving(true);
    try {
      let formData = {
        answers,
        currentBlockId,
        formId
      };
      formData = (0, _hooks.applyFilters)('QuillForms.Renderer.SaveSubmissionFormData', formData, {
        formObject
      });
      const data = new FormData();
      data.append('action', 'quillforms_form_save');
      data.append('formData', JSON.stringify(formData));
      data.append('quillforms_nonce', qfRender._nonce);
      if (snapshot) {
        data.append('snapshot', snapshot);
      }
      const response = await fetch(ajaxurl, {
        method: 'POST',
        credentials: 'same-origin',
        body: data
      });
      const responseData = await response.json();
      if (responseData.success) {
        setSaved(true);
        setSnapshot(responseData.data.snapshot);
      }
    } catch (error) {
      console.error(error);
    }
    setIsSaving(false);
  };
  return (0, _react.createElement)(_button.default, {
    disableIcon: true,
    onClick: saveHandler
  }, isSaving && (0, _react.createElement)(_reactLoaderSpinner.TailSpin, {
    wrapperClass: "renderer-core-submit-btn__loader",
    color: "#fff",
    height: 20,
    width: 20
  }), !isSaving && saved && 'Saved !', !saved && 'Save');
};
var _default = exports.default = SaveBtn;
//# sourceMappingURL=index.js.map