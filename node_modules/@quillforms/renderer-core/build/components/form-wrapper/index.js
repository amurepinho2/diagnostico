"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _element = require("@wordpress/element");
var _data = require("@wordpress/data");
var _hooks = require("@wordpress/hooks");
var _autop = require("@wordpress/autop");
var _lodash = require("lodash");
var _useEditableFields = _interopRequireDefault(require("../../hooks/use-editable-fields"));
var _formFlow = _interopRequireDefault(require("../form-flow"));
var _useBlocks = _interopRequireDefault(require("../../hooks/use-blocks"));
var _useFormContext = _interopRequireDefault(require("../../hooks/use-form-context"));
var _hooks2 = require("../../hooks");
/**
 * WordPress Dependencies
 */

/** 
 * External Dependencies
 */

/**
 * Internal Dependencies
 */

const FormWrapper = ({
  applyLogic
}) => {
  const [isMounted, setIsMounted] = (0, _element.useState)(false);
  const editableFields = (0, _useEditableFields.default)(true);
  const {
    currentBlockId,
    blockTypes
  } = (0, _data.useSelect)(select => {
    return {
      currentBlockId: select('quillForms/renderer-core').getCurrentBlockId(),
      blockTypes: select('quillForms/blocks').getBlockTypes()
    };
  });
  const blocks = (0, _useBlocks.default)();
  const {
    isPreview,
    formObj: {
      hiddenFields
    },
    formId
  } = (0, _useFormContext.default)();
  const {
    saveAnswersInBrowser
  } = (0, _hooks2.useFormSettings)();
  const {
    setSwiper,
    insertEmptyFieldAnswer,
    goToBlock,
    setPaymentData,
    setFieldAnswer
  } = (0, _data.useDispatch)('quillForms/renderer-core');
  const replaceHiddenFields = val => {
    const newVal = val.replace(/{{hidden_field:([a-zA-Z0-9-_]+)}}/g, (_match, p1) => {
      if ((0, _lodash.size)(hiddenFields) > 0 && hiddenFields?.[p1]) {
        return hiddenFields[p1];
      }
      return '';
    });
    return newVal;
  };
  (0, _element.useEffect)(() => {
    if (!isPreview) {
      editableFields.forEach(field => {
        if (field?.attributes?.defaultValue) {
          const blockType = blockTypes[field.name];
          if (blockType?.supports?.numeric) {
            setFieldAnswer(field.id,
            // @ts-expect-error
            blockType?.getNumericVal(replaceHiddenFields((0, _autop.removep)(field.attributes.defaultValue))));
          } else {
            setFieldAnswer(field.id, replaceHiddenFields((0, _autop.removep)(field.attributes.defaultValue)));
          }
        } else {
          insertEmptyFieldAnswer(field.id, field.name);
        }
      });
      const welcomeScreens = (0, _lodash.map)((0, _lodash.cloneDeep)(blocks).filter(block => block.name === 'welcome-screen'), block => (0, _lodash.omit)(block, ['name']));
      const thankyouScreens = (0, _lodash.map)((0, _lodash.cloneDeep)(blocks).filter(block => block.name === 'thankyou-screen'), block => (0, _lodash.omit)(block, ['name']));
      setSwiper({
        walkPath: (0, _lodash.cloneDeep)(blocks.filter(block => block.name !== 'thankyou-screen' && block.name !== 'welcome-screen')),
        welcomeScreens: (0, _lodash.size)(welcomeScreens) === 0 ? [] : welcomeScreens,
        thankyouScreens: (0, _lodash.size)(thankyouScreens) === 0 ? [] : thankyouScreens
      });
      if (!applyLogic && !isPreview) {
        if (currentBlockId) goToBlock(currentBlockId, true);
      }
      setIsMounted(true);
    }
  }, [JSON.stringify(blocks)]);
  (0, _element.useEffect)(() => {
    if (isMounted) {
      const firstBlock = blocks && blocks[0] ? blocks[0] : undefined;
      const urlParams = typeof window !== 'undefined' ? new URLSearchParams(window.location.search) : undefined;
      const isPaymentStep = urlParams?.get('step') === 'payment';
      let formCompleted = false;
      if (isPaymentStep) {
        (0, _hooks.doAction)('QuillForms.RendererCore.PaymentStep', urlParams, () => {
          var _ref, _window$pending_submi;
          formCompleted = true;
          goToBlock( // @ts-expect-error
          (_ref = (_window$pending_submi = window?.pending_submission?.thankyou_screen_id) !== null && _window$pending_submi !== void 0 ? _window$pending_submi : urlParams.get('thankyou_screen_id')) !== null && _ref !== void 0 ? _ref : 'default_thankyou_screen');
        }, () => {
          // @ts-expect-error.
          setPaymentData(window?.pending_submission);
        });
      }
      if (!formCompleted) {
        setTimeout(() => {
          if (firstBlock?.id) {
            goToBlock(firstBlock.id);
          }
        }, 100);
      }
    }
  }, [isMounted]);
  return (0, _react.createElement)(_formFlow.default, {
    applyLogic: applyLogic
  });
};
var _default = exports.default = FormWrapper;
//# sourceMappingURL=index.js.map