"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _classnames = _interopRequireDefault(require("classnames"));
var _emotion = require("emotion");
var _useTheme = _interopRequireDefault(require("../../hooks/use-theme"));
var _arrowIcon = _interopRequireDefault(require("./arrow-icon"));
/**
 * External dependencies
 */

/**
 * Internal Dependencies
 */

const Button = ({
  className,
  onClick,
  children,
  onKeyDown,
  theme,
  ...props
}) => {
  if (!theme) theme = (0, _useTheme.default)();
  return (0, _react.createElement)("button", {
    tabIndex: 0,
    className: (0, _classnames.default)('renderer-core-button', className, (0, _emotion.css)`
					position: relative;
					background: ${theme.buttonsBgColor};
					color: ${theme.buttonsFontColor};
					box-shadow: none !important;
					outline: none !important;
					z-index: 1;
					border-radius: ${theme.buttonsBorderRadius}px;
					border-width: ${theme.buttonsBorderWidth}px;
					border-color: ${theme.buttonsBorderColor};
					border-style: solid;
					&:before {
						position: absolute;
						top: -2.5px;
						bottom: -2.5px;
						right: -2.5px;
						left: -2.5px;
						border: 2px solid #fff;
						z-index: -1;
						border-radius: 5px;
					}
					&:after {
						position: absolute;
						top: -4.5px;
						bottom: -4.5px;
						right: -4.5px;
						left: -4.5px;
						background: ${theme.buttonsBgColor};
						z-index: -2;
						border-radius: 6px;
					}

					&:focus-visible:after,
					&:focus-visible:before {
						content: '';
					}

					&:focus:not( :focus-visible ):after,
					&:focus:not( :focus-visible ):before {
						outline: none;
						box-shadow: none;
						display: none;
					}
					svg {
						transition: all 0.2s;
					}
					&:hover svg {
						transform: translateX( 3px );
					}

					@media ( min-width: 768px ) {
						& {
							font-size: ${theme.buttonsFontSize.lg};
							padding: ${theme.buttonsPadding.top.lg}
								${theme.buttonsPadding.right.lg}
								${theme.buttonsPadding.bottom.lg}
								${theme.buttonsPadding.left.lg};
						}
					}

					@media ( max-width: 767px ) {
						& {
							font-size: ${theme.buttonsFontSize.sm};
							padding: ${theme.buttonsPadding.top.sm}
								${theme.buttonsPadding.right.sm}
								${theme.buttonsPadding.bottom.sm}
								${theme.buttonsPadding.left.sm};
						}
					}
				`),
    role: "presentation"
    // @ts-ignore
    ,
    onClick: onClick
    // @ts-ignore
    ,
    onKeyDown: onKeyDown,
    ...props
  }, children, !props.disableIcon && (0, _react.createElement)(_arrowIcon.default, {
    theme: theme
  }));
};
var _default = exports.default = Button;
//# sourceMappingURL=index.js.map