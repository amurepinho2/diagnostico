"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "__experimentalUseFieldRenderContext", {
  enumerable: true,
  get: function () {
    return _context.__experimentalUseFieldRenderContext;
  }
});
exports.default = void 0;
var _react = require("react");
var _element = require("@wordpress/element");
var _data = require("@wordpress/data");
var _context = require("./context");
var _fieldWrapper = _interopRequireDefault(require("../field-wrapper"));
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const FieldRender = ({
  id,
  isActive,
  isLastField,
  shouldBeRendered,
  isCurrentBlockSafeToSwipe,
  next
}) => {
  const [isSubmitBtnVisible, showNextBtn] = (0, _element.useState)(true);
  const [isErrMsgVisible, showErrMsg] = (0, _element.useState)(false);
  const {
    isReviewing,
    isValid,
    block,
    firstInvalidFieldId,
    lastFieldId
  } = (0, _data.useSelect)(select => {
    const walkPath = select('quillForms/renderer-core').getWalkPath();
    return {
      isReviewing: select('quillForms/renderer-core').isReviewing(),
      isValid: select('quillForms/renderer-core').isValidField(id),
      block: select('quillForms/renderer-core').getBlockById(id),
      firstInvalidFieldId: select('quillForms/renderer-core').getFirstInvalidFieldId(),
      lastFieldId: walkPath[walkPath.length - 1].id
    };
  });
  const {
    goToBlock,
    setIsCurrentBlockSafeToSwipe
  } = (0, _data.useDispatch)('quillForms/renderer-core');
  (0, _element.useEffect)(() => {
    if (isActive && !isReviewing && !isErrMsgVisible) {
      showErrMsg(false);
      setIsCurrentBlockSafeToSwipe(true);
    }
  }, [isActive, isErrMsgVisible, isReviewing]);
  (0, _element.useEffect)(() => {
    if (!isCurrentBlockSafeToSwipe) {
      showErrMsg(true);
    }
  }, [isCurrentBlockSafeToSwipe]);
  (0, _element.useEffect)(() => {
    if (isReviewing && !isValid) {
      showErrMsg(true);
    }
  }, [isReviewing, isValid]);
  if (!block) return null;
  //console.log( block );
  const {
    name,
    attributes,
    innerBlocks
  } = block;
  const context = {
    id,
    blockName: name,
    attributes,
    innerBlocks,
    isActive,
    shouldBeRendered,
    isErrMsgVisible,
    showErrMsg,
    isSubmitBtnVisible,
    showNextBtn,
    next: () => {
      if (!isReviewing) {
        next();
      } else if (firstInvalidFieldId) {
        goToBlock(firstInvalidFieldId);
      } else {
        goToBlock(lastFieldId);
      }
    },
    isLastField
  };
  return (0, _react.createElement)(_context.FieldRenderContextProvider, {
    value: context
  }, (0, _react.createElement)(_fieldWrapper.default, null));
};
var _default = exports.default = FieldRender;
//# sourceMappingURL=index.js.map