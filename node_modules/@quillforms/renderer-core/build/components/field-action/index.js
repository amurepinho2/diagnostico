"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _classnames = _interopRequireDefault(require("classnames"));
var _emotion = require("emotion");
var _button = _interopRequireDefault(require("../button"));
var _htmlParser = _interopRequireDefault(require("../html-parser"));
var _fieldRender = require("../field-render");
var _useBlockTypes = _interopRequireDefault(require("../../hooks/use-block-types"));
var _useMessages = _interopRequireDefault(require("../../hooks/use-messages"));
var _useBlockTheme = _interopRequireDefault(require("../../hooks/use-block-theme"));
/**
 * External Dependencies
 */

/**
 * Internal Dependencies
 */

const FieldAction = ({
  clickHandler,
  show
}) => {
  const messages = (0, _useMessages.default)();
  const {
    blockName,
    isSubmitBtnVisible,
    attributes
  } = (0, _fieldRender.__experimentalUseFieldRenderContext)();
  const theme = (0, _useBlockTheme.default)(attributes?.themeId);
  if (!blockName) return null;
  const blockType = (0, _useBlockTypes.default)()[blockName];
  const isTouchScreen = 'ontouchstart' in window || navigator.maxTouchPoints > 0 ||
  // @ts-expect-error
  navigator.msMaxTouchPoints > 0;
  return (0, _react.createElement)("div", {
    className: (0, _classnames.default)('renderer-core-field-action', {
      'is-visible': isSubmitBtnVisible || show
    })
  }, blockType?.nextBtn ?
  // @ts-expect-error
  (0, _react.createElement)(blockType.nextBtn, {
    onClick: clickHandler
  }) : (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)(_button.default, {
    theme: theme,
    onClick: clickHandler
  }, (0, _react.createElement)(_htmlParser.default, {
    value: typeof attributes?.nextBtnLabel === 'string' ? attributes.nextBtnLabel : messages['label.button.ok']
  })), !isTouchScreen && (0, _react.createElement)("div", {
    className: (0, _classnames.default)('renderer-core-field-action__helper-text', (0, _emotion.css)`
									color: ${theme.questionsColor};
									font-size: 15px;
								`)
  }, (0, _react.createElement)(_htmlParser.default, {
    value: messages['label.hintText.enter']
  }))));
};
var _default = exports.default = FieldAction;
//# sourceMappingURL=index.js.map