"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _config = _interopRequireDefault(require("@quillforms/config"));
var _utils = require("@quillforms/utils");
var _element = require("@wordpress/element");
var _data = require("@wordpress/data");
var _emotion = require("emotion");
var _classnames = _interopRequireDefault(require("classnames"));
var _welcomeScreensWrapper = _interopRequireDefault(require("../welcome-screens-wrapper"));
var _thankyouScreensWrapper = _interopRequireDefault(require("../thankyou-screens-wrapper"));
var _fieldsWrapper = _interopRequireDefault(require("../fields-wrapper"));
var _formFooter = _interopRequireDefault(require("../form-footer"));
var _useGeneralTheme = _interopRequireDefault(require("../../hooks/use-general-theme"));
var _useBlocks = _interopRequireDefault(require("../../hooks/use-blocks"));
var _paymentModal = _interopRequireDefault(require("../payment-modal"));
var _useCurrentTheme = _interopRequireDefault(require("../../hooks/use-current-theme"));
var _lodash = require("lodash");
var _hooks = require("../../hooks");
/* eslint-disable jsx-a11y/click-events-have-key-events */
/* eslint-disable jsx-a11y/no-static-element-interactions */
/* eslint-disable no-nested-ternary */
/**
 * Quill Forms Dependencies
 */

/**
 * WordPress Dependencies
 */

/**
 * External Dependencies
 */

/**
 * Internal Dependencies
 */

const FormFlow = ({
  applyLogic
}) => {
  var _useFormSettings$show;
  const blocks = (0, _useBlocks.default)();
  const {
    formObj,
    customFonts
  } = (0, _hooks.useFormContext)();
  const generalTheme = (0, _useGeneralTheme.default)();
  const currentTheme = (0, _useCurrentTheme.default)();
  const fonts = _config.default.getFonts();
  const showLettersOnAnswers = (_useFormSettings$show = (0, _hooks.useFormSettings)()?.showLettersOnAnswers) !== null && _useFormSettings$show !== void 0 ? _useFormSettings$show : true;
  const {
    font,
    questionsLabelFont,
    questionsDescriptionFont
  } = currentTheme;
  const fontFamilies = [font];
  if (questionsLabelFont !== 'inherit') {
    fontFamilies.push(questionsLabelFont);
  }
  if (questionsDescriptionFont !== 'inherit') {
    fontFamilies.push(questionsDescriptionFont);
  }
  const fontTypes = [fonts[font], fonts[questionsLabelFont], fonts[questionsDescriptionFont]];
  const fontUrls = [];
  const fontFace = [];
  (0, _lodash.forEach)(fontFamilies, (fontFamily, fontIndex) => {
    const fontType = fontTypes[fontIndex];
    if (fontType === 'googlefonts' || fontType === 'earlyaccess') {
      switch (fontType) {
        case 'googlefonts':
          fontUrls.push('https://fonts.googleapis.com/css?family=' + fontFamily + ':100,100italic,200,200italic,300,300italic,400,400italic,500,500italic,600,600italic,700,700italic,800,800italic,900,900italic');
          break;
        case 'earlyaccess':
          const fontLowerString = fontFamily.replace(/\s+/g, '').toLowerCase();
          fontUrls.push('https://fonts.googleapis.com/earlyaccess/' + fontLowerString + '.css');
          break;
      }
    } else {
      const customFont = customFonts?.find(font => font.title === fontFamily);
      if (customFont && (0, _lodash.size)(customFont?.properties?.variations) > 0) {
        (0, _lodash.forEach)(customFont?.properties?.variations, variation => {
          fontFace.push({
            '@font-face': {
              fontFamily,
              fontStyle: variation.style,
              fontWeight: variation.weight,
              src: `${['woff2', 'woff', 'ttf'].map(type => {
                if (variation?.files?.[type]) {
                  return `url('${variation.files[type]}') format('${type}')`;
                }
                return undefined;
              }).filter(urlLine => typeof urlLine !== 'undefined').join(',')}`
            }
          });
        });
      }
    }
  });
  (0, _element.useEffect)(() => {
    const head = document.head;
    const link = document.createElement('link');
    link.type = 'text/css';
    link.rel = 'stylesheet';
    if ((0, _lodash.size)(fontUrls) > 0) {
      (0, _lodash.forEach)(fontUrls, fontUrl => {
        link.href = fontUrl;
        const existingLinkEl = document.querySelector(`link[href='${link.href}']`);
        if (!existingLinkEl) head.appendChild(link);
      });
    }
  }, [font, questionsLabelFont, questionsDescriptionFont]);
  const {
    setIsFocused
  } = (0, _data.useDispatch)('quillForms/renderer-core');
  const ref = (0, _element.useRef)(null);
  const {
    isWelcomeScreenActive,
    isThankyouScreenActive,
    paymentData
  } = (0, _data.useSelect)(select => {
    const store = select('quillForms/renderer-core');
    return {
      isThankyouScreenActive: store.isThankyouScreenActive(),
      isWelcomeScreenActive: store.isWelcomeScreenActive(),
      paymentData: store.getPaymentData()
    };
  });
  (0, _element.useEffect)(() => {
    /**
     * Alert if clicked on outside of element
     *
     * @param  event
     */
    function handleClickOutside(event) {
      if (ref.current && !ref?.current?.contains(event.target)) {
        setIsFocused(false);
      }
    }

    // Bind the event listener
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      // Unbind the event listener on clean up
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [ref]);
  const keydownHandler = e => {
    // Prevent any keyboard event by default in case of any tab event in general.
    if (e.key === 'Tab') {
      e.preventDefault();
    }
  };
  (0, _element.useEffect)(() => {
    window.addEventListener('keydown', keydownHandler);
    return () => {
      window.removeEventListener('keydown', keydownHandler);
    };
  }, []);
  let backgroundImageCSS = '';
  if (generalTheme.backgroundImage && generalTheme.backgroundImage) {
    backgroundImageCSS = `background-image: url('${generalTheme.backgroundImage}');
			background-size: cover;
			background-position: ${
    // @ts-expect-error
    parseFloat(generalTheme.backgroundImageFocalPoint?.x) * 100}%
			${
    // @ts-expect-error
    parseFloat(generalTheme.backgroundImageFocalPoint?.y) * 100}%;

			background-repeat: no-repeat;
		`;
  }
  return (0, _react.createElement)("div", {
    ref: ref,
    className: (0, _classnames.default)((0, _emotion.css)`
					height: 100%;
					width: 100%;
					-webkit-font-smoothing: antialiased;
					${backgroundImageCSS}
					${formObj?.customCSS}
				`, 'renderer-core-form-flow__wrapper'),
    tabIndex: 0,
    onMouseDown: () => setIsFocused(true)
  }, (0, _react.createElement)(_utils.Global, {
    styles: [...fontFace]
  }), (0, _react.createElement)("div", {
    className: (0, _classnames.default)('renderer-core-form-flow', (0, _emotion.css)`
						position: relative;
						width: 100%;
						height: 100%;
						overflow: hidden;
						background: ${generalTheme.backgroundColor};
						font-family: inherit;
						@media ( min-width: 768px ) {
							font-size: ${generalTheme.fontSize.lg};
							line-height: ${generalTheme.fontLineHeight.lg};
						}
						@media ( max-width: 767px ) {
							font-size: ${generalTheme.fontSize.sm};
							line-height: ${generalTheme.fontLineHeight.sm};
						}
						font-family: ${generalTheme.font};
						.renderer-components-block-label {
							color: ${generalTheme.questionsColor};
							font-family: ${generalTheme.questionsLabelFont};
							@media ( min-width: 768 ) {
								font-size: ${generalTheme.questionsLabelFontSize.lg};
								line-height: ${generalTheme.questionsLabelLineHeight.lg};
							}
							@media ( max-width: 767px ) {
								font-size: ${generalTheme.questionsLabelFontSize.sm};
								line-height: ${generalTheme.questionsLabelLineHeight.sm};
							}
						}
						.renderer-components-block-description {
							font-family: ${generalTheme.questionsDescriptionFont};

							@media ( min-width: 768px ) {
								font-size: ${generalTheme.questionsDescriptionFontSize.lg};
								line-height: ${generalTheme.questionsDescriptionLineHeight.lg};
							}
							@media ( max-width: 767px ) {
								font-size: ${generalTheme.questionsDescriptionFontSize.sm};
								line-height: ${generalTheme.questionsDescriptionLineHeight.sm};
							}
						}

						input,
						textarea {
							@media ( min-width: 768px ) {
								font-size: ${generalTheme.textInputAnswers.lg};
								line-height: ${generalTheme.textInputAnswers.lg};
							}
							@media ( max-width: 767px ) {
								font-size: ${generalTheme.textInputAnswers.sm};
								line-height: ${generalTheme.textInputAnswers.sm};
							}
						}

						${!showLettersOnAnswers && `
							.pictureChoice__optionKey, .multipleChoice__optionKey {
								display: none !important;
							}
						`}
					`),
    onClick: () => {
      setIsFocused(true);
    }
  }, generalTheme?.logo?.src && (0, _react.createElement)("div", {
    className: "renderer-core-form-brand-logo"
  }, (0, _react.createElement)("img", {
    src: generalTheme.logo.src,
    alt: ""
  })), blocks.length > 0 && (0, _react.createElement)(_element.Fragment, null, isWelcomeScreenActive && (0, _react.createElement)(_welcomeScreensWrapper.default, null), !paymentData && (0, _react.createElement)(_fieldsWrapper.default, {
    isActive: !isWelcomeScreenActive && !isThankyouScreenActive,
    applyLogic: applyLogic
  }), isThankyouScreenActive && (0, _react.createElement)(_thankyouScreensWrapper.default, null)), !paymentData && (0, _react.createElement)(_formFooter.default, null), !!paymentData && (0, _react.createElement)(_paymentModal.default, {
    data: paymentData
  })));
};
var _default = exports.default = FormFlow;
//# sourceMappingURL=index.js.map