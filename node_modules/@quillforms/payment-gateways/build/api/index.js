"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerPaymentGatewayModule = exports.getPaymentGatewayModules = exports.getPaymentGatewayModule = void 0;
var _config = _interopRequireDefault(require("@quillforms/config"));
var _hooks = require("@wordpress/hooks");
var _lodash = require("lodash");
/**
 * Quill Forms Dependencies
 */

/**
 * WordPress Dependencies
 */

/**
 * External Dependencies
 */

let paymentGatewayModules = {};

/**
 * Register PaymentGateway Module
 *
 * @param {string}               slug     The module slug
 * @param {PaymentGatewayModule} module The module properties.
 *
 */
const registerPaymentGatewayModule = (slug, module) => {
  const isWPEnv = _config.default.isWPEnv();
  if (isWPEnv || !isWPEnv && !['free', 'basic_yearly', 'basic_monthly'].includes(window?.quillformsSaasManagerAdmin?.plan?.plan)) {
    module = (0, _hooks.applyFilters)('QuillForms.PaymentGateways.PaymentGatewayModule', module, slug);
  }
  if (paymentGatewayModules[slug]) {
    console.error(`This payment gateway ${slug} is already registered!`);
    return;
  }
  if (!module.name) {
    console.error(`The 'name' property is mandatory!`);
    return;
  }
  if (typeof module.name !== 'string') {
    console.error(`The 'name' property must be a string!`);
    return;
  }
  if (!module.icon) {
    console.error(`The 'icon' property is mandatory!`);
    return;
  }
  if (!module.description) {
    console.error(`The 'description' property is mandatory!`);
    return;
  }
  if (module.settings && !(0, _lodash.isFunction)(module.settings)) {
    console.error('The "settings" property must be a valid function!');
    return;
  }
  if (!module.methods) {
    console.error(`The 'methods' property is mandatory!`);
    return;
  }
  for (const _method of Object.values(module.methods)) {
    // TODO: method props check.
  }
  paymentGatewayModules[slug] = module;
};
exports.registerPaymentGatewayModule = registerPaymentGatewayModule;
const getPaymentGatewayModules = () => {
  return paymentGatewayModules;
};
exports.getPaymentGatewayModules = getPaymentGatewayModules;
const getPaymentGatewayModule = slug => {
  return paymentGatewayModules[slug];
};
exports.getPaymentGatewayModule = getPaymentGatewayModule;
//# sourceMappingURL=index.js.map