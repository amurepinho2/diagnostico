import { createElement } from "react";
/**
 * QuillForms Dependencies
 */
import { BaseControl, ControlWrapper, ControlLabel, ToggleControl, SelectControl, TextControl } from '@quillforms/admin-components';

/**
 * WordPress Dependencies
 */
import { Fragment } from 'react';
import { plus, closeSmall } from '@wordpress/icons';
import { Icon } from '@wordpress/components';

/**
 * External Dependencies
 */
import { css } from 'emotion';
const SingleRangeSliderControl = ({
  attributes,
  setAttributes
}) => {
  const marksOptions = [{
    key: 'no',
    name: 'No'
  }, {
    key: 'yes',
    name: 'Yes'
  }, {
    key: 'custom',
    name: 'Custom'
  }];
  const {
    min,
    max,
    step,
    prefix,
    suffix,
    marks,
    customMarks
  } = attributes;
  const addItem = index => {
    const newItem = {
      label: "",
      value: ""
    };
    setAttributes({
      customMarks: [...attributes.customMarks.slice(0, index), newItem, ...attributes.customMarks.slice(index)]
    });
  };
  const deleteItem = index => {
    const newMarks = [...customMarks];
    newMarks.splice(index, 1);
    setAttributes({
      customMarks: newMarks
    });
  };
  const updateItem = (index, field, value) => {
    const newMarks = [...customMarks];
    newMarks[index][field] = value;
    setAttributes({
      customMarks: newMarks
    });
  };
  return createElement(Fragment, null, createElement(BaseControl, null, createElement(ControlWrapper, {
    orientation: "horizontal"
  }, createElement(ControlLabel, {
    label: "Min"
  }), createElement(TextControl, {
    type: "number",
    value: min,
    onChange: val => {
      if (!isNaN(val)) {
        setAttributes({
          min: val
        });
      }
    }
  }))), createElement(BaseControl, null, createElement(ControlWrapper, {
    orientation: "horizontal"
  }, createElement(ControlLabel, {
    label: "Max"
  }), createElement(TextControl, {
    type: "number",
    value: max,
    onChange: val => {
      if (!isNaN(val)) {
        setAttributes({
          max: val
        });
      }
    }
  }))), createElement(BaseControl, null, createElement(ControlWrapper, {
    orientation: "horizontal"
  }, createElement(ControlLabel, {
    label: "Step"
  }), createElement(TextControl, {
    type: "number",
    value: step,
    onChange: val => {
      if (!isNaN(val)) {
        setAttributes({
          step: val
        });
      }
    }
  }))), createElement(BaseControl, null, createElement(ControlWrapper, {
    orientation: "horizontal"
  }, createElement(ControlLabel, {
    label: "Marks"
  }), createElement(SelectControl, {
    value: marksOptions.find(option => option.key === marks),
    onChange: selectedChoice => {
      if (selectedChoice && selectedChoice.selectedItem) {
        setAttributes({
          marks: selectedChoice.selectedItem.key
        });
      }
    },
    options: marksOptions
  })), marks === 'custom' && createElement(Fragment, null, customMarks.map((item, index) => createElement("div", {
    className: "admin-components-choices-inserter__choice-row",
    key: index
  }, createElement(TextControl, {
    type: "number",
    value: item.value,
    onChange: val => updateItem(index, "value", val),
    placeholder: "value"
  }), createElement(TextControl, {
    type: "text",
    value: item.label,
    onChange: val => updateItem(index, "label", val),
    placeholder: "label"
  }), createElement("div", {
    className: "admin-components-choices-inserter__choice-actions"
  }, createElement("div", {
    className: "admin-components-choices-inserter__choice-add"
  }, createElement(Icon, {
    icon: plus,
    onClick: () => addItem(index + 1)
  })), customMarks.length > 1 && createElement("div", {
    className: "admin-components-choices-inserter__choice-remove"
  }, createElement(Icon, {
    className: css`
								fill: #fff;
							`,
    icon: closeSmall,
    onClick: () => deleteItem(index)
  }))))))), createElement(BaseControl, null, createElement(ControlWrapper, {
    orientation: "horizontal"
  }, createElement(ControlLabel, {
    label: "Prefix"
  }), createElement(TextControl, {
    value: prefix,
    onChange: val => setAttributes({
      prefix: val
    })
  }))), createElement(BaseControl, null, createElement(ControlWrapper, {
    orientation: "horizontal"
  }, createElement(ControlLabel, {
    label: "Suffix"
  }), createElement(TextControl, {
    value: suffix,
    onChange: val => setAttributes({
      suffix: val
    })
  }))));
};
export default SingleRangeSliderControl;
//# sourceMappingURL=controls.js.map