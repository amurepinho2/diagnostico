"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _adminComponents = require("@quillforms/admin-components");
var _icons = require("@wordpress/icons");
var _components = require("@wordpress/components");
var _emotion = require("emotion");
/**
 * QuillForms Dependencies
 */

/**
 * WordPress Dependencies
 */

/**
 * External Dependencies
 */

const SingleRangeSliderControl = ({
  attributes,
  setAttributes
}) => {
  const marksOptions = [{
    key: 'no',
    name: 'No'
  }, {
    key: 'yes',
    name: 'Yes'
  }, {
    key: 'custom',
    name: 'Custom'
  }];
  const {
    min,
    max,
    step,
    prefix,
    suffix,
    marks,
    customMarks
  } = attributes;
  const addItem = index => {
    const newItem = {
      label: "",
      value: ""
    };
    setAttributes({
      customMarks: [...attributes.customMarks.slice(0, index), newItem, ...attributes.customMarks.slice(index)]
    });
  };
  const deleteItem = index => {
    const newMarks = [...customMarks];
    newMarks.splice(index, 1);
    setAttributes({
      customMarks: newMarks
    });
  };
  const updateItem = (index, field, value) => {
    const newMarks = [...customMarks];
    newMarks[index][field] = value;
    setAttributes({
      customMarks: newMarks
    });
  };
  return (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)(_adminComponents.BaseControl, null, (0, _react.createElement)(_adminComponents.ControlWrapper, {
    orientation: "horizontal"
  }, (0, _react.createElement)(_adminComponents.ControlLabel, {
    label: "Min"
  }), (0, _react.createElement)(_adminComponents.TextControl, {
    type: "number",
    value: min,
    onChange: val => {
      if (!isNaN(val)) {
        setAttributes({
          min: val
        });
      }
    }
  }))), (0, _react.createElement)(_adminComponents.BaseControl, null, (0, _react.createElement)(_adminComponents.ControlWrapper, {
    orientation: "horizontal"
  }, (0, _react.createElement)(_adminComponents.ControlLabel, {
    label: "Max"
  }), (0, _react.createElement)(_adminComponents.TextControl, {
    type: "number",
    value: max,
    onChange: val => {
      if (!isNaN(val)) {
        setAttributes({
          max: val
        });
      }
    }
  }))), (0, _react.createElement)(_adminComponents.BaseControl, null, (0, _react.createElement)(_adminComponents.ControlWrapper, {
    orientation: "horizontal"
  }, (0, _react.createElement)(_adminComponents.ControlLabel, {
    label: "Step"
  }), (0, _react.createElement)(_adminComponents.TextControl, {
    type: "number",
    value: step,
    onChange: val => {
      if (!isNaN(val)) {
        setAttributes({
          step: val
        });
      }
    }
  }))), (0, _react.createElement)(_adminComponents.BaseControl, null, (0, _react.createElement)(_adminComponents.ControlWrapper, {
    orientation: "horizontal"
  }, (0, _react.createElement)(_adminComponents.ControlLabel, {
    label: "Marks"
  }), (0, _react.createElement)(_adminComponents.SelectControl, {
    value: marksOptions.find(option => option.key === marks),
    onChange: selectedChoice => {
      if (selectedChoice && selectedChoice.selectedItem) {
        setAttributes({
          marks: selectedChoice.selectedItem.key
        });
      }
    },
    options: marksOptions
  })), marks === 'custom' && (0, _react.createElement)(_react.Fragment, null, customMarks.map((item, index) => (0, _react.createElement)("div", {
    className: "admin-components-choices-inserter__choice-row",
    key: index
  }, (0, _react.createElement)(_adminComponents.TextControl, {
    type: "number",
    value: item.value,
    onChange: val => updateItem(index, "value", val),
    placeholder: "value"
  }), (0, _react.createElement)(_adminComponents.TextControl, {
    type: "text",
    value: item.label,
    onChange: val => updateItem(index, "label", val),
    placeholder: "label"
  }), (0, _react.createElement)("div", {
    className: "admin-components-choices-inserter__choice-actions"
  }, (0, _react.createElement)("div", {
    className: "admin-components-choices-inserter__choice-add"
  }, (0, _react.createElement)(_components.Icon, {
    icon: _icons.plus,
    onClick: () => addItem(index + 1)
  })), customMarks.length > 1 && (0, _react.createElement)("div", {
    className: "admin-components-choices-inserter__choice-remove"
  }, (0, _react.createElement)(_components.Icon, {
    className: (0, _emotion.css)`
								fill: #fff;
							`,
    icon: _icons.closeSmall,
    onClick: () => deleteItem(index)
  }))))))), (0, _react.createElement)(_adminComponents.BaseControl, null, (0, _react.createElement)(_adminComponents.ControlWrapper, {
    orientation: "horizontal"
  }, (0, _react.createElement)(_adminComponents.ControlLabel, {
    label: "Prefix"
  }), (0, _react.createElement)(_adminComponents.TextControl, {
    value: prefix,
    onChange: val => setAttributes({
      prefix: val
    })
  }))), (0, _react.createElement)(_adminComponents.BaseControl, null, (0, _react.createElement)(_adminComponents.ControlWrapper, {
    orientation: "horizontal"
  }, (0, _react.createElement)(_adminComponents.ControlLabel, {
    label: "Suffix"
  }), (0, _react.createElement)(_adminComponents.TextControl, {
    value: suffix,
    onChange: val => setAttributes({
      suffix: val
    })
  }))));
};
var _default = exports.default = SingleRangeSliderControl;
//# sourceMappingURL=controls.js.map