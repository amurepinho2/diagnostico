"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _rendererCore = require("@quillforms/renderer-core");
var _tinycolor = _interopRequireDefault(require("tinycolor2"));
var _emotion = require("emotion");
var _classnames = _interopRequireDefault(require("classnames"));
var _Slider = _interopRequireDefault(require("@mui/material/Slider"));
/**
 * QuillForms Dependencies
 */

/**
 * WordPress Dependencies
 */

/**
 * External Dependencies
 */

const singleRangeSliderDisplay = props => {
  const {
    id,
    attributes,
    setIsValid,
    setIsAnswered,
    setValidationErr,
    showNextBtn,
    blockWithError,
    val,
    setVal,
    showErrMsg,
    inputRef,
    isTouchScreen,
    setFooterDisplay,
    isPreview,
    isReviewing
  } = props;
  const messages = (0, _rendererCore.useMessages)();
  const theme = (0, _rendererCore.useBlockTheme)(attributes.themeId);
  const answersColor = (0, _tinycolor.default)(theme.answersColor);
  const {
    min,
    max,
    step,
    marks,
    customMarks,
    prefix,
    suffix,
    required
  } = attributes;
  const checkfieldValidation = value => {
    if (required === true && (!value || value === '') && value !== 0) {
      setIsValid(false);
      setValidationErr(messages['label.errorAlert.required']);
    } else {
      setIsValid(true);
      setValidationErr(null);
    }
  };
  (0, _react.useEffect)(() => {
    if (isPreview || !isReviewing) checkfieldValidation(val);
  }, [attributes]);
  return (0, _react.createElement)("div", {
    className: (0, _emotion.css)`
			margin: 40px 0 0;

			.MuiSlider-root  {
				color: ${theme.answersColor};
			}

			.MuiSlider-mark {
				width: 10px;
				height: 10px;
				border-radius: 50%;
			}
		   .css-14pt78w-MuiSlider-rail {
			   height: 10px
		   }
		   .MuiSlider-track {
			   height: 10px
		   }

		`
  }, (0, _react.createElement)(_Slider.default, {
    min: parseFloat(min),
    max: parseFloat(max),
    step: parseFloat(step),
    renderMark: mark => {
      return prefix + mark + suffix;
    },
    valueLabelDisplay: "on",
    valueLabelFormat: val => {
      return prefix + val + suffix;
    },
    marks: marks === 'yes' ? true : marks === 'no' ? false : customMarks,
    renderTooltip: mark => {
      return prefix + mark + suffix;
    },
    value: typeof val === 'undefined' ? 0 : parseFloat(val),
    onChange: e => {
      setVal(e.target.value);
      checkfieldValidation(e.target.value);
    }
  }));
};
var _default = exports.default = singleRangeSliderDisplay;
//# sourceMappingURL=display.js.map