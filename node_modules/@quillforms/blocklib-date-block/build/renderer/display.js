"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _rendererCore = require("@quillforms/renderer-core");
var _tinycolor = _interopRequireDefault(require("tinycolor2"));
var _reactTextMask = _interopRequireDefault(require("react-text-mask"));
var _dayjs = _interopRequireDefault(require("dayjs"));
var _customParseFormat = _interopRequireDefault(require("dayjs/plugin/customParseFormat"));
var _emotion = require("emotion");
var _classnames = _interopRequireDefault(require("classnames"));
var _createAutocorrectedDatePipe = _interopRequireDefault(require("./create-autocorrected-date-pipe"));
/**
 * QuillForms Dependencies
 */

/**
 * WordPress Dependencies
 */

/**
 * External Dependencies
 */

/**
 * Internal Dependencies
 */

const DateOutput = props => {
  const {
    id,
    attributes,
    setIsValid,
    isPreview,
    setIsAnswered,
    setValidationErr,
    showNextBtn,
    showErrMsg,
    val,
    setVal,
    setFooterDisplay,
    isTouchScreen,
    inputRef,
    isReviewing
  } = props;
  const {
    format,
    separator,
    required
  } = attributes;
  const theme = (0, _rendererCore.useBlockTheme)(attributes.themeId);
  const messages = (0, _rendererCore.useMessages)();
  const answersColor = (0, _tinycolor.default)(theme.answersColor);
  const getPlaceholder = () => {
    if (format === 'MMDDYYYY') {
      return 'MM' + separator + 'DD' + separator + 'YYYY';
    } else if (format === 'DDMMYYYY') {
      return 'DD' + separator + 'MM' + separator + 'YYYY';
    } else if (format === 'YYYYMMDD') {
      return 'YYYY' + separator + 'MM' + separator + 'DD';
    }
  };
  const checkFieldValidation = value => {
    _dayjs.default.extend(_customParseFormat.default);
    const date = (0, _dayjs.default)(value, getPlaceholder(), true);
    if (required === true && (!value || value === '')) {
      setIsValid(false);
      setValidationErr(messages['label.errorAlert.required']);
    } else if (!date.isValid() && value) {
      setIsValid(false);
      setValidationErr(messages['label.errorAlert.date']);
    } else {
      setIsValid(true);
      setValidationErr(null);
    }
  };
  (0, _react.useEffect)(() => {
    // if change in required flag and is in preview mode, check validation
    // Note, that this effect will also be called on mount, that's why we check if isReviewing = false
    // because we want to display errors coming from server.
    if (isPreview || !isReviewing) checkFieldValidation(val);
  }, [attributes]);
  const changeHandler = e => {
    const value = e.target.value;
    setVal(value);
    showErrMsg(false);
    checkFieldValidation(value);
    if (value !== '') {
      setIsAnswered(true);
      showNextBtn(true);
    } else {
      setIsAnswered(false);
    }
  };
  const autoCorrectedDatePipe = (0, _createAutocorrectedDatePipe.default)(getPlaceholder()?.toLowerCase());
  const getMask = () => {
    if (format === 'YYYYMMDD') {
      return [/\d/, /\d/, /\d/, /\d/, separator, /\d/, /\d/, separator, /\d/, /\d/];
    }
    return [/\d/, /\d/, separator, /\d/, /\d/, separator, /\d/, /\d/, /\d/, /\d/];
  };
  return (0, _react.createElement)(_reactTextMask.default, {
    onChange: changeHandler,
    ref: inputRef,
    className: (0, _classnames.default)((0, _emotion.css)`
					& {
						width: 100%;
						border: none;
						outline: none;
						border: none !important;
						border-radius: 0 !important;
						padding-bottom: 8px;
						background: transparent;
						transition: box-shadow 0.1s ease-out 0s;
						box-shadow: ${answersColor.setAlpha(0.3).toString()}
							0px 1px !important;
					}

					&::placeholder {
						opacity: 0.3;
						/* Chrome, Firefox, Opera, Safari 10.1+ */
						color: ${theme.answersColor};
					}

					&:-ms-input-placeholder {
						opacity: 0.3;
						/* Internet Explorer 10-11 */
						color: ${theme.answersColor};
					}

					&::-ms-input-placeholder {
						opacity: 0.3;
						/* Microsoft Edge */
						color: ${theme.answersColor};
					}

					&:focus {
						box-shadow: ${answersColor.setAlpha(1).toString()}
							0px 2px !important;
					}

					color: ${theme.answersColor};
				`),
    placeholder: getPlaceholder(),
    mask: getMask(),
    pipe: autoCorrectedDatePipe,
    value: val && val.length > 0 ? val : '',
    onFocus: () => {
      if (isTouchScreen) {
        setFooterDisplay(false);
      }
    },
    onBlur: () => {
      if (isTouchScreen) {
        setFooterDisplay(true);
      }
    },
    autoComplete: "off"
  });
};
var _default = exports.default = DateOutput;
//# sourceMappingURL=display.js.map