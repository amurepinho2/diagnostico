import type { Plans } from './types/plans';
import type { License } from './types/license';
import { InitialPayload } from './types/initial-payload';
import type { MessagesStructure, ThemeStructure } from '@quillforms/types';
import { StoreAddons } from './types/store-addons';
import { Currencies } from './types/currencies';
export type { InitialPayload };
export interface ConfigApi {
    <T>(key: string): T;
    setInitialPayload: (value: InitialPayload) => void;
    getInitialPayload: () => InitialPayload;
    getMessagesStructure: () => MessagesStructure;
    setMessagesStructure: (value: MessagesStructure) => void;
    getThemeStructure: () => ThemeStructure;
    getFonts: () => Record<string, string>;
    isWPEnv: () => boolean;
    setWPEnv: (value: boolean) => void;
    getAdminUrl: () => string;
    setAdminUrl: (value: string) => void;
    getPluginDirUrl: () => string;
    setPluginDirUrl: (value: string) => void;
    getFormId: () => number;
    setFormId: (value: number) => void;
    getFormUrl: () => string;
    getFormTemplates: () => Record<string, any>;
    setFormTemplates: (value: Record<string, any>) => void;
    setFormUrl: (value: string) => void;
    getMaxUploadSize: () => number;
    setMaxUploadSize: (value: number) => void;
    getPlans: () => Plans;
    setPlans: (value: Plans) => void;
    getLicense: () => License;
    setLicense: (value: License) => void;
    isPlanAccessible: (featurePlanKey: string) => boolean;
    getStoreAddons: () => StoreAddons;
    setStoreAddons: (value: StoreAddons) => void;
    getCurrencies: () => Currencies;
    setCurrencies: (value: Currencies) => void;
    isLicenseValid: () => boolean;
    setIsLicenseValid: (value: boolean) => void;
}
declare const configApi: ConfigApi;
export default configApi;
//# sourceMappingURL=index.d.ts.map