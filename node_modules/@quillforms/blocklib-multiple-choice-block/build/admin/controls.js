"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _adminComponents = require("@quillforms/admin-components");
/**
 * QuillForms Dependencies
 */

/**
 * WordPress Dependencies
 */

const multipleChoiceControls = props => {
  const {
    attributes: {
      multiple,
      verticalAlign,
      choices,
      min,
      max
    },
    setAttributes
  } = props;
  return (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)(_adminComponents.BaseControl, null, (0, _react.createElement)(_adminComponents.ControlWrapper, {
    orientation: "horizontal"
  }, (0, _react.createElement)(_adminComponents.ControlLabel, {
    label: "Multiple"
  }), (0, _react.createElement)(_adminComponents.ToggleControl, {
    checked: multiple,
    onChange: () => setAttributes({
      multiple: !multiple
    })
  }))), multiple && (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)(_adminComponents.BaseControl, null, (0, _react.createElement)(_adminComponents.ControlWrapper, {
    orientation: "horizontal"
  }, (0, _react.createElement)(_adminComponents.ControlLabel, {
    label: "Minimum limit for choices",
    isNew: true
  }), (0, _react.createElement)(_adminComponents.ToggleControl, {
    checked: min,
    onChange: () => {
      setAttributes({
        min: min === false ? 1 : false
      });
    }
  })), min !== false && (0, _react.createElement)(_adminComponents.TextControl, {
    type: "number",
    value: min,
    onChange: val => {
      setAttributes({
        min: val
      });
    }
  })), (0, _react.createElement)(_adminComponents.BaseControl, null, (0, _react.createElement)(_adminComponents.ControlWrapper, {
    orientation: "horizontal"
  }, (0, _react.createElement)(_adminComponents.ControlLabel, {
    label: "Maximum limit for choices",
    isNew: true
  }), (0, _react.createElement)(_adminComponents.ToggleControl, {
    checked: max,
    onChange: () => {
      setAttributes({
        max: max === false ? 5 : false
      });
    }
  })), max !== false && (0, _react.createElement)(_adminComponents.TextControl, {
    type: "number",
    value: max,
    onChange: val => {
      setAttributes({
        max: val
      });
    }
  }))), (0, _react.createElement)(_adminComponents.BaseControl, null, (0, _react.createElement)(_adminComponents.ControlWrapper, {
    orientation: "horizontal"
  }, (0, _react.createElement)(_adminComponents.ControlLabel, {
    label: "Vertical Align"
  }), (0, _react.createElement)(_adminComponents.ToggleControl, {
    checked: verticalAlign,
    onChange: () => setAttributes({
      verticalAlign: !verticalAlign
    })
  }))), (0, _react.createElement)(_adminComponents.BaseControl, null, (0, _react.createElement)(_adminComponents.ControlWrapper, {
    orientation: "horizontal"
  }, (0, _react.createElement)(_adminComponents.ControlLabel, {
    label: "Choices"
  }), (0, _react.createElement)(_adminComponents.ChoicesBulkBtn, {
    choices: choices,
    setChoices: val => {
      setAttributes({
        choices: val
      });
    }
  })), (0, _react.createElement)(_adminComponents.ControlWrapper, {
    orientation: "vertical"
  }, (0, _react.createElement)(_adminComponents.ChoicesInserter, {
    choices: choices,
    setChoices: val => {
      setAttributes({
        choices: val
      });
    }
  }))));
};
var _default = exports.default = multipleChoiceControls;
//# sourceMappingURL=controls.js.map