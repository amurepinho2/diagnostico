"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _rendererCore = require("@quillforms/renderer-core");
var _classnames = _interopRequireDefault(require("classnames"));
var _emotion = require("emotion");
var _tinycolor = _interopRequireDefault(require("tinycolor2"));
/**
 * QuillForms Depndencies
 */

/**
 * External Dependencies
 */

const ChoiceItem = ({
  order,
  selected,
  choiceLabel,
  choiceValue,
  clickHandler,
  theme,
  isAnswerLocked,
  blockId,
  correctIncorrectQuiz
}) => {
  const {
    answersColor
  } = theme;
  const messages = (0, _rendererCore.useMessages)();
  const [isClicked, setIsClicked] = (0, _react.useState)(false);
  return (0, _react.createElement)("div", {
    role: "presentation",
    className: (0, _classnames.default)('multipleChoice__optionWrapper', {
      selected,
      locked: isAnswerLocked,
      clicked: isClicked,
      correct: isAnswerLocked && correctIncorrectQuiz?.enabled && correctIncorrectQuiz?.showAnswersDuringQuiz && correctIncorrectQuiz?.questions?.[blockId]?.correctAnswers?.includes(choiceValue),
      wrong: isAnswerLocked && correctIncorrectQuiz?.enabled && correctIncorrectQuiz?.showAnswersDuringQuiz && selected && !correctIncorrectQuiz?.questions?.[blockId]?.correctAnswers?.includes(choiceValue)
    }, (0, _emotion.css)`
					background: ${(0, _tinycolor.default)(answersColor).setAlpha(0.1).toString()};

					border-color: ${answersColor};
					color: ${answersColor};

					${!isAnswerLocked && `&:hover {
						background: ${(0, _tinycolor.default)(answersColor).setAlpha(0.2).toString()};
					}`}

					&.selected {
						background: ${(0, _tinycolor.default)(answersColor).setAlpha(0.75).toString()};
						color: ${(0, _tinycolor.default)(answersColor).isDark() ? '#fff' : '#333'};

						.multipleChoice__optionKey {
							color: ${(0, _tinycolor.default)(answersColor).isDark() ? '#fff' : '#333'};

							border-color: ${(0, _tinycolor.default)(answersColor).isDark() ? '#fff' : '#333'};
						}
					}

					&.locked {
						pointer-events: none;
						cursor: default !important;
					}
				`),
    onClick: () => {
      if (!isAnswerLocked) {
        clickHandler();
        if (!selected) {
          setIsClicked(false);
          setTimeout(() => {
            setIsClicked(true);
          }, 0);
        }
      }
    }
  }, (0, _react.createElement)("span", {
    className: "multipleChoice__optionLabel"
  }, choiceLabel), (0, _react.createElement)("span", {
    className: (0, _classnames.default)('multipleChoice__optionKey', (0, _emotion.css)`
						background: ${(0, _tinycolor.default)(answersColor).setAlpha(0.1).toString()};
						color: ${answersColor};
						border-color: ${(0, _tinycolor.default)(answersColor).setAlpha(0.4).toString()};
					`)
  }, (0, _react.createElement)("span", {
    className: (0, _classnames.default)('multipleChoice__optionKeyTip', (0, _emotion.css)`
							background: ${answersColor};
							color: ${(0, _tinycolor.default)(answersColor).isDark() ? '#fff' : '#333'};
							${isAnswerLocked && `display: none !important;`}
						`)
  }, messages['label.hintText.key']), order));
};
var _default = exports.default = ChoiceItem;
//# sourceMappingURL=choice-item.js.map