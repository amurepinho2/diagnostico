{"ast":null,"code":"import { createElement, Fragment } from \"react\";\n/**\r\n * External Dependencies\r\n */\nimport classnames from 'classnames';\nimport { css } from 'emotion';\n\n/**\r\n * Internal Dependencies\r\n */\nimport Button from '../button';\nimport HTMLParser from '../html-parser';\nimport { __experimentalUseFieldRenderContext } from '../field-render';\nimport useBlockTypes from '../../hooks/use-block-types';\nimport useMessages from '../../hooks/use-messages';\nimport useBlockTheme from '../../hooks/use-block-theme';\nconst FieldAction = ({\n  clickHandler,\n  show\n}) => {\n  const messages = useMessages();\n  const {\n    blockName,\n    isSubmitBtnVisible,\n    attributes\n  } = __experimentalUseFieldRenderContext();\n  const theme = useBlockTheme(attributes?.themeId);\n  if (!blockName) return null;\n  const blockType = useBlockTypes()[blockName];\n  const isTouchScreen = 'ontouchstart' in window || navigator.maxTouchPoints > 0 ||\n  // @ts-expect-error\n  navigator.msMaxTouchPoints > 0;\n  return createElement(\"div\", {\n    className: classnames('renderer-core-field-action', {\n      'is-visible': isSubmitBtnVisible || show\n    })\n  }, blockType?.nextBtn ?\n  // @ts-expect-error\n  createElement(blockType.nextBtn, {\n    onClick: clickHandler\n  }) : createElement(Fragment, null, createElement(Button, {\n    theme: theme,\n    onClick: clickHandler\n  }, createElement(HTMLParser, {\n    value: typeof attributes?.nextBtnLabel === 'string' ? attributes.nextBtnLabel : messages['label.button.ok']\n  })), !isTouchScreen && createElement(\"div\", {\n    className: classnames('renderer-core-field-action__helper-text', css`\n\t\t\t\t\t\t\t\t\tcolor: ${theme.questionsColor};\n\t\t\t\t\t\t\t\t\tfont-size: 15px;\n\t\t\t\t\t\t\t\t`)\n  }, createElement(HTMLParser, {\n    value: messages['label.hintText.enter']\n  }))));\n};\nexport default FieldAction;","map":{"version":3,"names":["classnames","css","Button","HTMLParser","__experimentalUseFieldRenderContext","useBlockTypes","useMessages","useBlockTheme","FieldAction","clickHandler","show","messages","blockName","isSubmitBtnVisible","attributes","theme","themeId","blockType","isTouchScreen","window","navigator","maxTouchPoints","msMaxTouchPoints","createElement","className","nextBtn","onClick","Fragment","value","nextBtnLabel","questionsColor"],"sources":["/Users/amurepinho/Documents/GitHub/diagnostico/node_modules/@quillforms/renderer-core/build-module/components/field-action/@quillforms/renderer-core/src/components/field-action/index.tsx"],"sourcesContent":["/**\r\n * External Dependencies\r\n */\r\nimport classnames from 'classnames';\r\nimport { css } from 'emotion';\r\n\r\n/**\r\n * Internal Dependencies\r\n */\r\nimport Button from '../button';\r\nimport HTMLParser from '../html-parser';\r\nimport { __experimentalUseFieldRenderContext } from '../field-render';\r\nimport useBlockTypes from '../../hooks/use-block-types';\r\nimport useMessages from '../../hooks/use-messages';\r\nimport useBlockTheme from '../../hooks/use-block-theme';\r\n\r\nconst FieldAction = ( { clickHandler, show } ) => {\r\n\tconst messages = useMessages();\r\n\tconst { blockName, isSubmitBtnVisible, attributes } =\r\n\t\t__experimentalUseFieldRenderContext();\r\n\tconst theme = useBlockTheme( attributes?.themeId );\r\n\r\n\tif ( ! blockName ) return null;\r\n\tconst blockType = useBlockTypes()[ blockName ];\r\n\tconst isTouchScreen =\r\n\t\t'ontouchstart' in window ||\r\n\t\tnavigator.maxTouchPoints > 0 ||\r\n\t\t// @ts-expect-error\r\n\t\tnavigator.msMaxTouchPoints > 0;\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName={ classnames( 'renderer-core-field-action', {\r\n\t\t\t\t'is-visible': isSubmitBtnVisible || show,\r\n\t\t\t} ) }\r\n\t\t>\r\n\t\t\t{ blockType?.nextBtn ? (\r\n\t\t\t\t// @ts-expect-error\r\n\t\t\t\t<blockType.nextBtn onClick={ clickHandler } />\r\n\t\t\t) : (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<Button theme={ theme } onClick={ clickHandler }>\r\n\t\t\t\t\t\t<HTMLParser\r\n\t\t\t\t\t\t\tvalue={\r\n\t\t\t\t\t\t\t\ttypeof attributes?.nextBtnLabel === 'string'\r\n\t\t\t\t\t\t\t\t\t? attributes.nextBtnLabel\r\n\t\t\t\t\t\t\t\t\t: messages[ 'label.button.ok' ]\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t{ ! isTouchScreen && (\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclassName={ classnames(\r\n\t\t\t\t\t\t\t\t'renderer-core-field-action__helper-text',\r\n\t\t\t\t\t\t\t\tcss`\r\n\t\t\t\t\t\t\t\t\tcolor: ${ theme.questionsColor };\r\n\t\t\t\t\t\t\t\t\tfont-size: 15px;\r\n\t\t\t\t\t\t\t\t`\r\n\t\t\t\t\t\t\t) }\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<HTMLParser\r\n\t\t\t\t\t\t\t\tvalue={ messages[ 'label.hintText.enter' ] }\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t) }\r\n\t\t\t\t</>\r\n\t\t\t) }\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default FieldAction;\r\n"],"mappings":";AAAA;AACA;AACA;AACA,OAAOA,UAAU,MAAM,YAAY;AACnC,SAASC,GAAG,QAAQ,SAAS;;AAE7B;AACA;AACA;AACA,OAAOC,MAAM,MAAM,WAAW;AAC9B,OAAOC,UAAU,MAAM,gBAAgB;AACvC,SAASC,mCAAmC,QAAQ,iBAAiB;AACrE,OAAOC,aAAa,MAAM,6BAA6B;AACvD,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,aAAa,MAAM,6BAA6B;AAEvD,MAAMC,WAAW,GAAGA,CAAE;EAAEC,YAAY;EAAEC;AAAK,CAAC,KAAM;EACjD,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEM,SAAS;IAAEC,kBAAkB;IAAEC;EAAW,CAAC,GAClDV,mCAAmC,CAAC,CAAC;EACtC,MAAMW,KAAK,GAAGR,aAAa,CAAEO,UAAU,EAAEE,OAAQ,CAAC;EAElD,IAAK,CAAEJ,SAAS,EAAG,OAAO,IAAI;EAC9B,MAAMK,SAAS,GAAGZ,aAAa,CAAC,CAAC,CAAEO,SAAS,CAAE;EAC9C,MAAMM,aAAa,GAClB,cAAc,IAAIC,MAAM,IACxBC,SAAS,CAACC,cAAc,GAAG,CAAC;EAC5B;EACAD,SAAS,CAACE,gBAAgB,GAAG,CAAC;EAE/B,OACCC,aAAA;IACCC,SAAS,EAAGxB,UAAU,CAAE,4BAA4B,EAAE;MACrD,YAAY,EAAEa,kBAAkB,IAAIH;IACrC,CAAE;EAAG,GAEHO,SAAS,EAAEQ,OAAO;EACnB;EACAF,aAAA,CAACN,SAAS,CAACQ,OAAO;IAACC,OAAO,EAAGjB;EAAc,CAAE,CAAC,GAE9Cc,aAAA,CAAAI,QAAA,QACCJ,aAAA,CAACrB,MAAM;IAACa,KAAK,EAAGA,KAAO;IAACW,OAAO,EAAGjB;EAAc,GAC/Cc,aAAA,CAACpB,UAAU;IACVyB,KAAK,EACJ,OAAOd,UAAU,EAAEe,YAAY,KAAK,QAAQ,GACzCf,UAAU,CAACe,YAAY,GACvBlB,QAAQ,CAAE,iBAAiB;EAC9B,CACD,CACM,CAAC,EACP,CAAEO,aAAa,IAChBK,aAAA;IACCC,SAAS,EAAGxB,UAAU,CACrB,yCAAyC,EACzCC,GAAI;AACZ,kBAAmBc,KAAK,CAACe,cAAgB;AACzC;AACA,SACO;EAAG,GAEHP,aAAA,CAACpB,UAAU;IACVyB,KAAK,EAAGjB,QAAQ,CAAE,sBAAsB;EAAI,CAC5C,CACG,CAEL,CAEC,CAAC;AAER,CAAC;AAED,eAAeH,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}