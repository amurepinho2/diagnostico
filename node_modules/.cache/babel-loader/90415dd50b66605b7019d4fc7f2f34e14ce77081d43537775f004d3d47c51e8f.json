{"ast":null,"code":"/**\r\n * External Dependencies\r\n */\nimport { reduce, size, isEmpty, map } from 'lodash';\n/**\r\n * Internal Dependencies\r\n */\nimport { getBlockType } from './registration';\nexport function sanitizeBlockAttributes(blockName, attributes) {\n  // Get the block type\n  const blockType = getBlockType(blockName);\n  if (undefined === blockType) {\n    throw new Error(`Block type '${blockName}' is not registered.`);\n  }\n  // Ensure attributes contains only values defined by block type, and merge\n  // default values for missing attributes.\n  return reduce(blockType.attributes, (accumulator, schema, key) => {\n    const value = attributes[key];\n    if (undefined !== value) {\n      accumulator[key] = value;\n    } else if (schema.hasOwnProperty('default')) {\n      accumulator[key] = schema.default;\n    }\n    return accumulator;\n  }, {});\n}\n\n/**\r\n * Sanitize blocks\r\n * Transform unknwon blocks and sanitize block attributes\r\n *\r\n * @param {FormBlocks} blocks The form blocks to be sanitized\r\n *\r\n * @return {FormBlocks} The sanitized blocks\r\n */\nexport const sanitizeBlocks = blocks => {\n  if (isEmpty(blocks)) {\n    return [];\n  }\n  return map(blocks, block => {\n    if (getBlockType(block.name)) {\n      if (typeof block?.innerBlocks !== 'undefined' && size(block?.innerBlocks) > 0) {\n        return {\n          ...block,\n          attributes: sanitizeBlockAttributes(block.name, block.attributes ? block.attributes : {}),\n          innerBlocks: sanitizeBlocks(block.innerBlocks)\n        };\n      }\n      return {\n        ...block,\n        attributes: sanitizeBlockAttributes(block.name, block.attributes ? block.attributes : {})\n      };\n    }\n    return {\n      ...block,\n      name: 'unknown',\n      attributes: sanitizeBlockAttributes('unknown', block.attributes ? block.attributes : {})\n    };\n  });\n};","map":{"version":3,"names":["reduce","size","isEmpty","map","getBlockType","sanitizeBlockAttributes","blockName","attributes","blockType","undefined","Error","accumulator","schema","key","value","hasOwnProperty","default","sanitizeBlocks","blocks","block","name","innerBlocks"],"sources":["/Users/amurepinho/Documents/GitHub/diagnostico/node_modules/@quillforms/blocks/build-module/api/@quillforms/blocks/src/api/utils.ts"],"sourcesContent":["/**\r\n * External Dependencies\r\n */\r\nimport { reduce, size, isEmpty, map } from 'lodash';\r\nimport type { BlockAttributes, FormBlocks } from '@quillforms/types';\r\n\r\n/**\r\n * Internal Dependencies\r\n */\r\nimport { getBlockType } from './registration';\r\n\r\nexport function sanitizeBlockAttributes(\r\n\tblockName: string,\r\n\tattributes: BlockAttributes\r\n) {\r\n\t// Get the block type\r\n\tconst blockType = getBlockType( blockName );\r\n\r\n\tif ( undefined === blockType ) {\r\n\t\tthrow new Error( `Block type '${ blockName }' is not registered.` );\r\n\t}\r\n\t// Ensure attributes contains only values defined by block type, and merge\r\n\t// default values for missing attributes.\r\n\treturn reduce(\r\n\t\tblockType.attributes,\r\n\t\t( accumulator, schema, key ) => {\r\n\t\t\tconst value = attributes[ key ];\r\n\r\n\t\t\tif ( undefined !== value ) {\r\n\t\t\t\taccumulator[ key ] = value;\r\n\t\t\t} else if ( schema.hasOwnProperty( 'default' ) ) {\r\n\t\t\t\taccumulator[ key ] = schema.default;\r\n\t\t\t}\r\n\r\n\t\t\treturn accumulator;\r\n\t\t},\r\n\t\t{} as Record< string, unknown >\r\n\t);\r\n}\r\n\r\n/**\r\n * Sanitize blocks\r\n * Transform unknwon blocks and sanitize block attributes\r\n *\r\n * @param {FormBlocks} blocks The form blocks to be sanitized\r\n *\r\n * @return {FormBlocks} The sanitized blocks\r\n */\r\nexport const sanitizeBlocks = ( blocks: FormBlocks ): FormBlocks => {\r\n\tif ( isEmpty( blocks ) ) {\r\n\t\treturn [];\r\n\t}\r\n\r\n\treturn map( blocks, ( block ) => {\r\n\t\tif ( getBlockType( block.name ) ) {\r\n\t\t\tif( typeof( block?.innerBlocks ) !== 'undefined' && size( block?.innerBlocks ) > 0 ) { \r\n\t\t\t\treturn {\r\n\t\t\t\t\t...block,\r\n\t\t\t\t\tattributes: sanitizeBlockAttributes(\r\n\t\t\t\t\t\tblock.name,\r\n\t\t\t\t\t\tblock.attributes ? block.attributes : {}\r\n\t\t\t\t\t),\r\n\t\t\t\t\tinnerBlocks: sanitizeBlocks( block.innerBlocks )\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...block,\r\n\t\t\t\tattributes: sanitizeBlockAttributes(\r\n\t\t\t\t\tblock.name,\r\n\t\t\t\t\tblock.attributes ? block.attributes : {}\r\n\t\t\t\t),\r\n\t\t\t};\r\n\t\t}\r\n\t\treturn {\r\n\t\t\t...block,\r\n\t\t\tname: 'unknown',\r\n\t\t\tattributes: sanitizeBlockAttributes(\r\n\t\t\t\t'unknown',\r\n\t\t\t\tblock.attributes ? block.attributes : {}\r\n\t\t\t),\r\n\t\t};\r\n\t} );\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,MAAM,EAAEC,IAAI,EAAEC,OAAO,EAAEC,GAAG,QAAQ,QAAQ;AAGnD;AACA;AACA;AACA,SAASC,YAAY,QAAQ,gBAAgB;AAE7C,OAAO,SAASC,uBAAuBA,CACtCC,SAAiB,EACjBC,UAA2B,EAC1B;EACD;EACA,MAAMC,SAAS,GAAGJ,YAAY,CAAEE,SAAU,CAAC;EAE3C,IAAKG,SAAS,KAAKD,SAAS,EAAG;IAC9B,MAAM,IAAIE,KAAK,CAAG,eAAeJ,SAAW,sBAAsB,CAAC;EACpE;EACA;EACA;EACA,OAAON,MAAM,CACZQ,SAAS,CAACD,UAAU,EACpB,CAAEI,WAAW,EAAEC,MAAM,EAAEC,GAAG,KAAM;IAC/B,MAAMC,KAAK,GAAGP,UAAU,CAAEM,GAAG,CAAE;IAE/B,IAAKJ,SAAS,KAAKK,KAAK,EAAG;MAC1BH,WAAW,CAAEE,GAAG,CAAE,GAAGC,KAAK;IAC3B,CAAC,MAAM,IAAKF,MAAM,CAACG,cAAc,CAAE,SAAU,CAAC,EAAG;MAChDJ,WAAW,CAAEE,GAAG,CAAE,GAAGD,MAAM,CAACI,OAAO;IACpC;IAEA,OAAOL,WAAW;EACnB,CAAC,EACD,CAAC,CACF,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMM,cAAc,GAAKC,MAAkB,IAAkB;EACnE,IAAKhB,OAAO,CAAEgB,MAAO,CAAC,EAAG;IACxB,OAAO,EAAE;EACV;EAEA,OAAOf,GAAG,CAAEe,MAAM,EAAIC,KAAK,IAAM;IAChC,IAAKf,YAAY,CAAEe,KAAK,CAACC,IAAK,CAAC,EAAG;MACjC,IAAI,OAAQD,KAAK,EAAEE,WAAa,KAAK,WAAW,IAAIpB,IAAI,CAAEkB,KAAK,EAAEE,WAAY,CAAC,GAAG,CAAC,EAAG;QACpF,OAAO;UACN,GAAGF,KAAK;UACRZ,UAAU,EAAEF,uBAAuB,CAClCc,KAAK,CAACC,IAAI,EACVD,KAAK,CAACZ,UAAU,GAAGY,KAAK,CAACZ,UAAU,GAAG,CAAC,CACxC,CAAC;UACDc,WAAW,EAAEJ,cAAc,CAAEE,KAAK,CAACE,WAAY;QAChD,CAAC;MACF;MACA,OAAO;QACN,GAAGF,KAAK;QACRZ,UAAU,EAAEF,uBAAuB,CAClCc,KAAK,CAACC,IAAI,EACVD,KAAK,CAACZ,UAAU,GAAGY,KAAK,CAACZ,UAAU,GAAG,CAAC,CACxC;MACD,CAAC;IACF;IACA,OAAO;MACN,GAAGY,KAAK;MACRC,IAAI,EAAE,SAAS;MACfb,UAAU,EAAEF,uBAAuB,CAClC,SAAS,EACTc,KAAK,CAACZ,UAAU,GAAGY,KAAK,CAACZ,UAAU,GAAG,CAAC,CACxC;IACD,CAAC;EACF,CAAE,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}