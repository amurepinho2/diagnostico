{"ast":null,"code":"/**\n * adds a bindGlobal method to Mousetrap that allows you to\n * bind specific keyboard shortcuts that will still work\n * inside a text input field\n *\n * usage:\n * Mousetrap.bindGlobal('ctrl+s', _saveChanges);\n */\n/* global Mousetrap:true */\n(function (Mousetrap) {\n  if (!Mousetrap) {\n    return;\n  }\n  var _globalCallbacks = {};\n  var _originalStopCallback = Mousetrap.prototype.stopCallback;\n  Mousetrap.prototype.stopCallback = function (e, element, combo, sequence) {\n    var self = this;\n    if (self.paused) {\n      return true;\n    }\n    if (_globalCallbacks[combo] || _globalCallbacks[sequence]) {\n      return false;\n    }\n    return _originalStopCallback.call(self, e, element, combo);\n  };\n  Mousetrap.prototype.bindGlobal = function (keys, callback, action) {\n    var self = this;\n    self.bind(keys, callback, action);\n    if (keys instanceof Array) {\n      for (var i = 0; i < keys.length; i++) {\n        _globalCallbacks[keys[i]] = true;\n      }\n      return;\n    }\n    _globalCallbacks[keys] = true;\n  };\n  Mousetrap.init();\n})(typeof Mousetrap !== \"undefined\" ? Mousetrap : undefined);","map":{"version":3,"names":["Mousetrap","_globalCallbacks","_originalStopCallback","prototype","stopCallback","e","element","combo","sequence","self","paused","call","bindGlobal","keys","callback","action","bind","Array","i","length","init","undefined"],"sources":["/Users/amurepinho/Documents/GitHub/diagnostico/node_modules/mousetrap/plugins/global-bind/mousetrap-global-bind.js"],"sourcesContent":["/**\n * adds a bindGlobal method to Mousetrap that allows you to\n * bind specific keyboard shortcuts that will still work\n * inside a text input field\n *\n * usage:\n * Mousetrap.bindGlobal('ctrl+s', _saveChanges);\n */\n/* global Mousetrap:true */\n(function(Mousetrap) {\n    if (! Mousetrap) {\n        return;\n    }\n    var _globalCallbacks = {};\n    var _originalStopCallback = Mousetrap.prototype.stopCallback;\n\n    Mousetrap.prototype.stopCallback = function(e, element, combo, sequence) {\n        var self = this;\n\n        if (self.paused) {\n            return true;\n        }\n\n        if (_globalCallbacks[combo] || _globalCallbacks[sequence]) {\n            return false;\n        }\n\n        return _originalStopCallback.call(self, e, element, combo);\n    };\n\n    Mousetrap.prototype.bindGlobal = function(keys, callback, action) {\n        var self = this;\n        self.bind(keys, callback, action);\n\n        if (keys instanceof Array) {\n            for (var i = 0; i < keys.length; i++) {\n                _globalCallbacks[keys[i]] = true;\n            }\n            return;\n        }\n\n        _globalCallbacks[keys] = true;\n    };\n\n    Mousetrap.init();\n}) (typeof Mousetrap !== \"undefined\" ? Mousetrap : undefined);\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,UAASA,SAAS,EAAE;EACjB,IAAI,CAAEA,SAAS,EAAE;IACb;EACJ;EACA,IAAIC,gBAAgB,GAAG,CAAC,CAAC;EACzB,IAAIC,qBAAqB,GAAGF,SAAS,CAACG,SAAS,CAACC,YAAY;EAE5DJ,SAAS,CAACG,SAAS,CAACC,YAAY,GAAG,UAASC,CAAC,EAAEC,OAAO,EAAEC,KAAK,EAAEC,QAAQ,EAAE;IACrE,IAAIC,IAAI,GAAG,IAAI;IAEf,IAAIA,IAAI,CAACC,MAAM,EAAE;MACb,OAAO,IAAI;IACf;IAEA,IAAIT,gBAAgB,CAACM,KAAK,CAAC,IAAIN,gBAAgB,CAACO,QAAQ,CAAC,EAAE;MACvD,OAAO,KAAK;IAChB;IAEA,OAAON,qBAAqB,CAACS,IAAI,CAACF,IAAI,EAAEJ,CAAC,EAAEC,OAAO,EAAEC,KAAK,CAAC;EAC9D,CAAC;EAEDP,SAAS,CAACG,SAAS,CAACS,UAAU,GAAG,UAASC,IAAI,EAAEC,QAAQ,EAAEC,MAAM,EAAE;IAC9D,IAAIN,IAAI,GAAG,IAAI;IACfA,IAAI,CAACO,IAAI,CAACH,IAAI,EAAEC,QAAQ,EAAEC,MAAM,CAAC;IAEjC,IAAIF,IAAI,YAAYI,KAAK,EAAE;MACvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,IAAI,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;QAClCjB,gBAAgB,CAACY,IAAI,CAACK,CAAC,CAAC,CAAC,GAAG,IAAI;MACpC;MACA;IACJ;IAEAjB,gBAAgB,CAACY,IAAI,CAAC,GAAG,IAAI;EACjC,CAAC;EAEDb,SAAS,CAACoB,IAAI,CAAC,CAAC;AACpB,CAAC,EAAG,OAAOpB,SAAS,KAAK,WAAW,GAAGA,SAAS,GAAGqB,SAAS,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}