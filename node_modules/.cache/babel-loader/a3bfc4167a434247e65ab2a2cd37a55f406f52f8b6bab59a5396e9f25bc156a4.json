{"ast":null,"code":"/* eslint-disable no-nested-ternary */\n/**\r\n * QuillForms Dependencies\r\n */\n\n/**\r\n * WordPress Dependencies\r\n */\nimport { combineReducers } from '@wordpress/data';\nimport { forEach, some, size } from 'lodash';\n\n/**\r\n * External dependencies\r\n */\n\n/**\r\n * Internal Dependencies\r\n */\nimport { GO_NEXT, GO_PREV, COMPLETE_FORM, SET_SWIPER_STATE, GO_TO_BLOCK, SET_CORRECT_INCORRECT_DISPLAY, SET_SUBMISSION_ERR, SET_FIELD_ANSWER, INSERT_EMPTY_FIELD_ANSWER, SET_IS_FIELD_VALID, SET_IS_FIELD_ANSWERED, SET_IS_FIELD_PENDING, SET_FIELD_PENDING_MSG, SET_IS_FIELD_ANSWER_CORRECT, SET_FIELD_VALIDATION_ERR, RESET_ANSWERS, SET_IS_REVIEWING, SET_IS_SUBMITTING, SET_PAYMENT_DATA, SET_IS_FOCUSED, SET_FOOTER_DISPLAY, SET_IS_CURRENT_BLOCK_SAFE_TO_SWIPE, SET_IS_FIELD_ANSWER_LOCKED, SET_IS_FIELD_CORRECT_INCORRECT_SCREEN_DISPLAYED, SET_THANKYOU_SCREENS } from './constants';\nconst initialState = {\n  walkPath: [],\n  welcomeScreens: [],\n  thankyouScreens: [],\n  currentBlockId: undefined,\n  nextBlockId: undefined,\n  lastActiveBlockId: undefined,\n  prevBlockId: undefined,\n  correctIncorrectDisplay: false,\n  canSwipeNext: false,\n  canSwipePrev: false,\n  isCurrentBlockSafeToSwipe: true,\n  isAnimating: true,\n  isThankyouScreenActive: false,\n  isWelcomeScreenActive: false,\n  isReviewing: false\n};\nconst swiper = (state = initialState, action) => {\n  const {\n    walkPath,\n    isAnimating,\n    currentBlockId,\n    nextBlockId,\n    prevBlockId,\n    thankyouScreens,\n    correctIncorrectDisplay\n  } = state;\n  switch (action.type) {\n    case SET_SWIPER_STATE:\n      {\n        const newSwiperState = action.swiperState;\n        let validBlocksStructure = true;\n        forEach(['walkPath', 'welcomeScreens', 'thankyouScreens'], blockCat => {\n          if (newSwiperState[blockCat]) {\n            const newBlockCat = newSwiperState[blockCat];\n            if (!Array.isArray(newBlockCat)) {\n              validBlocksStructure = false;\n              return;\n            }\n\n            // check if  structure isn't correct\n            if (newBlockCat.length > 0) {\n              forEach(newBlockCat, item => {\n                if (typeof item === 'object' && item != null && item.id && typeof item.id === 'string') {\n                  if (size(item.attributes) > 0 && typeof item.attributes !== 'object') {\n                    validBlocksStructure = false;\n                    return;\n                  }\n                  if (blockCat === 'walkPath') {\n                    // Check if the block has a name or it is a thank you screen or default thank you screen\n                    if ((!item.hasOwnProperty('name') || typeof item.name !== 'string') && !some(newSwiperState.thankyouScreens, block => block.id === item.id) && item.id !== 'default_thankyou_screen') {\n                      validBlocksStructure = false;\n                    }\n                  }\n                } else {\n                  validBlocksStructure = false;\n                }\n              });\n            }\n          }\n        });\n        if (!validBlocksStructure) {\n          return state;\n        }\n        const newWalkPath = newSwiperState.walkPath ? newSwiperState.walkPath : walkPath;\n        const newWelcomeScreens = newSwiperState.welcomeScreens ? newSwiperState.welcomeScreens : state.welcomeScreens;\n        const newThanksScreens = newSwiperState.thankyouScreens ? newSwiperState.thankyouScreens : state.thankyouScreens;\n        // If  new current block id or new next block id or new prev block id or last active block id aren't\n        // in the new walkPath\n        let checkCorrectIds = true;\n        ['currentBlockId', 'nextBlockId', 'prevBlockId', 'lastActiveBlockId'].forEach(prop => {\n          const allBlocks = [...newWalkPath, ...newWelcomeScreens, ...newThanksScreens];\n          if (newSwiperState[prop] && !some(allBlocks, block => block.id === newSwiperState[prop] || newSwiperState[prop] === 'default_thankyou_screen')) {\n            checkCorrectIds = false;\n          }\n        });\n        if (!checkCorrectIds) return state;\n        let correctBooleans = true;\n\n        // if typeof  new boolean props isn't boolean.\n        ['isAnimating', 'canSwipeNext', 'canSwipePrev', 'isThankyouScreenActive', 'isWelcomeScreenActive'].forEach(prop => {\n          if (newSwiperState[prop] && typeof newSwiperState[prop] !== 'boolean') {\n            correctBooleans = false;\n          }\n        });\n        if (!correctBooleans) {\n          return state;\n        }\n        const newCurrentBlockId = newSwiperState.currentBlockId ? newSwiperState.currentBlockId : currentBlockId;\n        const isFirstField = newWalkPath?.length > 0 && newWalkPath[0].id == newCurrentBlockId;\n        const isLastField = newWalkPath?.length > 0 && newWalkPath[newWalkPath.length - 1].id == newCurrentBlockId;\n        return {\n          ...state,\n          ...newSwiperState,\n          canSwipeNext: newSwiperState.canSwipeNext === undefined ? state.canSwipeNext : newSwiperState.canSwipeNext === true && isLastField ? false : newSwiperState.canSwipeNext,\n          canSwipePrev: newSwiperState.canSwipePrev === undefined ? state.canSwipePrev : newSwiperState.canSwipePrev === true && isFirstField ? false : newSwiperState.canSwipePrev,\n          isWelcomeScreenActive: newWelcomeScreens.length && some(newWelcomeScreens, screen => screen.id === newCurrentBlockId) ? true : false,\n          isThankyouScreenActive: some(newThanksScreens, screen => screen.id === newCurrentBlockId) || 'default_thankyou_screen' === newCurrentBlockId ? true : false\n        };\n      }\n    case GO_NEXT:\n      {\n        if (isAnimating || correctIncorrectDisplay) return state;\n        const nextFieldType = walkPath.find(block => block.id === nextBlockId)?.name;\n        if (!nextFieldType || nextFieldType === 'thankyou-screen') return state;\n        // const isThereNextField =\n        // \twalkPath.filter(\n        // \t\t( block ) =>\n        // \t\t\tblock.name !== 'welcome-screen' &&\n        // \t\t\tblock.name !== 'thankyou-screen' &&\n        // \t\t\tblock.id === nextBlockId\n        // \t).length > 0;\n        // const isReallyLastField =\n        // \twalkPath?.length > 0 &&\n        // \twalkPath[ walkPath.length - 1 ].id === currentBlockId &&\n        // \t! isThereNextField;\n        // if ( isReallyLastField ) return state;\n        const currentFieldIndex = walkPath.findIndex(field => field.id === currentBlockId);\n        let $newCurrentBlockId = nextBlockId;\n        // To check if the new current block is within the path, if it isn't, navigate to submission screen.\n        // This should apply only when the next block is before the current block.\n        const newCurrentFieldIndex = walkPath.findIndex($field => $field.id === $newCurrentBlockId);\n        if (newCurrentFieldIndex === -1 || newCurrentFieldIndex === currentFieldIndex) {\n          $newCurrentBlockId = undefined;\n        }\n        return {\n          ...state,\n          canSwipeNext: !$newCurrentBlockId ? false : true,\n          canSwipePrev: true,\n          currentBlockId: $newCurrentBlockId,\n          prevBlockId: $newCurrentBlockId ? walkPath[newCurrentFieldIndex - 1] ? walkPath[newCurrentFieldIndex - 1].id : undefined : walkPath[walkPath.length - 1].id,\n          lastActiveBlockId: currentBlockId,\n          nextBlockId: newCurrentFieldIndex !== -1 ? walkPath[newCurrentFieldIndex + 1] ? walkPath[newCurrentFieldIndex + 1].id : undefined : nextBlockId,\n          isAnimating: true,\n          isThankyouScreenActive: false\n        };\n      }\n    case GO_PREV:\n      {\n        const isFirstField = walkPath?.length > 0 && walkPath[0].id === currentBlockId;\n        if (isAnimating || isFirstField || correctIncorrectDisplay) return state;\n        const currentFieldIndex = walkPath.findIndex(field => field.id === currentBlockId);\n        return {\n          ...state,\n          canSwipePrev: walkPath[currentFieldIndex - 2] ? true : false,\n          canSwipeNext: true,\n          currentBlockId: prevBlockId,\n          lastActiveBlockId: currentBlockId,\n          nextBlockId: currentBlockId,\n          prevBlockId: walkPath[currentFieldIndex - 2]?.id ? walkPath[currentFieldIndex - 2].id : undefined,\n          isAnimating: true,\n          isThankyouScreenActive: false\n        };\n      }\n    case SET_CORRECT_INCORRECT_DISPLAY:\n      {\n        const {\n          val\n        } = action;\n        return {\n          ...state,\n          correctIncorrectDisplay: val\n        };\n      }\n    case SET_IS_CURRENT_BLOCK_SAFE_TO_SWIPE:\n      {\n        const {\n          val\n        } = action;\n        return {\n          ...state,\n          isCurrentBlockSafeToSwipe: val\n        };\n      }\n    case GO_TO_BLOCK:\n      {\n        let {\n          id,\n          forceUpdateState\n        } = action;\n        if (currentBlockId === id && !forceUpdateState) return state;\n        const isTheBlockWelcomeScreenBlock = state.welcomeScreens.some(screen => screen.id === id);\n        const isTheBlockThankyouScreenBlock = state.thankyouScreens.some(screen => screen.id === id);\n        if (isTheBlockThankyouScreenBlock || isTheBlockWelcomeScreenBlock) {\n          return {\n            ...state,\n            currentBlockId: id,\n            isAnimating: true,\n            canSwipeNext: false,\n            canSwipePrev: false,\n            nextBlockId: undefined,\n            prevBlockId: undefined,\n            lastActiveBlockId: currentBlockId,\n            isWelcomeScreenActive: isTheBlockWelcomeScreenBlock,\n            isThankyouScreenActive: isTheBlockThankyouScreenBlock\n          };\n        }\n        let fieldIndex = state.walkPath.findIndex(field => field.id === id);\n\n        // If invalid parent block, try to search for inner blocks.\n        if (fieldIndex === -1 && !isTheBlockWelcomeScreenBlock && !isTheBlockThankyouScreenBlock) {\n          const groupBlocks = state.walkPath.filter(field => field.name === 'group');\n          let parentId;\n          forEach(groupBlocks, groupBlock => {\n            if (groupBlock.innerBlocks) {\n              const childIndex = groupBlock.innerBlocks.findIndex(childBlock => childBlock.id === id);\n              if (childIndex !== -1) {\n                parentId = groupBlock.id;\n              }\n            }\n          });\n          if (!parentId) {\n            return state;\n          }\n          id = parentId;\n          fieldIndex = state.walkPath.findIndex(field => field.id === id);\n        }\n        return {\n          ...state,\n          currentBlockId: id,\n          isAnimating: true,\n          canSwipeNext: walkPath[fieldIndex + 1] ? true : false,\n          canSwipePrev: walkPath[fieldIndex - 1] ? true : false,\n          nextBlockId: walkPath[fieldIndex + 1] ? walkPath[fieldIndex + 1].id : undefined,\n          prevBlockId: walkPath[fieldIndex - 1] ? walkPath[fieldIndex - 1].id : undefined,\n          lastActiveBlockId: currentBlockId,\n          isWelcomeScreenActive: false,\n          isThankyouScreenActive: false\n        };\n      }\n    case SET_THANKYOU_SCREENS:\n      {\n        return {\n          ...state,\n          thankyouScreens: action.screens\n        };\n      }\n    case COMPLETE_FORM:\n      {\n        return {\n          ...state,\n          canSwipeNext: false,\n          canSwipePrev: false,\n          isThankyouScreenActive: true,\n          currentBlockId: nextBlockId && state.thankyouScreens.find(screen => screen.id === nextBlockId) ? nextBlockId : thankyouScreens[0]?.id ? thankyouScreens[0].id : 'default_thankyou_screen',\n          prevBlockId: undefined,\n          nextBlockId: undefined,\n          lastActiveBlockId: undefined,\n          isReviewing: false\n        };\n      }\n  }\n  return state;\n};\nconst isFocused = (state = false, action) => {\n  switch (action.type) {\n    case SET_IS_FOCUSED:\n      {\n        if (typeof action.val !== 'boolean') {\n          return state;\n        }\n        return action.val;\n      }\n  }\n  return state;\n};\nconst footerDisplay = (state = true, action) => {\n  switch (action.type) {\n    case SET_FOOTER_DISPLAY:\n      {\n        if (typeof action.val !== 'boolean') {\n          return state;\n        }\n        return action.val;\n      }\n  }\n  return state;\n};\nconst submit = (state = {\n  isSubmitting: false,\n  isReviewing: false,\n  submissionErr: '',\n  paymentData: null\n}, action) => {\n  switch (action.type) {\n    case COMPLETE_FORM:\n      {\n        return {\n          isSubmitting: false,\n          isReviewing: false,\n          submissionErr: '',\n          paymentData: null\n        };\n      }\n    case SET_IS_REVIEWING:\n      {\n        const {\n          val\n        } = action;\n        return {\n          ...state,\n          isReviewing: val\n        };\n      }\n    case SET_IS_SUBMITTING:\n      {\n        const {\n          val\n        } = action;\n        return {\n          ...state,\n          isSubmitting: val,\n          submissionErr: ''\n        };\n      }\n    case SET_SUBMISSION_ERR:\n      {\n        // Make sure this action is called while the form is submitting already, otherwhise, do nothing.\n        if (!state.isSubmitting) return state;\n        const {\n          val\n        } = action;\n        return {\n          ...state,\n          isSubmitting: false,\n          submissionErr: val\n        };\n      }\n    case SET_PAYMENT_DATA:\n      {\n        return {\n          ...state,\n          paymentData: action.data\n        };\n      }\n  }\n  return state;\n};\nconst answers = (state = {}, action) => {\n  switch (action.type) {\n    // Insert Empty Field Answer\n    case INSERT_EMPTY_FIELD_ANSWER:\n      {\n        const {\n          id,\n          blockName\n        } = action;\n        const answers = {\n          ...state\n        };\n        if (!answers[id]) {\n          answers[id] = {\n            value: undefined,\n            isValid: true,\n            isAnswered: false,\n            isPending: false,\n            pendingMsg: undefined,\n            validationErr: undefined,\n            isCorrect: undefined,\n            isCorrectIncorrectScreenDisplayed: false,\n            isLocked: false,\n            blockName\n          };\n        }\n        return answers;\n      }\n\n    // SET FIELD ANSWER\n    case SET_FIELD_ANSWER:\n      {\n        const {\n          id,\n          val\n        } = action;\n        // If the field id is incorrect or the value passed is the same value, return same state.\n        if (val === state[id]?.value) {\n          return state;\n        }\n        return {\n          ...state,\n          [id]: {\n            ...state[id],\n            value: val\n          }\n        };\n      }\n    case RESET_ANSWERS:\n      {\n        return {};\n      }\n\n    // SET IS FIELD VALID\n    case SET_IS_FIELD_VALID:\n      {\n        const {\n          id,\n          val\n        } = action;\n        // If the field id is incorrect or the value passed is the same value, return same state.\n        if (!state[id] || val === state[id].isValid) {\n          return state;\n        }\n        return {\n          ...state,\n          [id]: {\n            ...state[id],\n            isValid: val\n          }\n        };\n      }\n\n    // SET IS FIELD ANSWERED\n    case SET_IS_FIELD_ANSWERED:\n      {\n        const {\n          id,\n          val\n        } = action;\n        // If the field id is incorrect or the value passed is the same value, return same state.\n        if (!state[id] || val === state[id].isAnswered) {\n          return state;\n        }\n        return {\n          ...state,\n          [id]: {\n            ...state[id],\n            isAnswered: val\n          }\n        };\n      }\n\n    // SET IS FIELD ANSWER CORRECT\n    case SET_IS_FIELD_ANSWER_CORRECT:\n      {\n        const {\n          id,\n          val\n        } = action;\n        // If the field id is incorrect or the value passed is the same value, return same state.\n        if (!state[id] || val === state[id].isCorrect) {\n          return state;\n        }\n        return {\n          ...state,\n          [id]: {\n            ...state[id],\n            isCorrect: val\n          }\n        };\n      }\n    case SET_IS_FIELD_ANSWER_LOCKED:\n      {\n        const {\n          id,\n          val\n        } = action;\n        // .\n        if (!state[id] || val === state[id].isLocked) {\n          return state;\n        }\n        return {\n          ...state,\n          [id]: {\n            ...state[id],\n            isLocked: val\n          }\n        };\n      }\n    case SET_IS_FIELD_CORRECT_INCORRECT_SCREEN_DISPLAYED:\n      {\n        const {\n          id,\n          val\n        } = action;\n        // .\n        if (!state[id] || val === state[id].isCorrectIncorrectScreenDisplayed) {\n          return state;\n        }\n        return {\n          ...state,\n          [id]: {\n            ...state[id],\n            isCorrectIncorrectScreenDisplayed: val\n          }\n        };\n      }\n\n    // SET IS FIELD PENDING\n    case SET_IS_FIELD_PENDING:\n      {\n        const {\n          id,\n          val\n        } = action;\n        // If the field id is incorrect or the value passed is the same value, return same state.\n        if (!state[id] || val === state[id].isPending) {\n          return state;\n        }\n        return {\n          ...state,\n          [id]: {\n            ...state[id],\n            isPending: val\n          }\n        };\n      }\n\n    // SET FIELD PENDING MSG\n    case SET_FIELD_PENDING_MSG:\n      {\n        const {\n          id,\n          val\n        } = action;\n        // If the field id is incorrect or the value passed is the same value, return same state.\n        if (!state[id] || val === state[id].pendingMsg) {\n          return state;\n        }\n        return {\n          ...state,\n          [id]: {\n            ...state[id],\n            pendingMsg: val\n          }\n        };\n      }\n\n    // SET FIELD VALIDATION ERR\n    case SET_FIELD_VALIDATION_ERR:\n      {\n        const {\n          id,\n          val\n        } = action;\n        // If the field id is incorrect or the value passed is the same value, return same state.\n        if (!state[id] || val === state[id].validationErr) {\n          return state;\n        }\n        return {\n          ...state,\n          [id]: {\n            ...state[id],\n            validationErr: val\n          }\n        };\n      }\n  }\n  return state;\n};\n\n// @ts-ignore\nconst RendererCoreReducer = combineReducers({\n  answers,\n  footerDisplay,\n  isFocused,\n  submit,\n  swiper\n});\nexport default RendererCoreReducer;","map":{"version":3,"names":["combineReducers","forEach","some","size","GO_NEXT","GO_PREV","COMPLETE_FORM","SET_SWIPER_STATE","GO_TO_BLOCK","SET_CORRECT_INCORRECT_DISPLAY","SET_SUBMISSION_ERR","SET_FIELD_ANSWER","INSERT_EMPTY_FIELD_ANSWER","SET_IS_FIELD_VALID","SET_IS_FIELD_ANSWERED","SET_IS_FIELD_PENDING","SET_FIELD_PENDING_MSG","SET_IS_FIELD_ANSWER_CORRECT","SET_FIELD_VALIDATION_ERR","RESET_ANSWERS","SET_IS_REVIEWING","SET_IS_SUBMITTING","SET_PAYMENT_DATA","SET_IS_FOCUSED","SET_FOOTER_DISPLAY","SET_IS_CURRENT_BLOCK_SAFE_TO_SWIPE","SET_IS_FIELD_ANSWER_LOCKED","SET_IS_FIELD_CORRECT_INCORRECT_SCREEN_DISPLAYED","SET_THANKYOU_SCREENS","initialState","walkPath","welcomeScreens","thankyouScreens","currentBlockId","undefined","nextBlockId","lastActiveBlockId","prevBlockId","correctIncorrectDisplay","canSwipeNext","canSwipePrev","isCurrentBlockSafeToSwipe","isAnimating","isThankyouScreenActive","isWelcomeScreenActive","isReviewing","swiper","state","action","type","newSwiperState","swiperState","validBlocksStructure","blockCat","newBlockCat","Array","isArray","length","item","id","attributes","hasOwnProperty","name","block","newWalkPath","newWelcomeScreens","newThanksScreens","checkCorrectIds","prop","allBlocks","correctBooleans","newCurrentBlockId","isFirstField","isLastField","screen","nextFieldType","find","currentFieldIndex","findIndex","field","$newCurrentBlockId","newCurrentFieldIndex","$field","val","forceUpdateState","isTheBlockWelcomeScreenBlock","isTheBlockThankyouScreenBlock","fieldIndex","groupBlocks","filter","parentId","groupBlock","innerBlocks","childIndex","childBlock","screens","isFocused","footerDisplay","submit","isSubmitting","submissionErr","paymentData","data","answers","blockName","value","isValid","isAnswered","isPending","pendingMsg","validationErr","isCorrect","isCorrectIncorrectScreenDisplayed","isLocked","RendererCoreReducer"],"sources":["/Users/amurepinho/Documents/GitHub/diagnostico/node_modules/@quillforms/renderer-core/build-module/store/@quillforms/renderer-core/src/store/reducer.ts"],"sourcesContent":["/* eslint-disable no-nested-ternary */\r\n/**\r\n * QuillForms Dependencies\r\n */\r\nimport { FormBlock } from '@quillforms/types';\r\n\r\n/**\r\n * WordPress Dependencies\r\n */\r\nimport { combineReducers } from '@wordpress/data';\r\nimport { forEach, some, size } from 'lodash';\r\n\r\n/**\r\n * External dependencies\r\n */\r\nimport type { Reducer } from 'redux';\r\n\r\n/**\r\n * Internal Dependencies\r\n */\r\nimport {\r\n\tGO_NEXT,\r\n\tGO_PREV,\r\n\tCOMPLETE_FORM,\r\n\tSET_SWIPER_STATE,\r\n\tGO_TO_BLOCK,\r\n\tSET_CORRECT_INCORRECT_DISPLAY,\r\n\tSET_SUBMISSION_ERR,\r\n\tSET_FIELD_ANSWER,\r\n\tINSERT_EMPTY_FIELD_ANSWER,\r\n\tSET_IS_FIELD_VALID,\r\n\tSET_IS_FIELD_ANSWERED,\r\n\tSET_IS_FIELD_PENDING,\r\n\tSET_FIELD_PENDING_MSG,\r\n\tSET_IS_FIELD_ANSWER_CORRECT,\r\n\tSET_FIELD_VALIDATION_ERR,\r\n\tRESET_ANSWERS,\r\n\tSET_IS_REVIEWING,\r\n\tSET_IS_SUBMITTING,\r\n\tSET_PAYMENT_DATA,\r\n\tSET_IS_FOCUSED,\r\n\tSET_FOOTER_DISPLAY,\r\n\tSET_IS_CURRENT_BLOCK_SAFE_TO_SWIPE,\r\n\tSET_IS_FIELD_ANSWER_LOCKED,\r\n\tSET_IS_FIELD_CORRECT_INCORRECT_SCREEN_DISPLAYED,\r\n\tSET_THANKYOU_SCREENS,\r\n} from './constants';\r\nimport type {\r\n\tSwiperState,\r\n\tSwiperActionTypes,\r\n\tRendererAnswersActionTypes,\r\n\tRendererAnswersState,\r\n\tScreen,\r\n\tSubmissionState,\r\n\tSubmitActionTypes,\r\n} from './types';\r\n\r\nconst initialState: SwiperState = {\r\n\twalkPath: [],\r\n\twelcomeScreens: [],\r\n\tthankyouScreens: [],\r\n\tcurrentBlockId: undefined,\r\n\tnextBlockId: undefined,\r\n\tlastActiveBlockId: undefined,\r\n\tprevBlockId: undefined,\r\n\tcorrectIncorrectDisplay: false,\r\n\tcanSwipeNext: false,\r\n\tcanSwipePrev: false,\r\n\tisCurrentBlockSafeToSwipe: true,\r\n\tisAnimating: true,\r\n\tisThankyouScreenActive: false,\r\n\tisWelcomeScreenActive: false,\r\n\tisReviewing: false,\r\n};\r\n\r\nconst swiper: Reducer<SwiperState, SwiperActionTypes> = (\r\n\tstate = initialState,\r\n\taction\r\n) => {\r\n\tconst {\r\n\t\twalkPath,\r\n\t\tisAnimating,\r\n\t\tcurrentBlockId,\r\n\t\tnextBlockId,\r\n\t\tprevBlockId,\r\n\t\tthankyouScreens,\r\n\t\tcorrectIncorrectDisplay\r\n\t} = state;\r\n\tswitch (action.type) {\r\n\t\tcase SET_SWIPER_STATE: {\r\n\t\t\tconst newSwiperState = action.swiperState;\r\n\t\t\tlet validBlocksStructure = true;\r\n\t\t\tforEach(\r\n\t\t\t\t['walkPath', 'welcomeScreens', 'thankyouScreens'],\r\n\t\t\t\t(blockCat) => {\r\n\t\t\t\t\tif (newSwiperState[blockCat]) {\r\n\t\t\t\t\t\tconst newBlockCat = newSwiperState[blockCat];\r\n\t\t\t\t\t\tif (!Array.isArray(newBlockCat)) {\r\n\t\t\t\t\t\t\tvalidBlocksStructure = false;\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// check if  structure isn't correct\r\n\t\t\t\t\t\tif (newBlockCat.length > 0) {\r\n\t\t\t\t\t\t\tforEach(newBlockCat, (item) => {\r\n\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\ttypeof item === 'object' &&\r\n\t\t\t\t\t\t\t\t\titem != null &&\r\n\t\t\t\t\t\t\t\t\titem.id &&\r\n\t\t\t\t\t\t\t\t\ttypeof item.id === 'string'\r\n\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t\tsize(item.attributes) > 0 &&\r\n\t\t\t\t\t\t\t\t\t\ttypeof item.attributes !== 'object'\r\n\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\tvalidBlocksStructure = false;\r\n\t\t\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tif (blockCat === 'walkPath') {\r\n\t\t\t\t\t\t\t\t\t\t// Check if the block has a name or it is a thank you screen or default thank you screen\r\n\t\t\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t\t\t(!item.hasOwnProperty('name') ||\r\n\t\t\t\t\t\t\t\t\t\t\t\ttypeof item.name !==\r\n\t\t\t\t\t\t\t\t\t\t\t\t'string') &&\r\n\t\t\t\t\t\t\t\t\t\t\t!some(\r\n\t\t\t\t\t\t\t\t\t\t\t\tnewSwiperState.thankyouScreens,\r\n\t\t\t\t\t\t\t\t\t\t\t\t(block) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tblock.id === item.id\r\n\t\t\t\t\t\t\t\t\t\t\t) &&\r\n\t\t\t\t\t\t\t\t\t\t\titem.id !==\r\n\t\t\t\t\t\t\t\t\t\t\t'default_thankyou_screen'\r\n\t\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\t\tvalidBlocksStructure = false;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tvalidBlocksStructure = false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\tif (!validBlocksStructure) {\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tconst newWalkPath = newSwiperState.walkPath\r\n\t\t\t\t? newSwiperState.walkPath\r\n\t\t\t\t: walkPath;\r\n\r\n\t\t\tconst newWelcomeScreens = newSwiperState.welcomeScreens\r\n\t\t\t\t? newSwiperState.welcomeScreens\r\n\t\t\t\t: state.welcomeScreens;\r\n\r\n\t\t\tconst newThanksScreens = newSwiperState.thankyouScreens\r\n\t\t\t\t? newSwiperState.thankyouScreens\r\n\t\t\t\t: state.thankyouScreens;\r\n\t\t\t// If  new current block id or new next block id or new prev block id or last active block id aren't\r\n\t\t\t// in the new walkPath\r\n\t\t\tlet checkCorrectIds = true;\r\n\t\t\t[\r\n\t\t\t\t'currentBlockId',\r\n\t\t\t\t'nextBlockId',\r\n\t\t\t\t'prevBlockId',\r\n\t\t\t\t'lastActiveBlockId',\r\n\t\t\t].forEach((prop) => {\r\n\t\t\t\tconst allBlocks: (Screen | FormBlock)[] = [\r\n\t\t\t\t\t...newWalkPath,\r\n\t\t\t\t\t...newWelcomeScreens,\r\n\t\t\t\t\t...newThanksScreens,\r\n\t\t\t\t];\r\n\t\t\t\tif (\r\n\t\t\t\t\tnewSwiperState[prop] &&\r\n\t\t\t\t\t!some(\r\n\t\t\t\t\t\tallBlocks,\r\n\t\t\t\t\t\t(block) =>\r\n\t\t\t\t\t\t\tblock.id === newSwiperState[prop] ||\r\n\t\t\t\t\t\t\tnewSwiperState[prop] === 'default_thankyou_screen'\r\n\t\t\t\t\t)\r\n\t\t\t\t) {\r\n\t\t\t\t\tcheckCorrectIds = false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (!checkCorrectIds) return state;\r\n\r\n\t\t\tlet correctBooleans = true;\r\n\r\n\t\t\t// if typeof  new boolean props isn't boolean.\r\n\t\t\t[\r\n\t\t\t\t'isAnimating',\r\n\t\t\t\t'canSwipeNext',\r\n\t\t\t\t'canSwipePrev',\r\n\t\t\t\t'isThankyouScreenActive',\r\n\t\t\t\t'isWelcomeScreenActive',\r\n\t\t\t].forEach((prop) => {\r\n\t\t\t\tif (\r\n\t\t\t\t\tnewSwiperState[prop] &&\r\n\t\t\t\t\ttypeof newSwiperState[prop] !== 'boolean'\r\n\t\t\t\t) {\r\n\t\t\t\t\tcorrectBooleans = false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (!correctBooleans) {\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tconst newCurrentBlockId = newSwiperState.currentBlockId\r\n\t\t\t\t? newSwiperState.currentBlockId\r\n\t\t\t\t: currentBlockId;\r\n\t\t\tconst isFirstField =\r\n\t\t\t\tnewWalkPath?.length > 0 &&\r\n\t\t\t\tnewWalkPath[0].id == newCurrentBlockId;\r\n\r\n\t\t\tconst isLastField =\r\n\t\t\t\tnewWalkPath?.length > 0 &&\r\n\t\t\t\tnewWalkPath[newWalkPath.length - 1].id == newCurrentBlockId;\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t...newSwiperState,\r\n\t\t\t\tcanSwipeNext:\r\n\t\t\t\t\tnewSwiperState.canSwipeNext === undefined\r\n\t\t\t\t\t\t? state.canSwipeNext\r\n\t\t\t\t\t\t: newSwiperState.canSwipeNext === true && isLastField\r\n\t\t\t\t\t\t\t? false\r\n\t\t\t\t\t\t\t: newSwiperState.canSwipeNext,\r\n\t\t\t\tcanSwipePrev:\r\n\t\t\t\t\tnewSwiperState.canSwipePrev === undefined\r\n\t\t\t\t\t\t? state.canSwipePrev\r\n\t\t\t\t\t\t: newSwiperState.canSwipePrev === true && isFirstField\r\n\t\t\t\t\t\t\t? false\r\n\t\t\t\t\t\t\t: newSwiperState.canSwipePrev,\r\n\t\t\t\tisWelcomeScreenActive:\r\n\t\t\t\t\tnewWelcomeScreens.length &&\r\n\t\t\t\t\t\tsome(\r\n\t\t\t\t\t\t\tnewWelcomeScreens,\r\n\t\t\t\t\t\t\t(screen) => screen.id === newCurrentBlockId\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t? true\r\n\t\t\t\t\t\t: false,\r\n\t\t\t\tisThankyouScreenActive:\r\n\t\t\t\t\tsome(\r\n\t\t\t\t\t\tnewThanksScreens,\r\n\t\t\t\t\t\t(screen) => screen.id === newCurrentBlockId\r\n\t\t\t\t\t) || 'default_thankyou_screen' === newCurrentBlockId\r\n\t\t\t\t\t\t? true\r\n\t\t\t\t\t\t: false,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase GO_NEXT: {\r\n\t\t\tif (isAnimating || correctIncorrectDisplay) return state;\r\n\t\t\tconst nextFieldType = walkPath.find(\r\n\t\t\t\t(block) => block.id === nextBlockId\r\n\t\t\t)?.name;\r\n\t\t\tif (!nextFieldType || nextFieldType === 'thankyou-screen') return state;\r\n\t\t\t// const isThereNextField =\r\n\t\t\t// \twalkPath.filter(\r\n\t\t\t// \t\t( block ) =>\r\n\t\t\t// \t\t\tblock.name !== 'welcome-screen' &&\r\n\t\t\t// \t\t\tblock.name !== 'thankyou-screen' &&\r\n\t\t\t// \t\t\tblock.id === nextBlockId\r\n\t\t\t// \t).length > 0;\r\n\t\t\t// const isReallyLastField =\r\n\t\t\t// \twalkPath?.length > 0 &&\r\n\t\t\t// \twalkPath[ walkPath.length - 1 ].id === currentBlockId &&\r\n\t\t\t// \t! isThereNextField;\r\n\t\t\t// if ( isReallyLastField ) return state;\r\n\t\t\tconst currentFieldIndex = walkPath.findIndex(\r\n\t\t\t\t(field) => field.id === currentBlockId\r\n\t\t\t);\r\n\t\t\tlet $newCurrentBlockId = nextBlockId;\r\n\t\t\t// To check if the new current block is within the path, if it isn't, navigate to submission screen.\r\n\t\t\t// This should apply only when the next block is before the current block.\r\n\t\t\tconst newCurrentFieldIndex = walkPath.findIndex(\r\n\t\t\t\t($field) => $field.id === $newCurrentBlockId\r\n\t\t\t);\r\n\r\n\t\t\tif (\r\n\t\t\t\tnewCurrentFieldIndex === -1 ||\r\n\t\t\t\tnewCurrentFieldIndex === currentFieldIndex\r\n\t\t\t) {\r\n\t\t\t\t$newCurrentBlockId = undefined;\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcanSwipeNext: !$newCurrentBlockId ? false : true,\r\n\t\t\t\tcanSwipePrev: true,\r\n\t\t\t\tcurrentBlockId: $newCurrentBlockId,\r\n\t\t\t\tprevBlockId: $newCurrentBlockId\r\n\t\t\t\t\t? walkPath[newCurrentFieldIndex - 1]\r\n\t\t\t\t\t\t? walkPath[newCurrentFieldIndex - 1].id\r\n\t\t\t\t\t\t: undefined\r\n\t\t\t\t\t: walkPath[walkPath.length - 1].id,\r\n\t\t\t\tlastActiveBlockId: currentBlockId,\r\n\t\t\t\tnextBlockId:\r\n\t\t\t\t\tnewCurrentFieldIndex !== -1\r\n\t\t\t\t\t\t? walkPath[newCurrentFieldIndex + 1]\r\n\t\t\t\t\t\t\t? walkPath[newCurrentFieldIndex + 1].id\r\n\t\t\t\t\t\t\t: undefined\r\n\t\t\t\t\t\t: nextBlockId,\r\n\t\t\t\tisAnimating: true,\r\n\t\t\t\tisThankyouScreenActive: false,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase GO_PREV: {\r\n\t\t\tconst isFirstField =\r\n\t\t\t\twalkPath?.length > 0 && walkPath[0].id === currentBlockId;\r\n\r\n\t\t\tif (isAnimating || isFirstField || correctIncorrectDisplay) return state;\r\n\t\t\tconst currentFieldIndex = walkPath.findIndex(\r\n\t\t\t\t(field) => field.id === currentBlockId\r\n\t\t\t);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcanSwipePrev: walkPath[currentFieldIndex - 2] ? true : false,\r\n\t\t\t\tcanSwipeNext: true,\r\n\t\t\t\tcurrentBlockId: prevBlockId,\r\n\t\t\t\tlastActiveBlockId: currentBlockId,\r\n\t\t\t\tnextBlockId: currentBlockId,\r\n\t\t\t\tprevBlockId: walkPath[currentFieldIndex - 2]?.id\r\n\t\t\t\t\t? walkPath[currentFieldIndex - 2].id\r\n\t\t\t\t\t: undefined,\r\n\t\t\t\tisAnimating: true,\r\n\t\t\t\tisThankyouScreenActive: false,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase SET_CORRECT_INCORRECT_DISPLAY: {\r\n\t\t\tconst { val } = action;\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcorrectIncorrectDisplay: val,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase SET_IS_CURRENT_BLOCK_SAFE_TO_SWIPE: {\r\n\t\t\tconst { val } = action;\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tisCurrentBlockSafeToSwipe: val,\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase GO_TO_BLOCK: {\r\n\t\t\tlet { id, forceUpdateState } = action;\r\n\t\t\tif (currentBlockId === id && !forceUpdateState) return state;\r\n\t\t\tconst isTheBlockWelcomeScreenBlock = state.welcomeScreens.some(\r\n\t\t\t\t(screen) => screen.id === id\r\n\t\t\t);\r\n\t\t\tconst isTheBlockThankyouScreenBlock = state.thankyouScreens.some(\r\n\t\t\t\t(screen) => screen.id === id\r\n\t\t\t);\r\n\r\n\t\t\tif (\r\n\t\t\t\tisTheBlockThankyouScreenBlock ||\r\n\t\t\t\tisTheBlockWelcomeScreenBlock\r\n\t\t\t) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tcurrentBlockId: id,\r\n\t\t\t\t\tisAnimating: true,\r\n\t\t\t\t\tcanSwipeNext: false,\r\n\t\t\t\t\tcanSwipePrev: false,\r\n\t\t\t\t\tnextBlockId: undefined,\r\n\t\t\t\t\tprevBlockId: undefined,\r\n\t\t\t\t\tlastActiveBlockId: currentBlockId,\r\n\t\t\t\t\tisWelcomeScreenActive: isTheBlockWelcomeScreenBlock,\r\n\t\t\t\t\tisThankyouScreenActive: isTheBlockThankyouScreenBlock,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tlet fieldIndex = state.walkPath.findIndex(\r\n\t\t\t\t(field) => field.id === id\r\n\t\t\t);\r\n\r\n\t\t\t// If invalid parent block, try to search for inner blocks.\r\n\t\t\tif (\r\n\t\t\t\tfieldIndex === -1 &&\r\n\t\t\t\t!isTheBlockWelcomeScreenBlock &&\r\n\t\t\t\t!isTheBlockThankyouScreenBlock\r\n\t\t\t) {\r\n\t\t\t\tconst groupBlocks = state.walkPath.filter(\r\n\t\t\t\t\t(field) => field.name === 'group'\r\n\t\t\t\t);\r\n\r\n\t\t\t\tlet parentId;\r\n\t\t\t\tforEach(groupBlocks, (groupBlock) => {\r\n\t\t\t\t\tif (groupBlock.innerBlocks) {\r\n\t\t\t\t\t\tconst childIndex = groupBlock.innerBlocks.findIndex(\r\n\t\t\t\t\t\t\t(childBlock) => childBlock.id === id\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tif (childIndex !== -1) {\r\n\t\t\t\t\t\t\tparentId = groupBlock.id;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (!parentId) {\r\n\t\t\t\t\treturn state;\r\n\t\t\t\t}\r\n\t\t\t\tid = parentId;\r\n\t\t\t\tfieldIndex = state.walkPath.findIndex(\r\n\t\t\t\t\t(field) => field.id === id\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcurrentBlockId: id,\r\n\t\t\t\tisAnimating: true,\r\n\t\t\t\tcanSwipeNext: walkPath[fieldIndex + 1] ? true : false,\r\n\t\t\t\tcanSwipePrev: walkPath[fieldIndex - 1] ? true : false,\r\n\t\t\t\tnextBlockId: walkPath[fieldIndex + 1]\r\n\t\t\t\t\t? walkPath[fieldIndex + 1].id\r\n\t\t\t\t\t: undefined,\r\n\t\t\t\tprevBlockId: walkPath[fieldIndex - 1]\r\n\t\t\t\t\t? walkPath[fieldIndex - 1].id\r\n\t\t\t\t\t: undefined,\r\n\t\t\t\tlastActiveBlockId: currentBlockId,\r\n\t\t\t\tisWelcomeScreenActive: false,\r\n\t\t\t\tisThankyouScreenActive: false,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase SET_THANKYOU_SCREENS: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tthankyouScreens: action.screens,\r\n\t\t\t}\r\n\t\t}\r\n\t\tcase COMPLETE_FORM: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcanSwipeNext: false,\r\n\t\t\t\tcanSwipePrev: false,\r\n\t\t\t\tisThankyouScreenActive: true,\r\n\t\t\t\tcurrentBlockId: nextBlockId && state.thankyouScreens.find(screen => screen.id === nextBlockId)\r\n\t\t\t\t\t? nextBlockId\r\n\t\t\t\t\t: thankyouScreens[0]?.id\r\n\t\t\t\t\t\t? thankyouScreens[0].id\r\n\t\t\t\t\t\t: 'default_thankyou_screen',\r\n\t\t\t\tprevBlockId: undefined,\r\n\t\t\t\tnextBlockId: undefined,\r\n\t\t\t\tlastActiveBlockId: undefined,\r\n\t\t\t\tisReviewing: false,\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\treturn state;\r\n};\r\n\r\nconst isFocused: Reducer = (state = false, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_IS_FOCUSED: {\r\n\t\t\tif (typeof action.val !== 'boolean') {\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\treturn action.val;\r\n\t\t}\r\n\t}\r\n\r\n\treturn state;\r\n};\r\n\r\nconst footerDisplay: Reducer = (state = true, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_FOOTER_DISPLAY: {\r\n\t\t\tif (typeof action.val !== 'boolean') {\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\treturn action.val;\r\n\t\t}\r\n\t}\r\n\r\n\treturn state;\r\n};\r\n\r\nconst submit: Reducer<SubmissionState, SubmitActionTypes> = (\r\n\tstate = {\r\n\t\tisSubmitting: false,\r\n\t\tisReviewing: false,\r\n\t\tsubmissionErr: '',\r\n\t\tpaymentData: null,\r\n\t},\r\n\taction\r\n) => {\r\n\tswitch (action.type) {\r\n\t\tcase COMPLETE_FORM: {\r\n\t\t\treturn {\r\n\t\t\t\tisSubmitting: false,\r\n\t\t\t\tisReviewing: false,\r\n\t\t\t\tsubmissionErr: '',\r\n\t\t\t\tpaymentData: null,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase SET_IS_REVIEWING: {\r\n\t\t\tconst { val } = action;\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tisReviewing: val,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase SET_IS_SUBMITTING: {\r\n\t\t\tconst { val } = action;\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tisSubmitting: val,\r\n\t\t\t\tsubmissionErr: '',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase SET_SUBMISSION_ERR: {\r\n\t\t\t// Make sure this action is called while the form is submitting already, otherwhise, do nothing.\r\n\t\t\tif (!state.isSubmitting) return state;\r\n\t\t\tconst { val } = action;\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tisSubmitting: false,\r\n\t\t\t\tsubmissionErr: val,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase SET_PAYMENT_DATA: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tpaymentData: action.data,\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\treturn state;\r\n};\r\n\r\nconst answers: Reducer<RendererAnswersState, RendererAnswersActionTypes> = (\r\n\tstate = {},\r\n\taction\r\n) => {\r\n\tswitch (action.type) {\r\n\t\t// Insert Empty Field Answer\r\n\t\tcase INSERT_EMPTY_FIELD_ANSWER: {\r\n\t\t\tconst { id, blockName } = action;\r\n\t\t\tconst answers = { ...state };\r\n\r\n\t\t\tif (!answers[id]) {\r\n\t\t\t\tanswers[id] = {\r\n\t\t\t\t\tvalue: undefined,\r\n\t\t\t\t\tisValid: true,\r\n\t\t\t\t\tisAnswered: false,\r\n\t\t\t\t\tisPending: false,\r\n\t\t\t\t\tpendingMsg: undefined,\r\n\t\t\t\t\tvalidationErr: undefined,\r\n\t\t\t\t\tisCorrect: undefined,\r\n\t\t\t\t\tisCorrectIncorrectScreenDisplayed: false,\r\n\t\t\t\t\tisLocked: false,\r\n\t\t\t\t\tblockName,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\treturn answers;\r\n\t\t}\r\n\r\n\t\t// SET FIELD ANSWER\r\n\t\tcase SET_FIELD_ANSWER: {\r\n\t\t\tconst { id, val } = action;\r\n\t\t\t// If the field id is incorrect or the value passed is the same value, return same state.\r\n\t\t\tif (val === state[id]?.value) {\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[id]: {\r\n\t\t\t\t\t...state[id],\r\n\t\t\t\t\tvalue: val,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase RESET_ANSWERS: {\r\n\t\t\treturn {};\r\n\t\t}\r\n\r\n\t\t// SET IS FIELD VALID\r\n\t\tcase SET_IS_FIELD_VALID: {\r\n\t\t\tconst { id, val } = action;\r\n\t\t\t// If the field id is incorrect or the value passed is the same value, return same state.\r\n\t\t\tif (!state[id] || val === state[id].isValid) {\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[id]: {\r\n\t\t\t\t\t...state[id],\r\n\t\t\t\t\tisValid: val,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// SET IS FIELD ANSWERED\r\n\t\tcase SET_IS_FIELD_ANSWERED: {\r\n\t\t\tconst { id, val } = action;\r\n\t\t\t// If the field id is incorrect or the value passed is the same value, return same state.\r\n\t\t\tif (!state[id] || val === state[id].isAnswered) {\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[id]: {\r\n\t\t\t\t\t...state[id],\r\n\t\t\t\t\tisAnswered: val,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// SET IS FIELD ANSWER CORRECT\r\n\t\tcase SET_IS_FIELD_ANSWER_CORRECT: {\r\n\t\t\tconst { id, val } = action;\r\n\t\t\t// If the field id is incorrect or the value passed is the same value, return same state.\r\n\t\t\tif (!state[id] || val === state[id].isCorrect) {\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[id]: {\r\n\t\t\t\t\t...state[id],\r\n\t\t\t\t\tisCorrect: val,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase SET_IS_FIELD_ANSWER_LOCKED: {\r\n\t\t\tconst { id, val } = action;\r\n\t\t\t// .\r\n\t\t\tif (!state[id] || val === state[id].isLocked) {\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[id]: {\r\n\t\t\t\t\t...state[id],\r\n\t\t\t\t\tisLocked: val,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase SET_IS_FIELD_CORRECT_INCORRECT_SCREEN_DISPLAYED: {\r\n\t\t\tconst { id, val } = action;\r\n\t\t\t// .\r\n\t\t\tif (!state[id] || val === state[id].isCorrectIncorrectScreenDisplayed) {\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[id]: {\r\n\t\t\t\t\t...state[id],\r\n\t\t\t\t\tisCorrectIncorrectScreenDisplayed: val,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// SET IS FIELD PENDING\r\n\t\tcase SET_IS_FIELD_PENDING: {\r\n\t\t\tconst { id, val } = action;\r\n\t\t\t// If the field id is incorrect or the value passed is the same value, return same state.\r\n\t\t\tif (!state[id] || val === state[id].isPending) {\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[id]: {\r\n\t\t\t\t\t...state[id],\r\n\t\t\t\t\tisPending: val,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// SET FIELD PENDING MSG\r\n\t\tcase SET_FIELD_PENDING_MSG: {\r\n\t\t\tconst { id, val } = action;\r\n\t\t\t// If the field id is incorrect or the value passed is the same value, return same state.\r\n\t\t\tif (!state[id] || val === state[id].pendingMsg) {\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[id]: {\r\n\t\t\t\t\t...state[id],\r\n\t\t\t\t\tpendingMsg: val,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// SET FIELD VALIDATION ERR\r\n\t\tcase SET_FIELD_VALIDATION_ERR: {\r\n\t\t\tconst { id, val } = action;\r\n\t\t\t// If the field id is incorrect or the value passed is the same value, return same state.\r\n\t\t\tif (!state[id] || val === state[id].validationErr) {\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[id]: {\r\n\t\t\t\t\t...state[id],\r\n\t\t\t\t\tvalidationErr: val,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\treturn state;\r\n};\r\n\r\n// @ts-ignore\r\nconst RendererCoreReducer: Reducer<\r\n\t{\r\n\t\tanswers: RendererAnswersState;\r\n\t\tfooterDisplay: boolean;\r\n\t\tisFocused: boolean;\r\n\t\tsubmit: SubmissionState;\r\n\t\tswiper: SwiperState;\r\n\t},\r\n\tany\r\n> = combineReducers({\r\n\tanswers,\r\n\tfooterDisplay,\r\n\tisFocused,\r\n\tsubmit,\r\n\tswiper,\r\n});\r\nexport type State = ReturnType<typeof RendererCoreReducer>;\r\n\r\nexport default RendererCoreReducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}